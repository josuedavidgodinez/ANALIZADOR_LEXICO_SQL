/* The following code was generated by JFlex 1.4.3 on 31/10/19 12:36 PM */

package code;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 31/10/19 12:36 PM from the specification file
 * <tt>src/code/Lexercup.flex</tt>
 */
class Lexercup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  6,  0,  0,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     4, 50,  0, 57, 44, 46, 51, 11, 41, 42,  8, 43, 53,  9, 10,  7, 
     3,  3, 38,  3,  3,  3,  3,  3,  3,  3,  0, 45, 47, 48, 49,  0, 
    56, 12, 26, 22, 13, 14, 24, 29, 25, 27, 34, 36, 19, 30, 18, 21, 
    20, 35, 17, 28, 16, 23, 32, 33, 15, 31, 37, 39,  0, 40,  0,  2, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 54, 52, 55,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\30\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\4"+
    "\1\35\1\2\1\36\6\2\1\37\21\2\1\40\1\2"+
    "\1\41\12\2\1\36\16\2\1\42\1\43\3\2\1\44"+
    "\32\2\1\45\1\2\1\46\1\47\1\50\20\2\1\51"+
    "\1\52\3\2\1\53\13\2\1\54\2\2\1\0\1\55"+
    "\1\0\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\0\1\34\2\0\1\4\1\67\1\70"+
    "\1\2\1\71\3\2\1\72\1\2\1\73\4\2\1\36"+
    "\17\2\1\74\12\2\1\75\23\2\1\76\37\2\1\77"+
    "\1\100\31\2\1\101\6\2\1\102\17\2\1\103\2\2"+
    "\1\104\13\2\1\105\11\2\1\106\4\2\1\36\4\2"+
    "\1\107\5\2\1\110\11\2\1\111\2\2\3\0\1\4"+
    "\7\2\1\112\7\2\1\113\1\114\7\2\1\115\6\2"+
    "\1\116\2\2\1\117\1\2\1\120\4\2\1\121\1\122"+
    "\3\2\1\36\1\123\17\2\1\124\2\2\1\125\3\2"+
    "\1\126\1\2\1\127\4\2\1\130\6\2\1\131\5\2"+
    "\1\36\5\2\1\132\3\2\1\133\22\2\1\134\10\2"+
    "\1\135\4\2\1\136\5\2\1\137\1\2\1\140\13\2"+
    "\1\141\12\2\1\142\2\2\1\143\10\2\1\144\11\2"+
    "\1\145\7\2\1\146\3\2\1\147\1\2\1\150\1\151"+
    "\1\2\1\3\1\33\1\152\32\2\1\153\30\2\1\154"+
    "\1\2\1\155\3\2\1\156\3\2\1\157\1\160\1\161"+
    "\6\2\1\162\3\2\1\163\6\2\1\164\3\2\1\165"+
    "\16\2\1\166\4\2\1\167\2\2\1\170\5\2\1\171"+
    "\1\2\1\172\3\2\1\173\1\2\1\174\5\2\1\175"+
    "\2\2\1\176\2\2\1\177\1\2\1\200\5\2\1\201"+
    "\16\2\1\202\3\2\1\203\3\2\1\36\1\2\1\204"+
    "\1\205\1\2\1\206\10\2\1\207\5\2\1\210\10\2"+
    "\1\36\1\211\15\2\1\212\23\2\1\213\4\2\1\214"+
    "\1\2\1\215\1\216\1\2\1\217\7\2\1\220\1\221"+
    "\1\2\1\222\2\2\1\223\1\2\1\224\1\225\1\226"+
    "\10\2\1\227\5\2\1\230\2\2\1\231\2\2\1\232"+
    "\3\2\1\233\1\2\1\234\1\36\3\2\1\235\1\2"+
    "\1\236\3\2\1\237\1\240\1\241\5\2\1\242\1\243"+
    "\1\244\1\2\1\245\2\2\1\246\15\2\1\247\4\2"+
    "\1\250\4\2\1\251\3\2\1\252\2\2\1\253\4\2"+
    "\1\36\5\2\1\254\1\255\5\2\1\256\4\2\1\257"+
    "\2\2\1\260\4\2\1\36\6\2\1\261\1\262\1\2"+
    "\1\263\1\2\1\264\1\265\3\2\1\266\1\2\1\267"+
    "\4\2\1\270\4\2\1\271\4\2\1\272\1\273\2\2"+
    "\1\274\1\2\1\275\11\2\1\36\3\2\1\276\2\2"+
    "\1\277\1\300\1\2\1\301\13\2\1\302\6\2\1\303"+
    "\2\2\1\304\1\2\1\305\3\2\1\306\1\307\3\2"+
    "\1\310\3\2\1\36\5\2\1\311\6\2\1\312\12\2"+
    "\1\313\1\2\1\314\1\2\1\315\1\316\1\317\3\2"+
    "\1\320\15\2\1\321\3\2\1\322\6\2\1\323\13\2"+
    "\1\324\1\325\1\36\1\326\1\327\2\2\1\330\12\2"+
    "\1\331\1\332\1\2\1\333\1\2\1\334\20\2\1\335"+
    "\3\2\1\336\27\2\1\337";

  private static int [] zzUnpackAction() {
    int [] result = new int[1217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\72\0\350\0\72\0\u0122"+
    "\0\72\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658"+
    "\0\u0692\0\u06cc\0\u0706\0\72\0\u0740\0\72\0\72\0\72"+
    "\0\72\0\72\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c"+
    "\0\72\0\u08d6\0\72\0\72\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\72\0\u09f8\0\164\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\164\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\164"+
    "\0\u1d00\0\u1d3a\0\164\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c"+
    "\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c"+
    "\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\164\0\u2188\0\u21c2"+
    "\0\u21fc\0\164\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\164\0\u24b4\0\u24ee"+
    "\0\u2528\0\72\0\u2562\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\u259c\0\u25d6\0\u2610\0\u264a"+
    "\0\u2684\0\164\0\164\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\164\0\u27e0\0\164\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2"+
    "\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\164"+
    "\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38"+
    "\0\u2e72\0\u2eac\0\164\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce"+
    "\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e"+
    "\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\164\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4"+
    "\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74"+
    "\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14"+
    "\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554"+
    "\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724"+
    "\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4"+
    "\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4"+
    "\0\u4afe\0\164\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a"+
    "\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a"+
    "\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa"+
    "\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c\0\72\0\u5156\0\u5190"+
    "\0\u51ca\0\u2610\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec\0\u5326"+
    "\0\u5360\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6"+
    "\0\u5530\0\u556a\0\164\0\u55a4\0\u55de\0\u5618\0\u5652\0\u568c"+
    "\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822\0\u585c"+
    "\0\u5896\0\164\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2"+
    "\0\u5a2c\0\u5a66\0\u5aa0\0\164\0\u5ada\0\u5b14\0\u5b4e\0\u5b88"+
    "\0\u5bc2\0\164\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e"+
    "\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee"+
    "\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084\0\u60be"+
    "\0\164\0\u60f8\0\164\0\u6132\0\u616c\0\u61a6\0\u61e0\0\164"+
    "\0\u621a\0\u6254\0\u628e\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0"+
    "\0\u63ea\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546\0\u6580"+
    "\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u66dc\0\164\0\u6716"+
    "\0\u6750\0\u678a\0\u67c4\0\u67fe\0\u6838\0\u6872\0\u68ac\0\u68e6"+
    "\0\u6920\0\u695a\0\u6994\0\u69ce\0\u6a08\0\u4e9e\0\u6a42\0\u6a7c"+
    "\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e\0\u6bd8\0\u6c12\0\u6c4c"+
    "\0\u6c86\0\u6cc0\0\164\0\u6cfa\0\u6d34\0\u6d6e\0\u6da8\0\164"+
    "\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\164\0\u6f04\0\u6f3e"+
    "\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a\0\u70d4\0\u710e"+
    "\0\u7148\0\u7182\0\u71bc\0\164\0\u71f6\0\u7230\0\u726a\0\u72a4"+
    "\0\u72de\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400\0\164\0\u743a"+
    "\0\u7474\0\164\0\u74ae\0\u74e8\0\u7522\0\u755c\0\u7596\0\u75d0"+
    "\0\u760a\0\u7644\0\164\0\u767e\0\u76b8\0\u76f2\0\u772c\0\u7766"+
    "\0\u77a0\0\u77da\0\u7814\0\u784e\0\164\0\u7888\0\u78c2\0\u78fc"+
    "\0\u7936\0\u7970\0\u79aa\0\u79e4\0\164\0\u7a1e\0\u7a58\0\u7a92"+
    "\0\u7acc\0\u7b06\0\u7b40\0\164\0\u7b7a\0\72\0\u5190\0\164"+
    "\0\u7bb4\0\u7bee\0\u7c28\0\u7c62\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a"+
    "\0\u7d84\0\u7dbe\0\u7df8\0\u7e32\0\u7e6c\0\u7ea6\0\u7ee0\0\u7f1a"+
    "\0\u7f54\0\u7f8e\0\u7fc8\0\u8002\0\u803c\0\u8076\0\u80b0\0\u80ea"+
    "\0\u8124\0\u815e\0\u8198\0\u81d2\0\u820c\0\u8246\0\u8280\0\u82ba"+
    "\0\u82f4\0\u832e\0\u8368\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a"+
    "\0\u84c4\0\u84fe\0\u8538\0\u8572\0\u85ac\0\u85e6\0\u8620\0\u865a"+
    "\0\u8694\0\u86ce\0\u8708\0\164\0\u8742\0\164\0\u877c\0\u87b6"+
    "\0\u87f0\0\164\0\u882a\0\u8864\0\u889e\0\164\0\164\0\164"+
    "\0\u88d8\0\u8912\0\u894c\0\u8986\0\u89c0\0\u89fa\0\164\0\u8a34"+
    "\0\u8a6e\0\u8aa8\0\164\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90\0\u8bca"+
    "\0\u458e\0\164\0\u8c04\0\u8c3e\0\u8c78\0\164\0\u8cb2\0\u8cec"+
    "\0\u8d26\0\u8d60\0\u8d9a\0\u8dd4\0\u8e0e\0\u8e48\0\u8e82\0\u8ebc"+
    "\0\u8ef6\0\u8f30\0\u8f6a\0\u8fa4\0\164\0\u8fde\0\u9018\0\u9052"+
    "\0\u908c\0\u90c6\0\u9100\0\u913a\0\164\0\u9174\0\u91ae\0\u91e8"+
    "\0\u9222\0\u925c\0\164\0\u9296\0\164\0\u92d0\0\u930a\0\u9344"+
    "\0\164\0\u937e\0\164\0\u93b8\0\u93f2\0\u942c\0\u9466\0\u94a0"+
    "\0\164\0\u94da\0\u9514\0\164\0\u954e\0\u9588\0\164\0\u95c2"+
    "\0\164\0\u95fc\0\u9636\0\u9670\0\u96aa\0\u96e4\0\164\0\u971e"+
    "\0\u9758\0\u9792\0\u97cc\0\u9806\0\u9840\0\u987a\0\u98b4\0\u98ee"+
    "\0\u9928\0\u9962\0\u999c\0\u99d6\0\u9a10\0\164\0\u9a4a\0\u9a84"+
    "\0\u9abe\0\164\0\u9af8\0\u9b32\0\u9b6c\0\u9ba6\0\u9be0\0\u9c1a"+
    "\0\164\0\u9c54\0\164\0\u9c8e\0\u9cc8\0\u9d02\0\u9d3c\0\u9d76"+
    "\0\u9db0\0\u9dea\0\u9e24\0\164\0\u9e5e\0\u9e98\0\u9ed2\0\u9f0c"+
    "\0\u9f46\0\164\0\u9f80\0\u9fba\0\u9ff4\0\ua02e\0\ua068\0\ua0a2"+
    "\0\ua0dc\0\ua116\0\u2732\0\164\0\ua150\0\ua18a\0\ua1c4\0\ua1fe"+
    "\0\ua238\0\ua272\0\ua2ac\0\ua2e6\0\ua320\0\ua35a\0\ua394\0\ua3ce"+
    "\0\ua408\0\ua442\0\ua47c\0\ua4b6\0\ua4f0\0\ua52a\0\ua564\0\ua59e"+
    "\0\ua5d8\0\ua612\0\ua64c\0\ua686\0\ua6c0\0\ua6fa\0\ua734\0\ua76e"+
    "\0\ua7a8\0\ua7e2\0\ua81c\0\ua856\0\ua890\0\164\0\ua8ca\0\ua904"+
    "\0\ua93e\0\ua978\0\164\0\ua9b2\0\164\0\164\0\ua9ec\0\164"+
    "\0\uaa26\0\uaa60\0\uaa9a\0\uaad4\0\uab0e\0\uab48\0\uab82\0\164"+
    "\0\164\0\uabbc\0\164\0\uabf6\0\uac30\0\164\0\uac6a\0\164"+
    "\0\u9c1a\0\164\0\uaca4\0\uacde\0\uad18\0\uad52\0\uad8c\0\uadc6"+
    "\0\uae00\0\uae3a\0\164\0\uae74\0\uaeae\0\uaee8\0\uaf22\0\uaf5c"+
    "\0\164\0\uaf96\0\uafd0\0\164\0\ub00a\0\ub044\0\164\0\ub07e"+
    "\0\ub0b8\0\ub0f2\0\164\0\ub12c\0\ub166\0\ub1a0\0\ub1da\0\ub214"+
    "\0\ub24e\0\164\0\ub288\0\164\0\ub2c2\0\ub2fc\0\ub336\0\164"+
    "\0\164\0\164\0\ub370\0\ub3aa\0\ub3e4\0\ub41e\0\ub458\0\164"+
    "\0\164\0\ub492\0\ub4cc\0\164\0\ub506\0\ub540\0\ub57a\0\ub5b4"+
    "\0\ub5ee\0\ub628\0\ub662\0\ub69c\0\ub6d6\0\ub710\0\ub74a\0\ub784"+
    "\0\ub7be\0\ub7f8\0\ub832\0\ub86c\0\164\0\ub8a6\0\ub8e0\0\ub91a"+
    "\0\ub954\0\164\0\ub98e\0\ub9c8\0\uba02\0\uba3c\0\164\0\uba76"+
    "\0\ubab0\0\ubaea\0\164\0\ubb24\0\ubb5e\0\164\0\ubb98\0\ubbd2"+
    "\0\ubc0c\0\ubc46\0\u3578\0\ubc80\0\ubcba\0\ubcf4\0\ubd2e\0\ubd68"+
    "\0\164\0\ubda2\0\ubddc\0\ube16\0\ube50\0\ube8a\0\ubec4\0\164"+
    "\0\ubefe\0\ubf38\0\ubf72\0\ubfac\0\164\0\ubfe6\0\uc020\0\164"+
    "\0\u15fa\0\uc05a\0\uc094\0\uc0ce\0\ub214\0\uc108\0\uc142\0\uc17c"+
    "\0\uc1b6\0\uc1f0\0\u48f4\0\164\0\164\0\uc22a\0\164\0\uc264"+
    "\0\164\0\uc29e\0\uc2d8\0\uc312\0\uc34c\0\164\0\uc386\0\164"+
    "\0\uc3c0\0\uc3fa\0\uc434\0\uc46e\0\164\0\uc4a8\0\uc4e2\0\uc51c"+
    "\0\uc556\0\164\0\uc590\0\uc5ca\0\uc604\0\uc63e\0\164\0\164"+
    "\0\uc678\0\uc6b2\0\164\0\uc6ec\0\164\0\uc726\0\uc760\0\uc79a"+
    "\0\uc7d4\0\uc80e\0\uc848\0\uc882\0\uc8bc\0\uc8f6\0\uc930\0\uc96a"+
    "\0\uc9a4\0\uc9de\0\164\0\uca18\0\uca52\0\164\0\164\0\uca8c"+
    "\0\ucac6\0\ucb00\0\ucb3a\0\ucb74\0\ucbae\0\ucbe8\0\ucc22\0\ucc5c"+
    "\0\ucc96\0\uccd0\0\ucd0a\0\ucd44\0\164\0\ucd7e\0\ucdb8\0\ucdf2"+
    "\0\uce2c\0\uce66\0\ucea0\0\164\0\uceda\0\ucf14\0\164\0\ucf4e"+
    "\0\164\0\ucf88\0\ucfc2\0\ucffc\0\164\0\164\0\ud036\0\ud070"+
    "\0\ud0aa\0\164\0\ud0e4\0\ud11e\0\ud158\0\u458e\0\ud192\0\ud1cc"+
    "\0\ud206\0\ud240\0\ud27a\0\164\0\ud2b4\0\ud2ee\0\ud328\0\ud362"+
    "\0\ud39c\0\ud3d6\0\164\0\ud410\0\ud44a\0\ud484\0\ud4be\0\ud4f8"+
    "\0\ud532\0\ud56c\0\ud5a6\0\ud5e0\0\ud61a\0\164\0\ud654\0\164"+
    "\0\ud68e\0\164\0\164\0\u67c4\0\ud6c8\0\ud702\0\ud73c\0\164"+
    "\0\ud776\0\ud7b0\0\ud7ea\0\ud824\0\ud85e\0\ud898\0\ud8d2\0\ud90c"+
    "\0\ud946\0\ud980\0\ud9ba\0\ud9f4\0\uda2e\0\164\0\uda68\0\udaa2"+
    "\0\udadc\0\164\0\udb16\0\udb50\0\udb8a\0\udbc4\0\udbfe\0\udc38"+
    "\0\164\0\udc72\0\udcac\0\udce6\0\udd20\0\udd5a\0\udd94\0\uddce"+
    "\0\ude08\0\ude42\0\ude7c\0\udeb6\0\164\0\164\0\udef0\0\164"+
    "\0\164\0\udf2a\0\udf64\0\164\0\udf9e\0\udfd8\0\ue012\0\ue04c"+
    "\0\ue086\0\ue0c0\0\ue0fa\0\ue134\0\ue16e\0\ue1a8\0\164\0\164"+
    "\0\ue1e2\0\164\0\ue21c\0\164\0\ue256\0\ue290\0\ue2ca\0\ue304"+
    "\0\ue33e\0\ue378\0\ue3b2\0\ue3ec\0\ue426\0\ue460\0\ue49a\0\ue4d4"+
    "\0\ue50e\0\ue548\0\ue582\0\ue5bc\0\164\0\ue5f6\0\uc930\0\ue630"+
    "\0\164\0\ue66a\0\ue6a4\0\ue6de\0\ue718\0\ue752\0\ue78c\0\ue7c6"+
    "\0\ue800\0\ue83a\0\ue874\0\ue8ae\0\ue8e8\0\ue922\0\ue95c\0\ue996"+
    "\0\ue9d0\0\uea0a\0\uea44\0\uea7e\0\ueab8\0\ueaf2\0\ueb2c\0\ueb66"+
    "\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\3\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\3\1\41\1\42\1\4\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\73\0\3\3\10\0\33\3\26\0\1\4\6\0\1\66"+
    "\33\0\1\4\33\0\1\67\72\0\1\70\60\0\5\12"+
    "\2\0\4\12\1\71\56\12\1\0\3\3\10\0\1\3"+
    "\1\72\2\3\1\73\1\74\1\75\1\76\2\3\1\77"+
    "\1\100\2\3\1\101\1\3\1\102\3\3\1\103\6\3"+
    "\24\0\3\3\10\0\1\104\1\3\1\105\2\3\1\106"+
    "\3\3\1\107\1\3\1\110\2\3\1\111\1\112\3\3"+
    "\1\113\7\3\24\0\3\3\10\0\3\3\1\114\1\3"+
    "\1\115\1\116\1\117\10\3\1\120\12\3\24\0\3\3"+
    "\10\0\1\121\1\3\1\122\2\3\1\123\3\3\1\124"+
    "\3\3\1\125\1\126\1\127\1\130\2\3\1\131\7\3"+
    "\24\0\3\3\10\0\1\132\1\3\1\133\6\3\1\134"+
    "\1\3\1\135\3\3\1\136\13\3\24\0\3\3\10\0"+
    "\1\137\1\3\1\140\6\3\1\141\1\142\1\143\10\3"+
    "\1\144\6\3\24\0\3\3\10\0\1\145\1\3\1\146"+
    "\6\3\1\147\5\3\1\150\13\3\24\0\3\3\10\0"+
    "\1\151\1\3\1\152\2\3\1\153\1\3\1\154\1\3"+
    "\1\155\1\3\1\156\3\3\1\157\13\3\24\0\3\3"+
    "\10\0\5\3\1\160\1\161\1\3\1\162\1\3\1\163"+
    "\1\164\1\165\7\3\1\166\1\167\5\3\24\0\3\3"+
    "\10\0\1\170\4\3\1\171\1\3\1\172\1\3\1\173"+
    "\1\3\1\174\1\3\1\175\15\3\24\0\3\3\10\0"+
    "\6\3\1\176\1\3\1\177\7\3\1\200\12\3\24\0"+
    "\3\3\10\0\1\201\1\3\1\202\2\3\1\203\1\3"+
    "\1\204\1\3\1\205\1\3\1\206\3\3\1\207\13\3"+
    "\24\0\3\3\10\0\1\210\10\3\1\211\21\3\24\0"+
    "\3\3\10\0\1\212\1\3\1\213\2\3\1\214\3\3"+
    "\1\215\1\3\1\216\3\3\1\217\3\3\1\220\7\3"+
    "\24\0\3\3\10\0\1\3\1\221\4\3\1\222\5\3"+
    "\1\223\3\3\1\224\1\3\1\225\10\3\24\0\3\3"+
    "\10\0\1\226\1\3\1\227\1\3\1\230\3\3\1\231"+
    "\1\232\1\233\1\234\1\3\1\235\1\3\1\236\2\3"+
    "\1\237\1\240\3\3\1\241\3\3\24\0\3\3\10\0"+
    "\2\3\1\242\2\3\1\243\1\3\1\244\1\3\1\245"+
    "\4\3\1\246\14\3\24\0\3\3\10\0\1\247\1\3"+
    "\1\250\6\3\1\251\4\3\1\252\1\253\13\3\24\0"+
    "\3\3\10\0\2\3\1\254\30\3\24\0\3\3\10\0"+
    "\1\255\16\3\1\256\13\3\24\0\3\3\10\0\1\257"+
    "\4\3\1\260\3\3\1\261\3\3\1\262\1\3\1\263"+
    "\13\3\24\0\3\3\10\0\11\3\1\264\21\3\24\0"+
    "\3\3\10\0\2\3\1\265\13\3\1\266\1\267\13\3"+
    "\24\0\3\3\10\0\11\3\1\270\21\3\24\0\1\271"+
    "\12\0\32\271\2\0\1\272\32\0\1\273\40\0\1\274"+
    "\77\0\1\275\71\0\1\276\71\0\1\277\71\0\1\300"+
    "\74\0\1\301\72\0\1\302\74\0\1\303\73\0\1\304"+
    "\3\0\1\66\12\0\1\305\27\0\1\66\23\0\5\306"+
    "\2\307\1\306\1\310\1\306\1\307\57\306\5\70\1\311"+
    "\1\5\63\70\1\0\3\3\10\0\1\73\1\312\31\3"+
    "\24\0\3\3\10\0\2\3\1\73\30\3\24\0\3\3"+
    "\10\0\1\3\1\313\21\3\1\73\7\3\24\0\3\3"+
    "\10\0\4\3\1\314\2\3\1\315\23\3\24\0\3\3"+
    "\10\0\4\3\1\316\26\3\24\0\3\3\10\0\4\3"+
    "\1\317\26\3\24\0\3\3\10\0\20\3\1\320\12\3"+
    "\24\0\3\3\10\0\12\3\1\321\5\3\1\322\12\3"+
    "\24\0\3\3\10\0\21\3\1\323\11\3\24\0\3\3"+
    "\10\0\4\3\1\324\16\3\1\73\7\3\24\0\3\3"+
    "\10\0\1\325\5\3\1\326\1\327\2\3\1\330\1\3"+
    "\1\331\3\3\1\332\12\3\24\0\3\3\10\0\11\3"+
    "\1\333\21\3\24\0\3\3\10\0\13\3\1\334\6\3"+
    "\1\335\10\3\24\0\3\3\10\0\22\3\1\336\10\3"+
    "\24\0\3\3\10\0\12\3\1\337\20\3\24\0\3\3"+
    "\10\0\1\340\17\3\1\341\12\3\24\0\3\3\10\0"+
    "\6\3\1\342\24\3\24\0\3\3\10\0\2\3\1\343"+
    "\1\3\1\344\5\3\1\345\4\3\1\346\13\3\24\0"+
    "\3\3\10\0\5\3\1\347\25\3\24\0\3\3\10\0"+
    "\1\3\1\350\10\3\1\351\20\3\24\0\3\3\10\0"+
    "\20\3\1\352\12\3\24\0\3\3\10\0\12\3\1\353"+
    "\20\3\24\0\3\3\10\0\16\3\1\354\14\3\24\0"+
    "\3\3\10\0\3\3\1\355\16\3\1\356\10\3\24\0"+
    "\3\3\10\0\1\357\12\3\1\360\3\3\1\361\3\3"+
    "\1\362\7\3\24\0\3\3\10\0\10\3\1\363\22\3"+
    "\24\0\3\3\10\0\2\3\1\364\30\3\24\0\3\3"+
    "\10\0\22\3\1\365\10\3\24\0\3\3\10\0\2\3"+
    "\1\366\30\3\24\0\3\3\10\0\10\3\1\367\22\3"+
    "\24\0\3\3\10\0\17\3\1\370\13\3\24\0\3\3"+
    "\10\0\1\371\3\3\1\372\2\3\1\373\1\374\1\3"+
    "\1\375\1\3\1\376\1\3\1\377\1\3\1\u0100\3\3"+
    "\1\u0101\6\3\24\0\3\3\10\0\7\3\1\u0102\15\3"+
    "\1\u0103\5\3\24\0\3\3\10\0\7\3\1\74\23\3"+
    "\24\0\3\3\10\0\21\3\1\u0104\11\3\24\0\3\3"+
    "\10\0\4\3\1\u0105\15\3\1\u0106\10\3\24\0\3\3"+
    "\10\0\3\3\1\242\27\3\24\0\3\3\10\0\4\3"+
    "\1\u0107\1\3\1\u0108\3\3\1\u0109\20\3\24\0\3\3"+
    "\10\0\15\3\1\254\15\3\24\0\3\3\10\0\7\3"+
    "\1\u010a\12\3\1\u010b\10\3\24\0\3\3\10\0\1\u010c"+
    "\32\3\24\0\3\3\10\0\6\3\1\u010d\11\3\1\u010e"+
    "\12\3\24\0\3\3\10\0\1\u010f\13\3\1\u0110\7\3"+
    "\1\u0111\6\3\24\0\3\3\10\0\1\u0112\11\3\1\u0113"+
    "\6\3\1\u0114\3\3\1\u0115\5\3\24\0\3\3\10\0"+
    "\6\3\1\u0116\13\3\1\u0117\5\3\1\u0118\2\3\24\0"+
    "\3\3\10\0\1\3\1\73\3\3\1\u0119\12\3\1\u011a"+
    "\12\3\24\0\3\3\10\0\5\3\1\u011b\25\3\24\0"+
    "\3\3\10\0\2\3\1\u011c\6\3\1\u011d\5\3\1\u011e"+
    "\13\3\24\0\3\3\10\0\1\u011f\32\3\24\0\3\3"+
    "\10\0\20\3\1\u0120\12\3\24\0\3\3\10\0\16\3"+
    "\1\u0121\14\3\24\0\3\3\10\0\24\3\1\u0122\6\3"+
    "\24\0\3\3\10\0\1\3\1\u0123\31\3\24\0\3\3"+
    "\10\0\7\3\1\326\23\3\24\0\3\3\10\0\2\3"+
    "\1\u0124\1\3\1\u0125\26\3\24\0\3\3\10\0\4\3"+
    "\1\u0126\26\3\24\0\3\3\10\0\4\3\1\u0127\26\3"+
    "\24\0\3\3\10\0\14\3\1\u0128\16\3\24\0\3\3"+
    "\10\0\2\3\1\u0129\30\3\24\0\3\3\10\0\6\3"+
    "\1\u012a\24\3\24\0\3\3\10\0\4\3\1\u012b\2\3"+
    "\1\u012c\10\3\1\u012d\12\3\24\0\3\3\10\0\2\3"+
    "\1\u012e\6\3\1\u012f\21\3\24\0\3\3\10\0\11\3"+
    "\1\u0130\1\3\1\u0131\17\3\24\0\3\3\10\0\1\u0132"+
    "\4\3\1\u0133\1\u0134\1\u0135\3\3\1\u0136\6\3\1\u0137"+
    "\10\3\24\0\3\3\10\0\5\3\1\u0138\25\3\24\0"+
    "\3\3\10\0\1\u0139\1\3\1\u013a\30\3\24\0\3\3"+
    "\10\0\7\3\1\u013b\1\u013c\2\3\1\u013d\3\3\1\u013e"+
    "\10\3\1\u013f\2\3\24\0\3\3\10\0\1\3\1\u0140"+
    "\6\3\1\u0115\22\3\24\0\3\3\10\0\1\u0141\1\3"+
    "\1\u0142\14\3\1\u0143\13\3\24\0\3\3\10\0\7\3"+
    "\1\u0130\10\3\1\u0144\12\3\24\0\3\3\10\0\4\3"+
    "\1\u0145\26\3\24\0\3\3\10\0\2\3\1\u0146\6\3"+
    "\1\u0147\21\3\24\0\3\3\10\0\11\3\1\u0148\21\3"+
    "\24\0\3\3\10\0\5\3\1\u0149\5\3\1\u014a\17\3"+
    "\24\0\3\3\10\0\6\3\1\u014b\1\u014c\23\3\24\0"+
    "\3\3\10\0\5\3\1\u014d\1\3\1\u014e\23\3\24\0"+
    "\3\3\10\0\24\3\1\u014f\6\3\24\0\3\3\10\0"+
    "\7\3\1\u0150\3\3\1\u0151\17\3\24\0\3\3\10\0"+
    "\12\3\1\u0152\20\3\24\0\3\3\10\0\4\3\1\u0153"+
    "\14\3\1\u0154\11\3\24\0\3\3\10\0\2\3\1\u0155"+
    "\6\3\1\u0156\21\3\24\0\3\3\10\0\4\3\1\u0157"+
    "\26\3\24\0\3\3\10\0\7\3\1\u0158\23\3\24\0"+
    "\3\3\10\0\4\3\1\u0159\26\3\24\0\3\3\10\0"+
    "\2\3\1\u015a\30\3\24\0\3\3\10\0\1\3\1\u015b"+
    "\2\3\1\u015c\1\3\1\u015d\1\u015e\1\u015f\1\3\1\u0160"+
    "\4\3\1\u0161\1\u0162\1\3\1\u0163\10\3\24\0\3\3"+
    "\10\0\11\3\1\u0164\21\3\24\0\3\3\10\0\1\u0165"+
    "\21\3\1\u0166\10\3\24\0\3\3\10\0\24\3\1\u0167"+
    "\6\3\24\0\3\3\10\0\4\3\1\u0168\2\3\1\u0169"+
    "\2\3\1\u016a\5\3\1\u016b\1\3\1\u016c\10\3\24\0"+
    "\3\3\10\0\1\u016d\32\3\24\0\3\3\10\0\1\u016e"+
    "\32\3\24\0\3\3\10\0\22\3\1\74\10\3\24\0"+
    "\3\3\10\0\5\3\1\u016f\7\3\1\u0170\15\3\24\0"+
    "\3\3\10\0\16\3\1\u0171\3\3\1\u0172\10\3\24\0"+
    "\3\3\10\0\13\3\1\u0173\17\3\24\0\3\3\10\0"+
    "\31\3\1\u0174\1\3\24\0\3\3\10\0\1\u0175\32\3"+
    "\24\0\3\3\10\0\20\3\1\u0176\12\3\24\0\3\3"+
    "\10\0\7\3\1\u0177\23\3\24\0\3\3\10\0\4\3"+
    "\1\73\26\3\24\0\3\3\10\0\1\u0178\10\3\1\u0179"+
    "\21\3\24\0\3\3\10\0\11\3\1\u017a\21\3\24\0"+
    "\3\3\10\0\4\3\1\u017b\26\3\24\0\3\3\10\0"+
    "\3\3\1\u017c\1\u017d\1\u017e\25\3\24\0\3\3\10\0"+
    "\5\3\1\u017f\25\3\24\0\3\3\10\0\1\3\1\u0180"+
    "\4\3\1\u0181\24\3\24\0\3\3\10\0\6\3\1\u0182"+
    "\24\3\24\0\3\3\10\0\1\u0151\32\3\24\0\3\3"+
    "\10\0\5\3\1\u0183\1\3\1\u0184\23\3\24\0\3\3"+
    "\10\0\2\3\1\u0185\30\3\24\0\3\3\10\0\17\3"+
    "\1\u0186\13\3\24\0\3\3\10\0\17\3\1\u0187\13\3"+
    "\24\0\3\3\10\0\5\3\1\u0158\25\3\24\0\3\3"+
    "\10\0\2\3\1\u0188\14\3\1\u0189\13\3\24\0\3\3"+
    "\10\0\4\3\1\u018a\26\3\24\0\3\3\10\0\17\3"+
    "\1\u018b\13\3\24\0\3\3\10\0\23\3\1\u018c\7\3"+
    "\24\0\3\3\10\0\7\3\1\u018d\23\3\24\0\3\3"+
    "\10\0\6\3\1\74\24\3\24\0\3\271\10\0\33\271"+
    "\1\0\1\u018e\24\0\1\u018f\42\0\1\u018f\76\0\1\u0190"+
    "\16\0\5\306\2\307\1\306\1\u0191\1\306\1\307\57\306"+
    "\10\307\1\u0191\70\307\1\u0192\1\u0191\61\307\6\0\1\5"+
    "\64\0\3\3\10\0\2\3\1\u0193\30\3\24\0\3\3"+
    "\10\0\11\3\1\u0194\21\3\24\0\3\3\10\0\17\3"+
    "\1\u0195\13\3\24\0\3\3\10\0\15\3\1\u0196\15\3"+
    "\24\0\3\3\10\0\11\3\1\u0197\21\3\24\0\3\3"+
    "\10\0\2\3\1\u0198\30\3\24\0\3\3\10\0\1\u0199"+
    "\1\3\1\u019a\30\3\24\0\3\3\10\0\7\3\1\u019b"+
    "\23\3\24\0\3\3\10\0\23\3\1\73\7\3\24\0"+
    "\3\3\10\0\1\u019c\1\3\1\u019d\30\3\24\0\3\3"+
    "\10\0\7\3\1\u019e\7\3\1\u019f\13\3\24\0\3\3"+
    "\10\0\1\u01a0\1\3\1\u01a1\30\3\24\0\3\3\10\0"+
    "\12\3\1\u01a2\20\3\24\0\3\3\10\0\10\3\1\u01a3"+
    "\22\3\24\0\3\3\10\0\16\3\1\u01a4\14\3\24\0"+
    "\3\3\10\0\1\u01a5\32\3\24\0\3\3\10\0\10\3"+
    "\1\73\22\3\24\0\3\3\10\0\12\3\1\73\20\3"+
    "\24\0\3\3\10\0\21\3\1\u01a6\11\3\24\0\3\3"+
    "\10\0\1\u01a7\3\3\1\u01a8\5\3\1\u01a9\15\3\1\73"+
    "\2\3\24\0\3\3\10\0\1\u01aa\32\3\24\0\3\3"+
    "\10\0\12\3\1\u01ab\20\3\24\0\3\3\10\0\2\3"+
    "\1\u01ac\2\3\1\u01ad\25\3\24\0\3\3\10\0\2\3"+
    "\1\u01ae\30\3\24\0\3\3\10\0\4\3\1\73\13\3"+
    "\1\u01af\12\3\24\0\3\3\10\0\7\3\1\u01b0\23\3"+
    "\24\0\3\3\10\0\5\3\1\u01b1\25\3\24\0\3\3"+
    "\10\0\2\3\1\u01b2\30\3\24\0\3\3\10\0\1\u01b3"+
    "\32\3\24\0\3\3\10\0\7\3\1\u01b4\23\3\24\0"+
    "\3\3\10\0\4\3\1\u01b5\26\3\24\0\3\3\10\0"+
    "\10\3\1\u01b6\22\3\24\0\3\3\10\0\6\3\1\u01b7"+
    "\10\3\1\u01b8\13\3\24\0\3\3\10\0\2\3\1\73"+
    "\3\3\1\u01b9\24\3\24\0\3\3\10\0\21\3\1\u01ba"+
    "\1\73\10\3\24\0\1\3\1\u01bb\1\3\10\0\33\3"+
    "\24\0\3\3\10\0\6\3\1\u01bc\24\3\24\0\3\3"+
    "\10\0\2\3\1\u01bd\30\3\24\0\3\3\10\0\27\3"+
    "\1\u01be\3\3\24\0\3\3\10\0\2\3\1\u01bf\30\3"+
    "\24\0\3\3\10\0\20\3\1\u01c0\12\3\24\0\3\3"+
    "\10\0\1\3\1\u01c1\5\3\1\u01c2\23\3\24\0\3\3"+
    "\10\0\13\3\1\u01c3\17\3\24\0\3\3\10\0\1\u01c4"+
    "\32\3\24\0\3\3\10\0\7\3\1\u01c5\23\3\24\0"+
    "\3\3\10\0\11\3\1\u01c6\21\3\24\0\3\3\10\0"+
    "\2\3\1\u01c7\30\3\24\0\3\3\10\0\13\3\1\u01c8"+
    "\17\3\24\0\3\3\10\0\4\3\1\u01c9\26\3\24\0"+
    "\3\3\10\0\2\3\1\u01ca\6\3\1\u01cb\21\3\24\0"+
    "\3\3\10\0\7\3\1\u01cc\23\3\24\0\3\3\10\0"+
    "\12\3\1\u01cd\5\3\1\73\1\u01ce\11\3\24\0\3\3"+
    "\10\0\15\3\1\u01cf\15\3\24\0\3\3\10\0\13\3"+
    "\1\u01d0\3\3\1\u01d1\13\3\24\0\3\3\10\0\2\3"+
    "\1\u01d2\30\3\24\0\3\3\10\0\2\3\1\73\7\3"+
    "\1\u01d3\20\3\24\0\3\3\10\0\15\3\1\u01d4\15\3"+
    "\24\0\3\3\10\0\7\3\1\u01d5\23\3\24\0\3\3"+
    "\10\0\2\3\1\u01d6\30\3\24\0\3\3\10\0\5\3"+
    "\1\u01d7\25\3\24\0\3\3\10\0\21\3\1\u01d8\11\3"+
    "\24\0\3\3\10\0\4\3\1\u01d9\26\3\24\0\3\3"+
    "\10\0\1\3\1\u01da\31\3\24\0\3\3\10\0\4\3"+
    "\1\u01db\26\3\24\0\3\3\10\0\2\3\1\u018d\30\3"+
    "\24\0\3\3\10\0\1\3\1\73\31\3\24\0\3\3"+
    "\10\0\1\u01dc\32\3\24\0\3\3\10\0\17\3\1\u01dd"+
    "\13\3\24\0\3\3\10\0\2\3\1\u0151\30\3\24\0"+
    "\3\3\10\0\2\3\1\u01de\30\3\24\0\3\3\10\0"+
    "\17\3\1\u01df\13\3\24\0\3\3\10\0\2\3\1\u01e0"+
    "\30\3\24\0\3\3\10\0\4\3\1\u01e1\26\3\24\0"+
    "\3\3\10\0\20\3\1\u01e2\12\3\24\0\3\3\10\0"+
    "\12\3\1\u01e3\20\3\24\0\3\3\10\0\10\3\1\u01e4"+
    "\1\3\1\u01e5\5\3\1\u01e6\12\3\24\0\3\3\10\0"+
    "\12\3\1\u01e7\20\3\24\0\3\3\10\0\6\3\1\u01e8"+
    "\2\3\1\u0151\10\3\1\u01e9\1\3\1\u01ea\6\3\24\0"+
    "\3\3\10\0\6\3\1\73\24\3\24\0\3\3\10\0"+
    "\17\3\1\77\13\3\24\0\3\3\10\0\7\3\1\u01eb"+
    "\23\3\24\0\3\3\10\0\11\3\1\242\21\3\24\0"+
    "\3\3\10\0\2\3\1\u01ec\30\3\24\0\3\3\10\0"+
    "\6\3\1\u01ed\24\3\24\0\3\3\10\0\17\3\1\u01ee"+
    "\13\3\24\0\3\3\10\0\2\3\1\u01ef\30\3\24\0"+
    "\3\3\10\0\2\3\1\u01f0\5\3\1\u01f1\22\3\24\0"+
    "\3\3\10\0\20\3\1\u01f2\12\3\24\0\3\3\10\0"+
    "\5\3\1\u01f3\25\3\24\0\3\3\10\0\2\3\1\u01f4"+
    "\30\3\24\0\3\3\10\0\1\u01f5\32\3\24\0\3\3"+
    "\10\0\7\3\1\u01f6\23\3\24\0\3\3\10\0\2\3"+
    "\1\u01f7\1\3\1\73\5\3\1\u01f8\20\3\24\0\3\3"+
    "\10\0\1\u01f9\1\u01fa\31\3\24\0\3\3\10\0\20\3"+
    "\1\u01fb\12\3\24\0\3\3\10\0\20\3\1\74\12\3"+
    "\24\0\3\3\10\0\20\3\1\u01fc\12\3\24\0\3\3"+
    "\10\0\7\3\1\u01fd\23\3\24\0\3\3\10\0\5\3"+
    "\1\u01fe\25\3\24\0\3\3\10\0\4\3\1\u01ff\1\3"+
    "\1\u0200\11\3\1\u0201\3\3\1\u0202\6\3\24\0\3\3"+
    "\10\0\7\3\1\u0203\3\3\1\u0204\17\3\24\0\3\3"+
    "\10\0\6\3\1\u0205\24\3\24\0\3\3\10\0\10\3"+
    "\1\u0206\11\3\1\u0207\10\3\24\0\3\3\10\0\5\3"+
    "\1\u0208\12\3\1\u0209\12\3\24\0\3\3\10\0\5\3"+
    "\1\u020a\25\3\24\0\3\3\10\0\12\3\1\u020b\20\3"+
    "\24\0\3\3\10\0\11\3\1\u020c\21\3\24\0\3\3"+
    "\10\0\17\3\1\157\13\3\24\0\3\3\10\0\20\3"+
    "\1\u020d\12\3\24\0\3\3\10\0\11\3\1\u020e\15\3"+
    "\1\u020f\3\3\24\0\3\3\10\0\6\3\1\u0210\24\3"+
    "\24\0\3\3\10\0\1\u0211\32\3\24\0\3\3\10\0"+
    "\16\3\1\u0212\2\3\1\74\11\3\24\0\3\3\10\0"+
    "\5\3\1\u0213\25\3\24\0\3\3\10\0\6\3\1\u0214"+
    "\24\3\24\0\3\3\10\0\4\3\1\u0215\26\3\24\0"+
    "\3\3\10\0\12\3\1\u0216\20\3\24\0\3\3\10\0"+
    "\2\3\1\u0217\30\3\24\0\3\3\10\0\22\3\1\u0218"+
    "\10\3\24\0\3\3\10\0\1\u0219\32\3\24\0\3\3"+
    "\10\0\2\3\1\u021a\1\3\1\u021b\20\3\1\u021c\5\3"+
    "\24\0\3\3\10\0\6\3\1\u0112\24\3\24\0\3\3"+
    "\10\0\12\3\1\u021d\20\3\24\0\3\3\10\0\7\3"+
    "\1\u021e\23\3\24\0\3\3\10\0\20\3\1\u021f\12\3"+
    "\24\0\3\3\10\0\2\3\1\u0220\4\3\1\u0221\23\3"+
    "\24\0\3\3\10\0\17\3\1\u0222\13\3\24\0\3\3"+
    "\10\0\1\3\1\u0223\31\3\24\0\3\3\10\0\5\3"+
    "\1\73\25\3\24\0\3\3\10\0\30\3\1\u0224\2\3"+
    "\24\0\3\3\10\0\25\3\1\u0225\5\3\24\0\3\3"+
    "\10\0\17\3\1\u0226\13\3\24\0\3\3\10\0\1\u0158"+
    "\32\3\24\0\3\3\10\0\25\3\1\u0130\5\3\24\0"+
    "\3\3\10\0\15\3\1\73\15\3\24\0\3\3\10\0"+
    "\30\3\1\73\2\3\24\0\1\3\1\u0227\1\3\10\0"+
    "\33\3\24\0\3\3\10\0\6\3\1\u0228\24\3\24\0"+
    "\3\3\10\0\2\3\1\u0229\14\3\1\u022a\13\3\24\0"+
    "\3\3\10\0\2\3\1\u022b\6\3\1\u022c\21\3\24\0"+
    "\3\3\10\0\2\3\1\u022d\30\3\24\0\3\3\10\0"+
    "\17\3\1\u022e\13\3\24\0\3\3\10\0\13\3\1\u022f"+
    "\17\3\24\0\3\3\10\0\7\3\1\u0230\23\3\24\0"+
    "\3\3\10\0\4\3\1\u0231\26\3\24\0\3\3\10\0"+
    "\2\3\1\u0232\30\3\24\0\3\3\10\0\2\3\1\u0233"+
    "\30\3\24\0\3\3\10\0\7\3\1\u0234\23\3\24\0"+
    "\3\3\10\0\21\3\1\u0235\11\3\24\0\3\3\10\0"+
    "\2\3\1\u0236\30\3\24\0\3\3\10\0\2\3\1\u0237"+
    "\30\3\24\0\3\3\10\0\13\3\1\u0238\17\3\24\0"+
    "\3\3\10\0\2\3\1\u0239\11\3\1\u023a\16\3\24\0"+
    "\3\3\10\0\4\3\1\316\4\3\1\u014a\1\3\1\u023b"+
    "\17\3\24\0\3\3\10\0\20\3\1\u023c\12\3\24\0"+
    "\3\3\10\0\1\u023d\32\3\24\0\3\3\10\0\4\3"+
    "\1\u023e\26\3\24\0\3\3\10\0\12\3\1\74\20\3"+
    "\24\0\3\3\10\0\11\3\1\u023f\21\3\24\0\3\3"+
    "\10\0\2\3\1\u0240\30\3\24\0\3\3\10\0\20\3"+
    "\1\u0241\12\3\24\0\3\3\10\0\4\3\1\u0242\26\3"+
    "\24\0\3\3\10\0\2\3\1\u0243\30\3\24\0\3\3"+
    "\10\0\7\3\1\u0244\23\3\24\0\3\3\10\0\4\3"+
    "\1\u0245\26\3\24\0\3\3\10\0\2\3\1\u0246\7\3"+
    "\1\u0247\5\3\1\u0248\4\3\1\u0249\5\3\24\0\3\3"+
    "\10\0\6\3\1\242\24\3\24\0\3\3\10\0\13\3"+
    "\1\u024a\17\3\24\0\3\3\10\0\16\3\1\u024b\14\3"+
    "\24\0\3\3\10\0\11\3\1\73\21\3\24\0\3\3"+
    "\10\0\20\3\1\u024c\12\3\24\0\3\3\10\0\12\3"+
    "\1\u0157\20\3\24\0\3\3\10\0\30\3\1\u024d\2\3"+
    "\24\0\3\3\10\0\21\3\1\74\11\3\24\0\3\3"+
    "\10\0\13\3\1\135\3\3\1\u024e\13\3\24\0\3\3"+
    "\10\0\2\3\1\u024f\1\3\1\u0157\26\3\24\0\3\3"+
    "\10\0\13\3\1\u0250\17\3\24\0\3\3\10\0\12\3"+
    "\1\u0251\3\3\1\u0252\4\3\1\u0253\7\3\24\0\3\3"+
    "\10\0\13\3\1\u0254\17\3\24\0\3\3\10\0\25\3"+
    "\1\u0255\5\3\24\0\3\3\10\0\4\3\1\u0256\26\3"+
    "\24\0\3\3\10\0\4\3\1\u0257\26\3\24\0\3\3"+
    "\10\0\5\3\1\u0258\1\u0259\24\3\24\0\3\3\10\0"+
    "\7\3\1\u025a\23\3\24\0\3\3\10\0\15\3\1\u025b"+
    "\15\3\24\0\3\3\10\0\6\3\1\u025c\24\3\24\0"+
    "\3\3\10\0\20\3\1\u025d\12\3\24\0\3\3\10\0"+
    "\7\3\1\73\23\3\26\0\1\u018f\42\0\1\u018f\3\0"+
    "\1\u025e\22\0\1\u025f\42\0\1\u025f\23\0\7\307\1\5"+
    "\1\u0191\61\307\1\0\3\3\10\0\5\3\1\u0260\25\3"+
    "\24\0\3\3\10\0\12\3\1\u0261\12\3\1\u0262\5\3"+
    "\24\0\3\3\10\0\11\3\1\u011f\21\3\24\0\3\3"+
    "\10\0\11\3\1\u0263\21\3\24\0\3\3\10\0\7\3"+
    "\1\u0206\23\3\24\0\3\3\10\0\5\3\1\77\25\3"+
    "\24\0\3\3\10\0\16\3\1\u0264\14\3\24\0\3\3"+
    "\10\0\4\3\1\u0265\26\3\24\0\3\3\10\0\7\3"+
    "\1\u0266\23\3\24\0\3\3\10\0\23\3\1\u0267\7\3"+
    "\24\0\3\3\10\0\4\3\1\u0268\26\3\24\0\3\3"+
    "\10\0\1\u0269\32\3\24\0\3\3\10\0\22\3\1\u026a"+
    "\10\3\24\0\3\3\10\0\13\3\1\u026b\17\3\24\0"+
    "\3\3\10\0\5\3\1\u026c\25\3\24\0\3\3\10\0"+
    "\5\3\1\u026d\25\3\24\0\3\3\10\0\7\3\1\u026e"+
    "\23\3\24\0\3\3\10\0\17\3\1\u011f\13\3\24\0"+
    "\3\3\10\0\6\3\1\u026f\24\3\24\0\3\3\10\0"+
    "\16\3\1\u0270\14\3\24\0\3\3\10\0\5\3\1\u0271"+
    "\11\3\1\u0272\13\3\24\0\3\3\10\0\11\3\1\u0273"+
    "\21\3\24\0\3\3\10\0\22\3\1\u0274\10\3\24\0"+
    "\3\3\10\0\13\3\1\u0275\17\3\24\0\3\3\10\0"+
    "\5\3\1\u0276\25\3\24\0\3\3\10\0\1\u0277\32\3"+
    "\24\0\3\3\10\0\10\3\1\u0278\22\3\24\0\3\3"+
    "\10\0\4\3\1\u0279\26\3\24\0\3\3\10\0\24\3"+
    "\1\u018d\6\3\24\0\3\3\10\0\23\3\1\u027a\7\3"+
    "\24\0\3\3\10\0\10\3\1\74\22\3\24\0\3\3"+
    "\10\0\2\3\1\u027b\30\3\24\0\3\3\10\0\20\3"+
    "\1\u027c\12\3\24\0\3\3\10\0\11\3\1\u027d\21\3"+
    "\24\0\3\3\10\0\20\3\1\u027e\12\3\24\0\3\3"+
    "\10\0\7\3\1\u01da\23\3\24\0\3\3\10\0\12\3"+
    "\1\u027f\20\3\24\0\3\3\10\0\21\3\1\u0115\11\3"+
    "\24\0\3\3\10\0\12\3\1\u0280\20\3\24\0\3\3"+
    "\10\0\20\3\1\u0281\10\3\1\u0282\1\3\24\0\3\3"+
    "\10\0\13\3\1\u0283\17\3\24\0\1\3\1\u0284\1\3"+
    "\10\0\33\3\24\0\3\3\10\0\2\3\1\u0285\30\3"+
    "\24\0\3\3\10\0\4\3\1\u0286\4\3\1\u0287\21\3"+
    "\24\0\3\3\10\0\5\3\1\u0288\25\3\24\0\3\3"+
    "\10\0\4\3\1\u0289\26\3\24\0\3\3\10\0\17\3"+
    "\1\u028a\13\3\24\0\3\3\10\0\6\3\1\u028b\13\3"+
    "\1\u028c\10\3\24\0\3\3\10\0\5\3\1\u028d\25\3"+
    "\24\0\3\3\10\0\17\3\1\u028e\13\3\24\0\3\3"+
    "\10\0\5\3\1\u028f\3\3\1\u0290\21\3\24\0\3\3"+
    "\10\0\5\3\1\242\25\3\24\0\3\3\10\0\30\3"+
    "\1\74\2\3\24\0\3\3\10\0\16\3\1\u0291\14\3"+
    "\24\0\3\3\10\0\11\3\1\u0292\21\3\24\0\3\3"+
    "\10\0\13\3\1\u0293\17\3\24\0\3\3\10\0\4\3"+
    "\1\u0294\26\3\24\0\3\3\10\0\5\3\1\u0283\25\3"+
    "\24\0\3\3\10\0\11\3\1\u0295\21\3\24\0\3\3"+
    "\10\0\20\3\1\u0296\12\3\24\0\3\3\10\0\7\3"+
    "\1\u0297\23\3\24\0\3\3\10\0\2\3\1\u0298\30\3"+
    "\24\0\3\3\10\0\17\3\1\u0299\1\u029a\12\3\24\0"+
    "\3\3\10\0\5\3\1\u029b\25\3\24\0\3\3\10\0"+
    "\12\3\1\u029c\20\3\24\0\3\3\10\0\13\3\1\u029d"+
    "\17\3\24\0\3\3\10\0\17\3\1\u0143\13\3\24\0"+
    "\3\3\10\0\7\3\1\u029e\23\3\24\0\3\3\10\0"+
    "\6\3\1\u029f\24\3\24\0\3\3\10\0\6\3\1\u017b"+
    "\24\3\24\0\3\3\10\0\4\3\1\u02a0\26\3\24\0"+
    "\3\3\10\0\17\3\1\u02a1\13\3\24\0\3\3\10\0"+
    "\25\3\1\u02a2\5\3\24\0\3\3\10\0\2\3\1\u02a3"+
    "\30\3\24\0\3\3\10\0\1\u0290\32\3\24\0\3\3"+
    "\10\0\17\3\1\u02a4\13\3\24\0\3\3\10\0\2\3"+
    "\1\u02a5\30\3\24\0\3\3\10\0\2\3\1\u02a6\30\3"+
    "\24\0\3\3\10\0\4\3\1\u02a7\26\3\24\0\3\3"+
    "\10\0\1\u02a8\32\3\24\0\3\3\10\0\17\3\1\u02a9"+
    "\13\3\24\0\3\3\10\0\17\3\1\u02aa\13\3\24\0"+
    "\3\3\10\0\5\3\1\u02ab\25\3\24\0\3\3\10\0"+
    "\1\3\1\u02ac\1\3\1\u02ad\1\3\1\u02ae\21\3\1\u02af"+
    "\3\3\24\0\3\3\10\0\11\3\1\u011f\10\3\1\u02b0"+
    "\10\3\24\0\3\3\10\0\4\3\1\u02b1\26\3\24\0"+
    "\3\3\10\0\5\3\1\u02b2\25\3\24\0\3\3\10\0"+
    "\13\3\1\u02b3\17\3\24\0\3\3\10\0\2\3\1\u02b4"+
    "\30\3\24\0\3\3\10\0\7\3\1\u02b5\23\3\24\0"+
    "\3\3\10\0\5\3\1\u02b6\25\3\24\0\3\3\10\0"+
    "\7\3\1\u02b7\23\3\24\0\3\3\10\0\2\3\1\u02b8"+
    "\30\3\24\0\3\3\10\0\1\u02b9\32\3\24\0\3\3"+
    "\10\0\4\3\1\u02ba\26\3\24\0\3\3\10\0\2\3"+
    "\1\u02bb\30\3\24\0\3\3\10\0\20\3\1\73\12\3"+
    "\24\0\3\3\10\0\4\3\1\u02bc\26\3\24\0\3\3"+
    "\10\0\2\3\1\u02bd\30\3\24\0\3\3\10\0\2\3"+
    "\1\u02be\30\3\24\0\3\3\10\0\1\u02bf\16\3\1\u02c0"+
    "\13\3\24\0\3\3\10\0\2\3\1\u02c1\30\3\24\0"+
    "\3\3\10\0\4\3\1\u02c2\26\3\24\0\3\3\10\0"+
    "\2\3\1\u01ca\30\3\24\0\3\3\10\0\1\u02c3\32\3"+
    "\24\0\3\3\10\0\22\3\1\u02c4\10\3\24\0\3\3"+
    "\10\0\4\3\1\u02c5\26\3\24\0\3\3\10\0\17\3"+
    "\1\u02c6\13\3\24\0\3\3\10\0\2\3\1\u02c7\30\3"+
    "\24\0\3\3\10\0\11\3\1\u02c8\21\3\24\0\1\3"+
    "\1\u0227\1\3\10\0\1\u02c9\32\3\24\0\3\3\10\0"+
    "\30\3\1\u02ca\2\3\24\0\3\3\10\0\12\3\1\u02cb"+
    "\20\3\24\0\3\3\10\0\1\u02cc\32\3\24\0\3\3"+
    "\10\0\6\3\1\u02cd\24\3\24\0\3\3\10\0\13\3"+
    "\1\u02ce\17\3\24\0\3\3\10\0\11\3\1\u02cf\21\3"+
    "\24\0\3\3\10\0\4\3\1\u02d0\26\3\24\0\3\3"+
    "\10\0\7\3\1\u02d1\23\3\24\0\3\3\10\0\21\3"+
    "\1\73\11\3\24\0\1\3\1\u02d2\1\3\10\0\33\3"+
    "\24\0\3\3\10\0\15\3\1\u02d3\15\3\24\0\3\3"+
    "\10\0\4\3\1\u02d4\26\3\24\0\3\3\10\0\4\3"+
    "\1\u02d5\26\3\24\0\3\3\10\0\17\3\1\u02d6\13\3"+
    "\24\0\3\3\10\0\5\3\1\154\25\3\24\0\3\3"+
    "\10\0\1\u02d7\32\3\24\0\3\3\10\0\4\3\1\u02d8"+
    "\26\3\24\0\3\3\10\0\4\3\1\u02d9\26\3\24\0"+
    "\3\3\10\0\6\3\1\u02da\11\3\1\u02db\1\u02dc\11\3"+
    "\24\0\3\3\10\0\14\3\1\u02dd\16\3\24\0\3\3"+
    "\10\0\6\3\1\u02de\24\3\24\0\3\3\10\0\7\3"+
    "\1\u02df\23\3\24\0\3\3\10\0\13\3\1\336\17\3"+
    "\24\0\3\3\10\0\2\3\1\u02e0\30\3\24\0\3\3"+
    "\10\0\6\3\1\u02e1\24\3\24\0\3\3\10\0\7\3"+
    "\1\u02e2\23\3\24\0\3\3\10\0\4\3\1\u02e3\26\3"+
    "\24\0\3\3\10\0\3\3\1\u02e4\27\3\24\0\3\3"+
    "\10\0\12\3\1\u02e5\20\3\24\0\3\3\10\0\5\3"+
    "\1\u02e6\13\3\1\u0115\11\3\24\0\3\3\10\0\5\3"+
    "\1\u02e7\25\3\24\0\3\3\10\0\6\3\1\u02e8\24\3"+
    "\24\0\3\3\10\0\4\3\1\u02e9\26\3\24\0\3\3"+
    "\10\0\13\3\1\u02ea\17\3\24\0\3\3\10\0\17\3"+
    "\1\u02eb\13\3\24\0\3\3\10\0\5\3\1\u02ec\1\u02ed"+
    "\24\3\24\0\3\3\10\0\1\3\1\u02ee\31\3\24\0"+
    "\3\3\10\0\1\77\32\3\24\0\3\3\10\0\2\3"+
    "\1\u02ef\30\3\24\0\3\3\10\0\1\3\1\u02f0\31\3"+
    "\24\0\3\3\10\0\20\3\1\u0115\12\3\24\0\3\3"+
    "\10\0\12\3\1\u02f1\20\3\24\0\3\3\10\0\5\3"+
    "\1\u02f2\25\3\24\0\3\3\10\0\17\3\1\u02f3\13\3"+
    "\24\0\3\3\10\0\6\3\1\u02f4\24\3\24\0\3\3"+
    "\10\0\17\3\1\u02f5\13\3\24\0\3\3\10\0\7\3"+
    "\1\u02f6\23\3\24\0\3\3\10\0\22\3\1\u02f7\10\3"+
    "\24\0\3\3\10\0\4\3\1\u02f8\26\3\24\0\3\3"+
    "\10\0\1\3\1\u0210\31\3\24\0\3\3\10\0\7\3"+
    "\1\u02f9\23\3\24\0\3\3\10\0\2\3\1\u02fa\30\3"+
    "\24\0\3\3\10\0\5\3\1\u02fb\25\3\24\0\3\3"+
    "\10\0\1\73\10\3\1\u02fc\21\3\24\0\3\3\10\0"+
    "\4\3\1\u0261\26\3\24\0\3\3\10\0\1\u02fd\32\3"+
    "\24\0\3\3\10\0\10\3\1\u02fe\22\3\24\0\3\3"+
    "\10\0\1\u02ff\32\3\24\0\3\3\10\0\17\3\1\u0300"+
    "\13\3\24\0\3\3\10\0\14\3\1\u0301\16\3\24\0"+
    "\3\3\10\0\23\3\1\u0302\7\3\24\0\3\3\10\0"+
    "\4\3\1\74\26\3\24\0\3\3\10\0\15\3\1\u0303"+
    "\15\3\24\0\3\3\10\0\17\3\1\u0304\13\3\24\0"+
    "\3\3\10\0\17\3\1\u0305\13\3\24\0\3\3\10\0"+
    "\2\3\1\u0306\30\3\24\0\3\3\10\0\14\3\1\u0307"+
    "\16\3\24\0\3\3\10\0\2\3\1\u0308\30\3\24\0"+
    "\3\3\10\0\2\3\1\u0309\30\3\24\0\3\3\10\0"+
    "\2\3\1\u030a\30\3\24\0\3\3\10\0\2\3\1\u030b"+
    "\30\3\24\0\3\3\10\0\17\3\1\u030c\13\3\24\0"+
    "\3\3\10\0\2\3\1\u030d\30\3\24\0\3\3\10\0"+
    "\1\u0250\32\3\24\0\1\3\1\u030e\1\3\10\0\33\3"+
    "\24\0\3\3\10\0\5\3\1\u030f\25\3\24\0\3\3"+
    "\10\0\1\u0310\32\3\24\0\3\3\10\0\17\3\1\u0311"+
    "\13\3\24\0\3\3\10\0\11\3\1\u0312\21\3\24\0"+
    "\3\3\10\0\2\3\1\u0313\30\3\24\0\3\3\10\0"+
    "\2\3\1\u0314\30\3\24\0\3\3\10\0\5\3\1\u0315"+
    "\25\3\24\0\3\3\10\0\1\u0316\32\3\24\0\3\3"+
    "\10\0\7\3\1\u0317\23\3\24\0\3\3\10\0\5\3"+
    "\1\u0318\25\3\24\0\3\3\10\0\17\3\1\u0319\13\3"+
    "\24\0\3\3\10\0\2\3\1\u031a\30\3\24\0\3\3"+
    "\10\0\11\3\1\u031b\21\3\24\0\3\3\10\0\7\3"+
    "\1\u031c\23\3\24\0\3\3\10\0\17\3\1\u031d\13\3"+
    "\24\0\3\3\10\0\6\3\1\u031e\24\3\24\0\3\3"+
    "\10\0\6\3\1\u031f\24\3\24\0\3\3\10\0\17\3"+
    "\1\u0320\13\3\24\0\3\3\10\0\4\3\1\u0321\26\3"+
    "\24\0\3\3\10\0\6\3\1\u0322\24\3\24\0\3\3"+
    "\10\0\12\3\1\242\20\3\24\0\3\3\10\0\4\3"+
    "\1\u0323\26\3\24\0\3\3\10\0\20\3\1\u0324\12\3"+
    "\24\0\3\3\10\0\10\3\1\u0325\22\3\24\0\3\3"+
    "\10\0\20\3\1\u0326\12\3\24\0\3\3\10\0\17\3"+
    "\1\u0327\13\3\24\0\3\3\10\0\5\3\1\u0328\25\3"+
    "\24\0\3\3\10\0\1\u0329\6\3\1\u032a\23\3\24\0"+
    "\3\3\10\0\1\u032b\32\3\24\0\3\3\10\0\11\3"+
    "\1\u032c\21\3\24\0\3\3\10\0\4\3\1\u032d\26\3"+
    "\24\0\3\3\10\0\11\3\1\u032e\21\3\24\0\3\3"+
    "\10\0\1\u018d\32\3\24\0\3\3\10\0\25\3\1\u032f"+
    "\5\3\24\0\3\3\10\0\5\3\1\u0330\25\3\24\0"+
    "\3\3\10\0\2\3\1\140\30\3\24\0\3\3\10\0"+
    "\6\3\1\u0331\24\3\24\0\3\3\10\0\6\3\1\u0332"+
    "\24\3\24\0\3\3\10\0\17\3\1\u0333\13\3\24\0"+
    "\3\3\10\0\12\3\1\u0334\20\3\24\0\3\3\10\0"+
    "\14\3\1\u0335\16\3\24\0\3\3\10\0\10\3\1\u0336"+
    "\22\3\24\0\3\3\10\0\2\3\1\u0337\30\3\24\0"+
    "\3\3\10\0\7\3\1\u0338\23\3\24\0\3\3\10\0"+
    "\17\3\1\u0277\13\3\24\0\3\3\10\0\5\3\1\74"+
    "\25\3\24\0\3\3\10\0\1\u0339\32\3\24\0\3\3"+
    "\10\0\13\3\1\u033a\17\3\24\0\3\3\10\0\17\3"+
    "\1\u033b\13\3\24\0\3\3\10\0\6\3\1\u0283\24\3"+
    "\24\0\3\3\10\0\13\3\1\u033c\17\3\24\0\3\3"+
    "\10\0\12\3\1\u0158\20\3\24\0\3\3\10\0\14\3"+
    "\1\73\16\3\24\0\3\3\10\0\17\3\1\u033d\13\3"+
    "\24\0\3\3\10\0\15\3\1\u033e\15\3\24\0\3\3"+
    "\10\0\1\u017f\32\3\24\0\3\3\10\0\1\u018d\3\3"+
    "\1\u033f\26\3\24\0\3\3\10\0\11\3\1\u0340\21\3"+
    "\24\0\3\3\10\0\6\3\1\u0341\24\3\24\0\3\3"+
    "\10\0\20\3\1\u0342\12\3\24\0\3\3\10\0\5\3"+
    "\1\u0333\25\3\24\0\3\3\10\0\1\3\1\u0343\31\3"+
    "\24\0\3\3\10\0\5\3\1\u0344\25\3\24\0\3\3"+
    "\10\0\7\3\1\u0345\23\3\24\0\3\3\10\0\12\3"+
    "\1\u0346\20\3\24\0\3\3\10\0\1\u0347\32\3\24\0"+
    "\3\3\10\0\22\3\1\u018d\10\3\24\0\3\3\10\0"+
    "\11\3\1\u0348\21\3\24\0\3\3\10\0\13\3\1\u0349"+
    "\17\3\24\0\3\3\10\0\17\3\1\u034a\13\3\24\0"+
    "\3\3\10\0\4\3\1\u034b\26\3\24\0\3\3\10\0"+
    "\4\3\1\u01fb\26\3\24\0\3\3\10\0\1\u034c\32\3"+
    "\24\0\3\3\10\0\11\3\1\u0214\21\3\24\0\3\3"+
    "\10\0\1\3\1\u034d\3\3\1\u034e\25\3\24\0\3\3"+
    "\10\0\1\3\1\u034f\31\3\24\0\3\3\10\0\2\3"+
    "\1\u0350\30\3\24\0\3\3\10\0\6\3\1\u0351\24\3"+
    "\24\0\3\3\10\0\2\3\1\u0352\30\3\24\0\3\3"+
    "\10\0\20\3\1\u016e\12\3\24\0\3\3\10\0\20\3"+
    "\1\u0353\12\3\24\0\3\3\10\0\17\3\1\u0354\13\3"+
    "\24\0\3\3\10\0\6\3\1\u0355\24\3\24\0\3\3"+
    "\10\0\12\3\1\u0278\20\3\24\0\3\3\10\0\5\3"+
    "\1\u0356\25\3\24\0\3\3\10\0\4\3\1\u0357\26\3"+
    "\24\0\3\3\10\0\6\3\1\u0358\24\3\24\0\3\3"+
    "\10\0\4\3\1\u0359\26\3\24\0\3\3\10\0\6\3"+
    "\1\u035a\24\3\24\0\3\3\10\0\5\3\1\u035b\25\3"+
    "\24\0\3\3\10\0\12\3\1\u035c\20\3\24\0\3\3"+
    "\10\0\10\3\1\u035d\22\3\24\0\3\3\10\0\30\3"+
    "\1\u035e\2\3\24\0\3\3\10\0\16\3\1\u035f\14\3"+
    "\24\0\3\3\10\0\2\3\1\u0360\30\3\24\0\3\3"+
    "\10\0\25\3\1\u011f\5\3\24\0\3\3\10\0\2\3"+
    "\1\u0361\30\3\24\0\3\3\10\0\2\3\1\u0362\30\3"+
    "\24\0\3\3\10\0\14\3\1\u0363\16\3\24\0\3\3"+
    "\10\0\2\3\1\u0364\30\3\24\0\3\3\10\0\21\3"+
    "\1\u0365\11\3\24\0\3\3\10\0\5\3\1\u0366\25\3"+
    "\24\0\3\3\10\0\17\3\1\u0367\13\3\24\0\3\3"+
    "\10\0\1\u0368\32\3\24\0\3\3\10\0\5\3\1\u0369"+
    "\25\3\24\0\3\3\10\0\1\u036a\32\3\24\0\3\3"+
    "\10\0\21\3\1\u036b\11\3\24\0\3\3\10\0\11\3"+
    "\1\u0298\21\3\24\0\3\3\10\0\2\3\1\u036c\30\3"+
    "\24\0\3\3\10\0\2\3\1\u036d\30\3\24\0\3\3"+
    "\10\0\17\3\1\u036e\13\3\24\0\3\3\10\0\1\u036f"+
    "\32\3\24\0\3\3\10\0\20\3\1\u0370\3\3\1\u0283"+
    "\6\3\24\0\3\3\10\0\2\3\1\u0371\30\3\24\0"+
    "\3\3\10\0\1\3\1\u0372\31\3\24\0\3\3\10\0"+
    "\1\u0373\32\3\24\0\3\3\10\0\4\3\1\u0374\26\3"+
    "\24\0\3\3\10\0\20\3\1\u0375\12\3\24\0\3\3"+
    "\10\0\17\3\1\u0376\13\3\24\0\3\3\10\0\17\3"+
    "\1\u0261\13\3\24\0\3\3\10\0\4\3\1\u0377\26\3"+
    "\24\0\3\3\10\0\17\3\1\u0378\13\3\24\0\3\3"+
    "\10\0\11\3\1\u0379\21\3\24\0\3\3\10\0\4\3"+
    "\1\u037a\26\3\24\0\3\3\10\0\12\3\1\u037b\5\3"+
    "\1\u037c\12\3\24\0\3\3\10\0\7\3\1\u037d\23\3"+
    "\24\0\3\3\10\0\1\u037e\32\3\24\0\3\3\10\0"+
    "\5\3\1\u01da\25\3\24\0\3\3\10\0\1\3\1\u037f"+
    "\15\3\1\u0178\13\3\24\0\3\3\10\0\22\3\1\u0380"+
    "\10\3\24\0\3\3\10\0\5\3\1\u0307\25\3\24\0"+
    "\3\3\10\0\1\3\1\74\31\3\24\0\3\3\10\0"+
    "\5\3\1\u0381\25\3\24\0\3\3\10\0\7\3\1\u0382"+
    "\23\3\24\0\3\3\10\0\31\3\1\u0383\1\3\24\0"+
    "\3\3\10\0\23\3\1\u0384\7\3\24\0\3\3\10\0"+
    "\1\u0385\32\3\24\0\3\3\10\0\6\3\1\u0386\24\3"+
    "\24\0\3\3\10\0\6\3\1\u0387\24\3\24\0\3\3"+
    "\10\0\20\3\1\u0388\12\3\24\0\3\3\10\0\11\3"+
    "\1\u0151\21\3\24\0\3\3\10\0\4\3\1\u0286\26\3"+
    "\24\0\3\3\10\0\24\3\1\u0115\6\3\24\0\3\3"+
    "\10\0\6\3\1\u0389\24\3\24\0\3\3\10\0\4\3"+
    "\1\u038a\26\3\24\0\3\3\10\0\2\3\1\u038b\30\3"+
    "\24\0\3\3\10\0\17\3\1\u038c\13\3\24\0\3\3"+
    "\10\0\20\3\1\u038d\12\3\24\0\3\3\10\0\22\3"+
    "\1\u038e\10\3\24\0\3\3\10\0\12\3\1\u0261\20\3"+
    "\24\0\3\3\10\0\1\3\1\u038f\31\3\24\0\3\3"+
    "\10\0\2\3\1\u0390\30\3\24\0\3\3\10\0\7\3"+
    "\1\u0391\23\3\24\0\3\3\10\0\4\3\1\u0392\26\3"+
    "\24\0\3\3\10\0\1\u0393\1\3\1\u0112\30\3\24\0"+
    "\3\3\10\0\10\3\1\u036f\5\3\1\74\14\3\24\0"+
    "\3\3\10\0\20\3\1\u037c\12\3\24\0\3\3\10\0"+
    "\2\3\1\u0394\30\3\24\0\3\3\10\0\16\3\1\u0395"+
    "\14\3\24\0\3\3\10\0\12\3\1\u0396\20\3\24\0"+
    "\3\3\10\0\6\3\1\u0370\24\3\24\0\3\3\10\0"+
    "\12\3\1\u038a\20\3\24\0\3\3\10\0\2\3\1\u0397"+
    "\30\3\24\0\3\3\10\0\1\u0398\32\3\24\0\3\3"+
    "\10\0\4\3\1\u0399\26\3\24\0\3\3\10\0\1\u039a"+
    "\32\3\24\0\3\3\10\0\31\3\1\74\1\3\24\0"+
    "\3\3\10\0\1\u039b\32\3\24\0\3\3\10\0\12\3"+
    "\1\u039c\20\3\24\0\3\3\10\0\1\u039d\32\3\24\0"+
    "\3\3\10\0\4\3\1\u039e\26\3\24\0\3\3\10\0"+
    "\6\3\1\u039f\24\3\24\0\3\3\10\0\1\u03a0\32\3"+
    "\24\0\3\3\10\0\6\3\1\u03a1\24\3\24\0\3\3"+
    "\10\0\1\u03a2\32\3\24\0\3\3\10\0\5\3\1\u03a3"+
    "\25\3\24\0\3\3\10\0\7\3\1\u03a4\23\3\24\0"+
    "\3\3\10\0\20\3\1\u03a5\12\3\24\0\3\3\10\0"+
    "\24\3\1\74\6\3\24\0\3\3\10\0\1\u03a6\32\3"+
    "\24\0\3\3\10\0\17\3\1\u03a7\13\3\24\0\3\3"+
    "\10\0\17\3\1\u03a8\13\3\24\0\3\3\10\0\6\3"+
    "\1\u03a9\24\3\24\0\3\3\10\0\1\3\1\u03aa\31\3"+
    "\24\0\3\3\10\0\12\3\1\u03ab\20\3\24\0\3\3"+
    "\10\0\6\3\1\u03ac\24\3\24\0\3\3\10\0\1\3"+
    "\1\u03ad\31\3\24\0\3\3\10\0\20\3\1\u03ae\12\3"+
    "\24\0\3\3\10\0\12\3\1\u03af\20\3\24\0\3\3"+
    "\10\0\1\u03b0\32\3\24\0\3\3\10\0\17\3\1\u03b1"+
    "\13\3\24\0\3\3\10\0\5\3\1\u03b2\25\3\24\0"+
    "\3\3\10\0\4\3\1\u03b3\26\3\24\0\3\3\10\0"+
    "\17\3\1\u03b4\13\3\24\0\3\3\10\0\13\3\1\u03b5"+
    "\17\3\24\0\3\3\10\0\23\3\1\u03b6\7\3\24\0"+
    "\3\3\10\0\2\3\1\u03b7\30\3\24\0\3\3\10\0"+
    "\4\3\1\u03b8\26\3\24\0\3\3\10\0\25\3\1\u03b9"+
    "\5\3\24\0\3\3\10\0\2\3\1\u039b\30\3\24\0"+
    "\3\3\10\0\20\3\1\u03ba\12\3\24\0\3\3\10\0"+
    "\10\3\1\u01fb\22\3\24\0\3\3\10\0\2\3\1\u03bb"+
    "\30\3\24\0\3\3\10\0\4\3\1\u03bc\26\3\24\0"+
    "\3\3\10\0\5\3\1\u03bd\25\3\24\0\3\3\10\0"+
    "\10\3\1\u03be\22\3\24\0\3\3\10\0\6\3\1\u03bf"+
    "\24\3\24\0\3\3\10\0\13\3\1\74\17\3\24\0"+
    "\3\3\10\0\1\u03c0\32\3\24\0\3\3\10\0\2\3"+
    "\1\u03c1\14\3\1\u0195\13\3\24\0\3\3\10\0\4\3"+
    "\1\u03c2\26\3\24\0\3\3\10\0\4\3\1\u03c3\26\3"+
    "\24\0\3\3\10\0\11\3\1\u03c4\21\3\24\0\3\3"+
    "\10\0\7\3\1\u03c5\23\3\24\0\3\3\10\0\11\3"+
    "\1\u03c6\21\3\24\0\3\3\10\0\3\3\1\u03c7\27\3"+
    "\24\0\3\3\10\0\6\3\1\u03c8\24\3\24\0\3\3"+
    "\10\0\1\3\1\u03c9\31\3\24\0\3\3\10\0\11\3"+
    "\1\u03ca\21\3\24\0\3\3\10\0\22\3\1\u03cb\10\3"+
    "\24\0\3\3\10\0\11\3\1\u03cc\21\3\24\0\3\3"+
    "\10\0\12\3\1\u036f\20\3\24\0\3\3\10\0\6\3"+
    "\1\u03cd\24\3\24\0\3\3\10\0\6\3\1\u03ce\24\3"+
    "\24\0\3\3\10\0\4\3\1\u03cf\26\3\24\0\3\3"+
    "\10\0\4\3\1\u0307\26\3\24\0\3\3\10\0\2\3"+
    "\1\u0277\30\3\24\0\3\3\10\0\2\3\1\u03d0\30\3"+
    "\24\0\3\3\10\0\7\3\1\u03d1\23\3\24\0\3\3"+
    "\10\0\17\3\1\u03d2\13\3\24\0\3\3\10\0\1\u03d3"+
    "\32\3\24\0\3\3\10\0\4\3\1\u03d4\26\3\24\0"+
    "\3\3\10\0\6\3\1\u03d5\24\3\24\0\3\3\10\0"+
    "\17\3\1\u03d6\13\3\24\0\3\3\10\0\4\3\1\u03d7"+
    "\26\3\24\0\1\3\1\u03d8\1\3\10\0\33\3\24\0"+
    "\3\3\10\0\16\3\1\u03d9\14\3\24\0\3\3\10\0"+
    "\1\u03da\32\3\24\0\1\3\1\u03db\1\3\10\0\33\3"+
    "\24\0\3\3\10\0\6\3\1\u01da\24\3\24\0\3\3"+
    "\10\0\2\3\1\u03dc\30\3\24\0\3\3\10\0\5\3"+
    "\1\u03dd\25\3\24\0\3\3\10\0\1\u03de\32\3\24\0"+
    "\3\3\10\0\21\3\1\u03df\11\3\24\0\3\3\10\0"+
    "\6\3\1\u03e0\24\3\24\0\3\3\10\0\31\3\1\u0234"+
    "\1\3\24\0\3\3\10\0\2\3\1\u03e1\30\3\24\0"+
    "\3\3\10\0\2\3\1\u03e2\30\3\24\0\1\3\1\u03e3"+
    "\1\3\10\0\33\3\24\0\1\3\1\u03e4\1\3\10\0"+
    "\33\3\24\0\3\3\10\0\16\3\1\135\14\3\24\0"+
    "\3\3\10\0\13\3\1\u03e5\17\3\24\0\3\3\10\0"+
    "\4\3\1\u03e6\26\3\24\0\1\3\1\u03e7\1\3\10\0"+
    "\33\3\24\0\3\3\10\0\7\3\1\u03e8\23\3\24\0"+
    "\3\3\10\0\17\3\1\u03e9\13\3\24\0\3\3\10\0"+
    "\22\3\1\u03ea\10\3\24\0\3\3\10\0\5\3\1\326"+
    "\25\3\24\0\3\3\10\0\4\3\1\u03eb\26\3\24\0"+
    "\3\3\10\0\4\3\1\u03ec\26\3\24\0\3\3\10\0"+
    "\2\3\1\u03ed\30\3\24\0\3\3\10\0\24\3\1\u0202"+
    "\6\3\24\0\3\3\10\0\22\3\1\u03ee\10\3\24\0"+
    "\3\3\10\0\2\3\1\u03ef\30\3\24\0\3\3\10\0"+
    "\5\3\1\u03f0\25\3\24\0\3\3\10\0\11\3\1\u03f1"+
    "\21\3\24\0\3\3\10\0\23\3\1\u03f2\7\3\24\0"+
    "\3\3\10\0\4\3\1\u03f3\26\3\24\0\3\3\10\0"+
    "\21\3\1\u03f4\11\3\24\0\3\3\10\0\7\3\1\u03f5"+
    "\23\3\24\0\3\3\10\0\12\3\1\u03f6\20\3\24\0"+
    "\3\3\10\0\30\3\1\u03f7\2\3\24\0\3\3\10\0"+
    "\4\3\1\u03f8\26\3\24\0\3\3\10\0\12\3\1\u03f9"+
    "\20\3\24\0\3\3\10\0\4\3\1\u03fa\26\3\24\0"+
    "\3\3\10\0\5\3\1\u03fb\25\3\24\0\3\3\10\0"+
    "\11\3\1\u03fc\21\3\24\0\3\3\10\0\1\3\1\u03fd"+
    "\31\3\24\0\3\3\10\0\11\3\1\u03fe\21\3\24\0"+
    "\3\3\10\0\5\3\1\u03ff\25\3\24\0\3\3\10\0"+
    "\21\3\1\u0400\11\3\24\0\3\3\10\0\1\u0401\32\3"+
    "\24\0\3\3\10\0\20\3\1\u0402\12\3\24\0\3\3"+
    "\10\0\4\3\1\u0403\26\3\24\0\3\3\10\0\17\3"+
    "\1\u0404\13\3\24\0\3\3\10\0\2\3\1\u0405\30\3"+
    "\24\0\3\3\10\0\11\3\1\u0406\21\3\24\0\3\3"+
    "\10\0\20\3\1\u0407\12\3\24\0\3\3\10\0\17\3"+
    "\1\u0408\13\3\24\0\1\3\1\u0409\1\3\10\0\33\3"+
    "\24\0\3\3\10\0\2\3\1\u040a\30\3\24\0\3\3"+
    "\10\0\17\3\1\u0178\13\3\24\0\3\3\10\0\2\3"+
    "\1\u040b\30\3\24\0\3\3\10\0\5\3\1\u040c\25\3"+
    "\24\0\3\3\10\0\4\3\1\u0407\26\3\24\0\1\3"+
    "\1\u040d\1\3\10\0\33\3\24\0\3\3\10\0\6\3"+
    "\1\u040e\24\3\24\0\3\3\10\0\2\3\1\u040f\30\3"+
    "\24\0\3\3\10\0\25\3\1\u0410\5\3\24\0\3\3"+
    "\10\0\21\3\1\215\11\3\24\0\3\3\10\0\23\3"+
    "\1\u0411\7\3\24\0\3\3\10\0\4\3\1\u0412\26\3"+
    "\24\0\3\3\10\0\4\3\1\u0413\26\3\24\0\3\3"+
    "\10\0\23\3\1\u0414\7\3\24\0\3\3\10\0\12\3"+
    "\1\u0415\20\3\24\0\3\3\10\0\17\3\1\u0416\13\3"+
    "\24\0\3\3\10\0\7\3\1\u0417\23\3\24\0\3\3"+
    "\10\0\17\3\1\u0418\13\3\24\0\3\3\10\0\4\3"+
    "\1\u0419\26\3\24\0\3\3\10\0\5\3\1\u041a\25\3"+
    "\24\0\3\3\10\0\12\3\1\u041b\20\3\24\0\3\3"+
    "\10\0\11\3\1\u041c\20\3\1\u041d\24\0\3\3\10\0"+
    "\1\3\1\u041e\31\3\24\0\3\3\10\0\20\3\1\u041f"+
    "\12\3\24\0\3\3\10\0\4\3\1\u0420\26\3\24\0"+
    "\3\3\10\0\1\u0421\32\3\24\0\3\3\10\0\11\3"+
    "\1\u0422\21\3\24\0\3\3\10\0\10\3\1\135\22\3"+
    "\24\0\3\3\10\0\17\3\1\u0423\13\3\24\0\3\3"+
    "\10\0\2\3\1\73\14\3\1\u0195\13\3\24\0\3\3"+
    "\10\0\10\3\1\u0424\22\3\24\0\1\3\1\u0425\1\3"+
    "\10\0\33\3\24\0\3\3\10\0\6\3\1\u0426\24\3"+
    "\24\0\3\3\10\0\5\3\1\u0427\25\3\24\0\3\3"+
    "\10\0\17\3\1\u0428\13\3\24\0\3\3\10\0\13\3"+
    "\1\u0290\17\3\24\0\3\3\10\0\2\3\1\u0429\30\3"+
    "\24\0\3\3\10\0\2\3\1\u042a\30\3\24\0\3\3"+
    "\10\0\11\3\1\u018d\21\3\24\0\3\3\10\0\2\3"+
    "\1\u042b\30\3\24\0\3\3\10\0\6\3\1\u042c\24\3"+
    "\24\0\3\3\10\0\6\3\1\u042d\24\3\24\0\3\3"+
    "\10\0\2\3\1\u042e\30\3\24\0\3\3\10\0\2\3"+
    "\1\u01fb\30\3\24\0\3\3\10\0\20\3\1\u042f\12\3"+
    "\24\0\3\3\10\0\2\3\1\242\30\3\24\0\3\3"+
    "\10\0\17\3\1\u0430\13\3\24\0\3\3\10\0\1\u0431"+
    "\32\3\24\0\3\3\10\0\1\3\1\u0432\31\3\24\0"+
    "\3\3\10\0\6\3\1\u010f\24\3\24\0\3\3\10\0"+
    "\4\3\1\u0433\26\3\24\0\3\3\10\0\6\3\1\u0434"+
    "\24\3\24\0\3\3\10\0\1\3\1\u0261\2\3\1\u0435"+
    "\6\3\1\u0238\17\3\24\0\3\3\10\0\5\3\1\u0436"+
    "\25\3\24\0\3\3\10\0\25\3\1\u0437\5\3\24\0"+
    "\3\3\10\0\11\3\1\u0438\21\3\24\0\3\3\10\0"+
    "\4\3\1\u0439\26\3\24\0\1\3\1\u043a\1\3\10\0"+
    "\12\3\1\u03f9\20\3\24\0\3\3\10\0\17\3\1\u043b"+
    "\13\3\24\0\3\3\10\0\2\3\1\u043c\30\3\24\0"+
    "\3\3\10\0\1\u043d\32\3\24\0\3\3\10\0\20\3"+
    "\1\u043e\7\3\1\u043f\2\3\24\0\3\3\10\0\12\3"+
    "\1\u01fb\20\3\24\0\3\3\10\0\11\3\1\u0440\21\3"+
    "\24\0\3\3\10\0\6\3\1\u0441\24\3\24\0\3\3"+
    "\10\0\2\3\1\u0442\30\3\24\0\3\3\10\0\23\3"+
    "\1\u0443\7\3\24\0\3\3\10\0\5\3\1\u0444\25\3"+
    "\24\0\3\3\10\0\14\3\1\u0445\16\3\24\0\3\3"+
    "\10\0\13\3\1\u0446\17\3\24\0\3\3\10\0\12\3"+
    "\1\u0447\20\3\24\0\3\3\10\0\2\3\1\u0112\30\3"+
    "\24\0\3\3\10\0\20\3\1\u0448\12\3\24\0\3\3"+
    "\10\0\6\3\1\u0429\24\3\24\0\3\3\10\0\11\3"+
    "\1\u0449\21\3\24\0\3\3\10\0\15\3\1\u044a\4\3"+
    "\1\u044b\10\3\24\0\3\3\10\0\17\3\1\u044c\13\3"+
    "\24\0\3\3\10\0\11\3\1\u044d\21\3\24\0\3\3"+
    "\10\0\20\3\1\u044e\12\3\24\0\3\3\10\0\5\3"+
    "\1\u044f\25\3\24\0\3\3\10\0\20\3\1\u0450\12\3"+
    "\24\0\3\3\10\0\11\3\1\u0451\21\3\24\0\3\3"+
    "\10\0\12\3\1\u0452\20\3\24\0\3\3\10\0\7\3"+
    "\1\u0453\23\3\24\0\3\3\10\0\1\u0393\32\3\24\0"+
    "\3\3\10\0\4\3\1\u0454\26\3\24\0\3\3\10\0"+
    "\17\3\1\u0455\13\3\24\0\3\3\10\0\1\u0456\32\3"+
    "\24\0\3\3\10\0\6\3\1\u0457\24\3\24\0\3\3"+
    "\10\0\15\3\1\u0458\15\3\24\0\3\3\10\0\17\3"+
    "\1\u0459\13\3\24\0\3\3\10\0\24\3\1\u045a\6\3"+
    "\24\0\3\3\10\0\13\3\1\u045b\17\3\24\0\3\3"+
    "\10\0\17\3\1\u045c\13\3\24\0\3\3\10\0\2\3"+
    "\1\u045d\30\3\24\0\3\3\10\0\12\3\1\u045e\20\3"+
    "\24\0\3\3\10\0\1\3\1\u045f\31\3\24\0\3\3"+
    "\10\0\4\3\1\u0460\26\3\24\0\3\3\10\0\23\3"+
    "\1\u0461\7\3\24\0\3\3\10\0\14\3\1\u0462\16\3"+
    "\24\0\3\3\10\0\5\3\1\u0463\25\3\24\0\3\3"+
    "\10\0\15\3\1\u0464\15\3\24\0\1\3\1\u0465\1\3"+
    "\10\0\33\3\24\0\3\3\10\0\6\3\1\u0466\24\3"+
    "\24\0\3\3\10\0\11\3\1\u0467\21\3\24\0\3\3"+
    "\10\0\17\3\1\u0468\13\3\24\0\3\3\10\0\6\3"+
    "\1\u0469\24\3\24\0\3\3\10\0\6\3\1\u046a\24\3"+
    "\24\0\3\3\10\0\2\3\1\u046b\30\3\24\0\3\3"+
    "\10\0\13\3\1\u046c\17\3\24\0\3\3\10\0\22\3"+
    "\1\u046d\10\3\24\0\3\3\10\0\5\3\1\u046e\25\3"+
    "\24\0\3\3\10\0\7\3\1\u046f\23\3\24\0\3\3"+
    "\10\0\6\3\1\u0470\24\3\24\0\3\3\10\0\2\3"+
    "\1\u0471\30\3\24\0\3\3\10\0\1\3\1\u0472\31\3"+
    "\24\0\3\3\10\0\22\3\1\u0473\10\3\24\0\3\3"+
    "\10\0\23\3\1\u0474\7\3\24\0\3\3\10\0\30\3"+
    "\1\u0475\2\3\24\0\3\3\10\0\17\3\1\u0476\13\3"+
    "\24\0\3\3\10\0\17\3\1\u0477\13\3\24\0\3\3"+
    "\10\0\10\3\1\u0478\22\3\24\0\3\3\10\0\20\3"+
    "\1\u0479\12\3\24\0\3\3\10\0\1\u047a\32\3\24\0"+
    "\3\3\10\0\2\3\1\u047b\30\3\24\0\3\3\10\0"+
    "\12\3\1\u047c\20\3\24\0\3\3\10\0\13\3\1\u0151"+
    "\17\3\24\0\3\3\10\0\6\3\1\u0206\24\3\24\0"+
    "\3\3\10\0\21\3\1\u047d\11\3\24\0\3\3\10\0"+
    "\1\3\1\u047e\31\3\24\0\3\3\10\0\5\3\1\u016e"+
    "\25\3\24\0\3\3\10\0\2\3\1\u047f\30\3\24\0"+
    "\3\3\10\0\1\3\1\u0480\31\3\24\0\3\3\10\0"+
    "\23\3\1\u0481\7\3\24\0\3\3\10\0\20\3\1\u0202"+
    "\12\3\24\0\3\3\10\0\17\3\1\242\13\3\24\0"+
    "\3\3\10\0\17\3\1\u0482\13\3\24\0\3\3\10\0"+
    "\10\3\1\u0483\22\3\24\0\3\3\10\0\20\3\1\u0484"+
    "\12\3\24\0\3\3\10\0\6\3\1\u0485\24\3\24\0"+
    "\3\3\10\0\22\3\1\u0486\10\3\24\0\3\3\10\0"+
    "\4\3\1\u0487\26\3\24\0\3\3\10\0\2\3\1\u0488"+
    "\30\3\24\0\3\3\10\0\16\3\1\u0489\14\3\24\0"+
    "\3\3\10\0\22\3\1\u048a\10\3\24\0\3\3\10\0"+
    "\7\3\1\u048b\23\3\24\0\3\3\10\0\20\3\1\u048c"+
    "\12\3\24\0\3\3\10\0\7\3\1\u048d\23\3\24\0"+
    "\3\3\10\0\15\3\1\u048e\15\3\24\0\3\3\10\0"+
    "\21\3\1\u048f\11\3\24\0\3\3\10\0\2\3\1\u0490"+
    "\30\3\24\0\3\3\10\0\2\3\1\u0491\30\3\24\0"+
    "\3\3\10\0\4\3\1\u0492\26\3\24\0\3\3\10\0"+
    "\17\3\1\u0493\13\3\24\0\3\3\10\0\1\u0494\32\3"+
    "\24\0\3\3\10\0\1\u0495\32\3\24\0\3\3\10\0"+
    "\4\3\1\u0496\26\3\24\0\3\3\10\0\1\u0497\32\3"+
    "\24\0\3\3\10\0\5\3\1\u0498\25\3\24\0\3\3"+
    "\10\0\1\3\1\u0499\31\3\24\0\3\3\10\0\7\3"+
    "\1\u049a\23\3\24\0\3\3\10\0\13\3\1\u049b\17\3"+
    "\24\0\3\3\10\0\1\110\32\3\24\0\3\3\10\0"+
    "\5\3\1\u049c\25\3\24\0\3\3\10\0\1\u049d\32\3"+
    "\24\0\1\3\1\u049e\1\3\10\0\33\3\24\0\3\3"+
    "\10\0\17\3\1\u049f\13\3\24\0\3\3\10\0\20\3"+
    "\1\u04a0\12\3\24\0\3\3\10\0\17\3\1\u04a1\13\3"+
    "\24\0\3\3\10\0\20\3\1\u04a2\12\3\24\0\3\3"+
    "\10\0\24\3\1\u04a3\6\3\24\0\3\3\10\0\4\3"+
    "\1\u04a4\26\3\24\0\3\3\10\0\2\3\1\u04a5\30\3"+
    "\24\0\3\3\10\0\4\3\1\u04a6\26\3\24\0\3\3"+
    "\10\0\2\3\1\u04a7\30\3\24\0\3\3\10\0\1\u04a8"+
    "\32\3\24\0\3\3\10\0\23\3\1\u04a9\7\3\24\0"+
    "\3\3\10\0\23\3\1\u04aa\7\3\24\0\3\3\10\0"+
    "\7\3\1\u04ab\23\3\24\0\3\3\10\0\1\3\1\u04ac"+
    "\2\3\1\u0433\26\3\24\0\3\3\10\0\13\3\1\u04ad"+
    "\17\3\24\0\3\3\10\0\2\3\1\u04ae\30\3\24\0"+
    "\3\3\10\0\2\3\1\u04af\30\3\24\0\3\3\10\0"+
    "\4\3\1\u04b0\26\3\24\0\1\3\1\u04b1\1\3\10\0"+
    "\33\3\24\0\3\3\10\0\1\u04b2\32\3\24\0\3\3"+
    "\10\0\22\3\1\u04b3\10\3\24\0\3\3\10\0\17\3"+
    "\1\u04b4\13\3\24\0\3\3\10\0\11\3\1\u04b5\21\3"+
    "\24\0\3\3\10\0\7\3\1\u04b6\23\3\24\0\3\3"+
    "\10\0\1\3\1\u04b7\31\3\24\0\3\3\10\0\20\3"+
    "\1\u04a7\12\3\24\0\3\3\10\0\17\3\1\u04b8\13\3"+
    "\24\0\3\3\10\0\14\3\1\u04b9\16\3\24\0\3\3"+
    "\10\0\17\3\1\u04ba\13\3\24\0\3\3\10\0\12\3"+
    "\1\u04bb\20\3\24\0\3\3\10\0\1\u04bc\32\3\24\0"+
    "\3\3\10\0\4\3\1\u04bd\26\3\24\0\3\3\10\0"+
    "\17\3\1\u04be\13\3\24\0\3\3\10\0\11\3\1\u04bf"+
    "\21\3\24\0\3\3\10\0\6\3\1\u04c0\24\3\24\0"+
    "\3\3\10\0\20\3\1\u04c1\12\3\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[60320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\32\1\1\11\1\1\5\11\6\1\1\11\1\1\2\11"+
    "\4\1\1\11\177\1\1\0\1\11\1\0\11\11\1\0"+
    "\1\1\2\0\305\1\1\11\3\0\314\1\1\11\u0263\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
   private Symbol symbol(int type,Object value){
  return new Symbol(type,yyline,yycolumn,value);
}

 private Symbol symbol(int type){
  return new Symbol(type,yyline,yycolumn);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexercup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexercup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 137: 
          { return new Symbol(sym.EXISTS,yycolumn,yyline,yytext());
          }
        case 224: break;
        case 128: 
          { return new Symbol(sym.INPUT,yycolumn,yyline,yytext());
          }
        case 225: break;
        case 93: 
          { return new Symbol(sym.USER,yycolumn,yyline,yytext());
          }
        case 226: break;
        case 85: 
          { return new Symbol(sym.NULL,yycolumn,yyline,yytext());
          }
        case 227: break;
        case 202: 
          { return new Symbol(sym.VARBINARY,yycolumn,yyline,yytext());
          }
        case 228: break;
        case 165: 
          { return new Symbol(sym.DISABLE,yycolumn,yyline,yytext());
          }
        case 229: break;
        case 55: 
          { return new Symbol(sym.ADD,yycolumn,yyline,yytext()) ;
          }
        case 230: break;
        case 38: 
          { return new Symbol(sym.IN,yycolumn,yyline,yytext());
          }
        case 231: break;
        case 98: 
          { return new Symbol(sym.SAVE,yycolumn,yyline,yytext());
          }
        case 232: break;
        case 203: 
          { return new Symbol(sym.REFERENCES,yycolumn,yyline,yytext());
          }
        case 233: break;
        case 119: 
          { return new Symbol(sym.CHECK,yycolumn,yyline,yytext());
          }
        case 234: break;
        case 91: 
          { return new Symbol(sym.CASE,yycolumn,yyline,yytext());
          }
        case 235: break;
        case 172: 
          { return new Symbol(sym.COLLATE,yycolumn,yyline,yytext());
          }
        case 236: break;
        case 58: 
          { return new Symbol(sym.ASC,yycolumn,yyline,yytext());
          }
        case 237: break;
        case 113: 
          { return new Symbol(sym.LIMIT,yycolumn,yyline,yytext());
          }
        case 238: break;
        case 219: 
          { return new Symbol(sym.DATETIMEOFFSET,yycolumn,yyline,yytext());
          }
        case 239: break;
        case 84: 
          { return new Symbol(sym.NAME,yycolumn,yyline,yytext());
          }
        case 240: break;
        case 187: 
          { return new Symbol(sym.ROWCOUNT,yycolumn,yyline,yytext());
          }
        case 241: break;
        case 27: 
          { return new Symbol(sym.Float,yycolumn,yyline,yytext());
          }
        case 242: break;
        case 221: 
          { return new Symbol(sym.EXECUTE_AS_CLAUSE,yycolumn,yyline,yytext());
          }
        case 243: break;
        case 62: 
          { return new Symbol(sym.NOT,yycolumn,yyline,yytext());
          }
        case 244: break;
        case 43: 
          { return new Symbol(sym.MB,yycolumn,yyline,yytext());
          }
        case 245: break;
        case 26: 
          { return new Symbol(sym.numeral,yycolumn,yyline,yytext());
          }
        case 246: break;
        case 213: 
          { return new Symbol(sym.NONCLUSTERED,yycolumn,yyline,yytext());
          }
        case 247: break;
        case 81: 
          { return new Symbol(sym.THEN,yycolumn,yyline,yytext());
          }
        case 248: break;
        case 175: 
          { return new Symbol(sym.BETWEEN,yycolumn,yyline,yytext());
          }
        case 249: break;
        case 97: 
          { return new Symbol(sym.INTO,yycolumn,yyline,yytext());
          }
        case 250: break;
        case 180: 
          { return new Symbol(sym.DATABASE,yycolumn,yyline,yytext());
          }
        case 251: break;
        case 106: 
          { return new Symbol(sym.ALTER,yycolumn,yyline,yytext());
          }
        case 252: break;
        case 116: 
          { return new Symbol(sym.OUTER,yycolumn,yyline,yytext());
          }
        case 253: break;
        case 220: 
          { return new Symbol(sym.DEFAULT_SCHEMA,yycolumn,yyline,yytext());
          }
        case 254: break;
        case 148: 
          { return new Symbol(sym.UNIQUE,yycolumn,yyline,yytext());
          }
        case 255: break;
        case 131: 
          { return new Symbol(sym.MONEY,yycolumn,yyline,yytext());
          }
        case 256: break;
        case 190: 
          { return new Symbol(sym.UNUSABLE,yycolumn,yyline,yytext());
          }
        case 257: break;
        case 108: 
          { return new Symbol(sym.RIGHT,yycolumn,yyline,yytext());
          }
        case 258: break;
        case 205: 
          { return new Symbol(sym.OPTIMISTIC,yycolumn,yyline,yytext());
          }
        case 259: break;
        case 163: 
          { return new Symbol(sym.DECIMAL,yycolumn,yyline,yytext());
          }
        case 260: break;
        case 130: 
          { return new Symbol(sym.GROUP,yycolumn,yyline,yytext());
          }
        case 261: break;
        case 18: 
          { return new Symbol(sym.menor,yycolumn,yyline,yytext());
          }
        case 262: break;
        case 52: 
          { return new Symbol(sym.or,yycolumn,yyline,yytext());
          }
        case 263: break;
        case 39: 
          { return new Symbol(sym.IF,yycolumn,yyline,yytext());
          }
        case 264: break;
        case 217: 
          { return new Symbol(sym.SCHEMABINDING,yycolumn,yyline,yytext());
          }
        case 265: break;
        case 19: 
          { return new Symbol(sym.igual,yycolumn,yyline,yytext());
          }
        case 266: break;
        case 146: 
          { return new Symbol(sym.CURSOR,yycolumn,yyline,yytext());
          }
        case 267: break;
        case 89: 
          { return new Symbol(sym.PROC,yycolumn,yyline,yytext());
          }
        case 268: break;
        case 29: 
          { return new Symbol(sym.String,yycolumn,yyline,yytext());
          }
        case 269: break;
        case 44: 
          { return new Symbol(sym.KB,yycolumn,yyline,yytext());
          }
        case 270: break;
        case 32: 
          { return new Symbol(sym.TO,yycolumn,yyline,yytext());
          }
        case 271: break;
        case 105: 
          { return new Symbol(sym.JOIN,yycolumn,yyline,yytext());
          }
        case 272: break;
        case 120: 
          { return new Symbol(sym.UNION,yycolumn,yyline,yytext());
          }
        case 273: break;
        case 197: 
          { return new Symbol(sym.ENCRYPTION,yycolumn,yyline,yytext());
          }
        case 274: break;
        case 68: 
          { return new Symbol(sym.INT,yycolumn,yyline,yytext());
          }
        case 275: break;
        case 75: 
          { return new Symbol(sym.DESC,yycolumn,yyline,yytext());
          }
        case 276: break;
        case 122: 
          { return new Symbol(sym.FLOAT,yycolumn,yyline,yytext());
          }
        case 277: break;
        case 138: 
          { return new Symbol(sym.RETURN,yycolumn,yyline,yytext());
          }
        case 278: break;
        case 184: 
          { return new Symbol(sym.TRUNCATE,yycolumn,yyline,yytext());
          }
        case 279: break;
        case 157: 
          { return new Symbol(sym.GLOBAL,yycolumn,yyline,yytext());
          }
        case 280: break;
        case 74: 
          { return new Symbol(sym.DATE,yycolumn,yyline,yytext());
          }
        case 281: break;
        case 174: 
          { return new Symbol(sym.FOREIGN,yycolumn,yyline,yytext());
          }
        case 282: break;
        case 216: 
          { return new Symbol(sym.SCROLL_LOCKS,yycolumn,yyline,yytext());
          }
        case 283: break;
        case 162: 
          { return new Symbol(sym.DECLARE,yycolumn,yyline,yytext());
          }
        case 284: break;
        case 153: 
          { return new Symbol(sym.INSERT,yycolumn,yyline,yytext());
          }
        case 285: break;
        case 135: 
          { return new Symbol(sym.DELETE,yycolumn,yyline,yytext());
          }
        case 286: break;
        case 198: 
          { return new Symbol(sym.PRECISION,yycolumn,yyline,yytext());
          }
        case 287: break;
        case 1: 
          { return new Symbol(sym.ERROR,yycolumn,yyline,yytext());
          }
        case 288: break;
        case 210: 
          { return new Symbol(sym.REPLICATION,yycolumn,yyline,yytext());
          }
        case 289: break;
        case 152: 
          { return new Symbol(sym.INLINE,yycolumn,yyline,yytext());
          }
        case 290: break;
        case 145: 
          { return new Symbol(sym.COMMIT,yycolumn,yyline,yytext());
          }
        case 291: break;
        case 114: 
          { return new Symbol(sym.PRINT,yycolumn,yyline,yytext());
          }
        case 292: break;
        case 69: 
          { return new Symbol(sym.SET,yycolumn,yyline,yytext());
          }
        case 293: break;
        case 10: 
          { return new Symbol(sym.corchete_derecho,yycolumn,yyline,yytext());
          }
        case 294: break;
        case 133: 
          { return new Symbol(sym.WHERE,yycolumn,yyline,yytext());
          }
        case 295: break;
        case 111: 
          { return new Symbol(sym.LOCAL,yycolumn,yyline,yytext());
          }
        case 296: break;
        case 42: 
          { return new Symbol(sym.GB,yycolumn,yyline,yytext());
          }
        case 297: break;
        case 24: 
          { return new Symbol(sym.llave_derecha,yycolumn,yyline,yytext());
          }
        case 298: break;
        case 164: 
          { return new Symbol(sym.DEFAULT,yycolumn,yyline,yytext());
          }
        case 299: break;
        case 149: 
          { return new Symbol(sym.UPDATE,yycolumn,yyline,yytext());
          }
        case 300: break;
        case 48: 
          { return new Symbol(sym.comparar,yycolumn,yyline,yytext());
          }
        case 301: break;
        case 129: 
          { return new Symbol(sym.IMAGE,yycolumn,yyline,yytext());
          }
        case 302: break;
        case 76: 
          { return new Symbol(sym.DROP,yycolumn,yyline,yytext());
          }
        case 303: break;
        case 199: 
          { return new Symbol(sym.PROCEDURE,yycolumn,yyline,yytext());
          }
        case 304: break;
        case 183: 
          { return new Symbol(sym.EXTERNAL,yycolumn,yyline,yytext());
          }
        case 305: break;
        case 66: 
          { return new Symbol(sym.FOR,yycolumn,yyline,yytext());
          }
        case 306: break;
        case 12: 
          { return new Symbol(sym.parentesis_izquierdo,yycolumn,yyline,yytext());
          }
        case 307: break;
        case 168: 
          { return new Symbol(sym.REBUILD,yycolumn,yyline,yytext());
          }
        case 308: break;
        case 78: 
          { return new Symbol(sym.ELSE,yycolumn,yyline,yytext());
          }
        case 309: break;
        case 51: 
          { return new Symbol(sym.and,yycolumn,yyline,yytext());
          }
        case 310: break;
        case 191: 
          { return new Symbol(sym.FUNCTION,yycolumn,yyline,yytext());
          }
        case 311: break;
        case 46: 
          { return new Symbol(sym.doble_parentesis,yycolumn,yyline,yytext());
          }
        case 312: break;
        case 11: 
          { return new Symbol(sym.corchete_izquierdo,yycolumn,yyline,yytext());
          }
        case 313: break;
        case 70: 
          { return new Symbol(sym.SUM,yycolumn,yyline,yytext());
          }
        case 314: break;
        case 15: 
          { return new Symbol(sym.dolar,yycolumn,yyline,yytext());
          }
        case 315: break;
        case 154: 
          { return new Symbol(sym.SELECT,yycolumn,yyline,yytext());
          }
        case 316: break;
        case 179: 
          { return new Symbol(sym.VARYING,yycolumn,yyline,yytext());
          }
        case 317: break;
        case 45: 
          { return new Symbol(sym.doble_corchete,yycolumn,yyline,yytext());
          }
        case 318: break;
        case 211: 
          { return new Symbol(sym.INSENSITIVE,yycolumn,yyline,yytext());
          }
        case 319: break;
        case 90: 
          { return new Symbol(sym.OVER,yycolumn,yyline,yytext());
          }
        case 320: break;
        case 79: 
          { return new Symbol(sym.TEXT,yycolumn,yyline,yytext());
          }
        case 321: break;
        case 72: 
          { return new Symbol(sym.MIN,yycolumn,yyline,yytext());
          }
        case 322: break;
        case 134: 
          { return new Symbol(sym.WHILE,yycolumn,yyline,yytext());
          }
        case 323: break;
        case 49: 
          { return new Symbol(sym.mayor_igual,yycolumn,yyline,yytext());
          }
        case 324: break;
        case 195: 
          { return new Symbol(sym.TIMESTAMP,yycolumn,yyline,yytext());
          }
        case 325: break;
        case 186: 
          { return new Symbol(sym.ROLLBACK,yycolumn,yyline,yytext());
          }
        case 326: break;
        case 28: 
          { return new Symbol(sym.comentario_con_error,yycolumn,yyline,yytext());
          }
        case 327: break;
        case 222: 
          { return new Symbol(sym.DELAYED_DURABILITY,yycolumn,yyline,yytext());
          }
        case 328: break;
        case 171: 
          { return new Symbol(sym.PRIMARY,yycolumn,yyline,yytext());
          }
        case 329: break;
        case 82: 
          { return new Symbol(sym.TIME,yycolumn,yyline,yytext());
          }
        case 330: break;
        case 121: 
          { return new Symbol(sym.FETCH,yycolumn,yyline,yytext());
          }
        case 331: break;
        case 118: 
          { return new Symbol(sym.COUNT,yycolumn,yyline,yytext());
          }
        case 332: break;
        case 173: 
          { return new Symbol(sym.CURRENT,yycolumn,yyline,yytext());
          }
        case 333: break;
        case 88: 
          { return new Symbol(sym.LIKE,yycolumn,yyline,yytext());
          }
        case 334: break;
        case 94: 
          { return new Symbol(sym.FROM,yycolumn,yyline,yytext());
          }
        case 335: break;
        case 104: 
          { return new Symbol(sym.WITH,yycolumn,yyline,yytext());
          }
        case 336: break;
        case 142: 
          { return new Symbol(sym.CALLER,yycolumn,yyline,yytext());
          }
        case 337: break;
        case 193: 
          { return new Symbol(sym.IDENTITY,yycolumn,yyline,yytext());
          }
        case 338: break;
        case 207: 
          { return new Symbol(sym.CONSTRAINT,yycolumn,yyline,yytext());
          }
        case 339: break;
        case 178: 
          { return new Symbol(sym.VARCHAR,yycolumn,yyline,yytext());
          }
        case 340: break;
        case 40: 
          { return new Symbol(sym.IS,yycolumn,yyline,yytext());
          }
        case 341: break;
        case 9: 
          { return new Symbol(sym.error_String_no_completado,yycolumn,yyline,yytext());
          }
        case 342: break;
        case 189: 
          { return new Symbol(sym.PASSWORD,yycolumn,yyline,yytext());
          }
        case 343: break;
        case 71: 
          { return new Symbol(sym.MAX,yycolumn,yyline,yytext());
          }
        case 344: break;
        case 125: 
          { return new Symbol(sym.BEGIN,yycolumn,yyline,yytext());
          }
        case 345: break;
        case 212: 
          { return new Symbol(sym.TYPE_WARNING,yycolumn,yyline,yytext());
          }
        case 346: break;
        case 155: 
          { return new Symbol(sym.STATIC,yycolumn,yyline,yytext());
          }
        case 347: break;
        case 101: 
          { return new Symbol(sym.MARK,yycolumn,yyline,yytext());
          }
        case 348: break;
        case 147: 
          { return new Symbol(sym.UNLOCK,yycolumn,yyline,yytext());
          }
        case 349: break;
        case 166: 
          { return new Symbol(sym.EXECUTE,yycolumn,yyline,yytext());
          }
        case 350: break;
        case 77: 
          { return new Symbol(sym.EXEC,yycolumn,yyline,yytext());
          }
        case 351: break;
        case 156: 
          { return new Symbol(sym.SCROLL,yycolumn,yyline,yytext());
          }
        case 352: break;
        case 65: 
          { return new Symbol(sym.USE,yycolumn,yyline,yytext());
          }
        case 353: break;
        case 25: 
          { return new Symbol(sym.arroba,yycolumn,yyline,yytext());
          }
        case 354: break;
        case 54: 
          { return new Symbol(sym.doble_numeral,yycolumn,yyline,yytext());
          }
        case 355: break;
        case 60: 
          { return new Symbol(sym.END,yycolumn,yyline,yytext());
          }
        case 356: break;
        case 67: 
          { return new Symbol(sym.BIT,yycolumn,yyline,yytext());
          }
        case 357: break;
        case 7: 
          { return new Symbol(sym.resta,yycolumn,yyline,yytext());
          }
        case 358: break;
        case 64: 
          { return new Symbol(sym.OFF,yycolumn,yyline,yytext());
          }
        case 359: break;
        case 110: 
          { return new Symbol(sym.NULLS,yycolumn,yyline,yytext());
          }
        case 360: break;
        case 169: 
          { return new Symbol(sym.NUMERIC,yycolumn,yyline,yytext());
          }
        case 361: break;
        case 8: 
          { return new Symbol(sym.punto,yycolumn,yyline,yytext());
          }
        case 362: break;
        case 21: 
          { return new Symbol(sym.exclamacion,yycolumn,yyline,yytext());
          }
        case 363: break;
        case 86: 
          { return new Symbol(sym.LAST,yycolumn,yyline,yytext());
          }
        case 364: break;
        case 41: 
          { return new Symbol(sym.GO,yycolumn,yyline,yytext());
          }
        case 365: break;
        case 140: 
          { return new Symbol(sym.OUTPUT,yycolumn,yyline,yytext());
          }
        case 366: break;
        case 127: 
          { return new Symbol(sym.INNER,yycolumn,yyline,yytext());
          }
        case 367: break;
        case 37: 
          { return new Symbol(sym.BY,yycolumn,yyline,yytext());
          }
        case 368: break;
        case 196: 
          { return new Symbol(sym.RAISERROR,yycolumn,yyline,yytext());
          }
        case 369: break;
        case 57: 
          { return new Symbol(sym.ALL,yycolumn,yyline,yytext());
          }
        case 370: break;
        case 194: 
          { return new Symbol(sym.DATETIME2,yycolumn,yyline,yytext());
          }
        case 371: break;
        case 150: 
          { return new Symbol(sym.USABLE,yycolumn,yyline,yytext());
          }
        case 372: break;
        case 3: 
          { return new Symbol(sym.Int,yycolumn,yyline,yytext());
          }
        case 373: break;
        case 208: 
          { return new Symbol(sym.FILEGROWTH,yycolumn,yyline,yytext());
          }
        case 374: break;
        case 56: 
          { return new Symbol(sym.AND,yycolumn,yyline,yytext());
          }
        case 375: break;
        case 5: 
          { return new Symbol(sym.division,yycolumn,yyline,yytext());
          }
        case 376: break;
        case 136: 
          { return new Symbol(sym.DOUBLE,yycolumn,yyline,yytext());
          }
        case 377: break;
        case 151: 
          { return new Symbol(sym.HAVING,yycolumn,yyline,yytext());
          }
        case 378: break;
        case 13: 
          { return new Symbol(sym.parentesis_derecho,yycolumn,yyline,yytext());
          }
        case 379: break;
        case 109: 
          { return new Symbol(sym.NAMES,yycolumn,yyline,yytext());
          }
        case 380: break;
        case 209: 
          { return new Symbol(sym.TRANSACTION,yycolumn,yyline,yytext());
          }
        case 381: break;
        case 139: 
          { return new Symbol(sym.PUBLIC,yycolumn,yyline,yytext());
          }
        case 382: break;
        case 53: 
          { return new Symbol(sym.doble_llave,yycolumn,yyline,yytext());
          }
        case 383: break;
        case 31: 
          { return new Symbol(sym.AS,yycolumn,yyline,yytext());
          }
        case 384: break;
        case 17: 
          { return new Symbol(sym.modular,yycolumn,yyline,yytext());
          }
        case 385: break;
        case 181: 
          { return new Symbol(sym.DATETIME,yycolumn,yyline,yytext());
          }
        case 386: break;
        case 218: 
          { return new Symbol(sym.SMALLDATETIME,yycolumn,yyline,yytext());
          }
        case 387: break;
        case 132: 
          { return new Symbol(sym.WRITE,yycolumn,yyline,yytext());
          }
        case 388: break;
        case 92: 
          { return new Symbol(sym.CHAR,yycolumn,yyline,yytext());
          }
        case 389: break;
        case 100: 
          { return new Symbol(sym.SIZE,yycolumn,yyline,yytext());
          }
        case 390: break;
        case 141: 
          { return new Symbol(sym.CALLED,yycolumn,yyline,yytext());
          }
        case 391: break;
        case 115: 
          { return new Symbol(sym.ORDER,yycolumn,yyline,yytext());
          }
        case 392: break;
        case 126: 
          { return new Symbol(sym.INDEX,yycolumn,yyline,yytext());
          }
        case 393: break;
        case 2: 
          { if(yytext().length()>31){
return new Symbol(sym.Identificador,yycolumn,yyline,yytext().substring(0,32));
}else {
return new Symbol(sym.Identificador,yycolumn,yyline,yytext());
}
          }
        case 394: break;
        case 107: 
          { return new Symbol(sym.TABLE,yycolumn,yyline,yytext());
          }
        case 395: break;
        case 215: 
          { return new Symbol(sym.FORWARD_ONLY,yycolumn,yyline,yytext());
          }
        case 396: break;
        case 144: 
          { return new Symbol(sym.COLUMN,yycolumn,yyline,yytext());
          }
        case 397: break;
        case 4: 
          { /*Ignore*/
          }
        case 398: break;
        case 83: 
          { return new Symbol(sym.REAL,yycolumn,yyline,yytext());
          }
        case 399: break;
        case 188: 
          { return new Symbol(sym.NVARCHAR,yycolumn,yyline,yytext());
          }
        case 400: break;
        case 30: 
          { return new Symbol(sym.Reservadas,yycolumn,yyline,yytext());
          }
        case 401: break;
        case 158: 
          { return new Symbol(sym.MODIFY,yycolumn,yyline,yytext());
          }
        case 402: break;
        case 204: 
          { return new Symbol(sym.PARTITIONS,yycolumn,yyline,yytext());
          }
        case 403: break;
        case 200: 
          { return new Symbol(sym.CLUSTERED,yycolumn,yyline,yytext());
          }
        case 404: break;
        case 117: 
          { return new Symbol(sym.OWNER,yycolumn,yyline,yytext());
          }
        case 405: break;
        case 34: 
          { return new Symbol(sym.OR,yycolumn,yyline,yytext());
          }
        case 406: break;
        case 214: 
          { return new Symbol(sym.FAST_FORWARD,yycolumn,yyline,yytext());
          }
        case 407: break;
        case 123: 
          { return new Symbol(sym.FIRST,yycolumn,yyline,yytext());
          }
        case 408: break;
        case 20: 
          { return new Symbol(sym.mayor,yycolumn,yyline,yytext());
          }
        case 409: break;
        case 22: 
          { return new Symbol(sym.coma,yycolumn,yyline,yytext());
          }
        case 410: break;
        case 99: 
          { return new Symbol(sym.SELF,yycolumn,yyline,yytext());
          }
        case 411: break;
        case 23: 
          { return new Symbol(sym.llave_izquierda,yycolumn,yyline,yytext());
          }
        case 412: break;
        case 176: 
          { return new Symbol(sym.INCLUDE,yycolumn,yyline,yytext());
          }
        case 413: break;
        case 103: 
          { return new Symbol(sym.WHEN,yycolumn,yyline,yytext());
          }
        case 414: break;
        case 16: 
          { return new Symbol(sym.punto_coma,yycolumn,yyline,yytext());
          }
        case 415: break;
        case 185: 
          { return new Symbol(sym.READONLY,yycolumn,yyline,yytext());
          }
        case 416: break;
        case 35: 
          { return new Symbol(sym.ON,yycolumn,yyline,yytext());
          }
        case 417: break;
        case 170: 
          { return new Symbol(sym.PERCENT,yycolumn,yyline,yytext());
          }
        case 418: break;
        case 159: 
          { return new Symbol(sym.VALUES,yycolumn,yyline,yytext());
          }
        case 419: break;
        case 14: 
          { return new Symbol(sym.suma,yycolumn,yyline,yytext());
          }
        case 420: break;
        case 143: 
          { return new Symbol(sym.CREATE,yycolumn,yyline,yytext());
          }
        case 421: break;
        case 63: 
          { return new Symbol(sym.OUT,yycolumn,yyline,yytext());
          }
        case 422: break;
        case 47: 
          { return new Symbol(sym.menor_igual,yycolumn,yyline,yytext());
          }
        case 423: break;
        case 59: 
          { return new Symbol(sym.AVG,yycolumn,yyline,yytext());
          }
        case 424: break;
        case 102: 
          { return new Symbol(sym.VIEW,yycolumn,yyline,yytext());
          }
        case 425: break;
        case 206: 
          { return new Symbol(sym.CREDENTIAL,yycolumn,yyline,yytext());
          }
        case 426: break;
        case 33: 
          { return new Symbol(sym.TB,yycolumn,yyline,yytext());
          }
        case 427: break;
        case 182: 
          { return new Symbol(sym.DISTINCT,yycolumn,yyline,yytext());
          }
        case 428: break;
        case 6: 
          { return new Symbol(sym.multiplicacion,yycolumn,yyline,yytext());
          }
        case 429: break;
        case 96: 
          { return new Symbol(sym.FILE,yycolumn,yyline,yytext());
          }
        case 430: break;
        case 124: 
          { return new Symbol(sym.FILES,yycolumn,yyline,yytext());
          }
        case 431: break;
        case 160: 
          { return new Symbol(sym.WITHIN,yycolumn,yyline,yytext());
          }
        case 432: break;
        case 87: 
          { return new Symbol(sym.LEFT,yycolumn,yyline,yytext());
          }
        case 433: break;
        case 73: 
          { return new Symbol(sym.KEY,yycolumn,yyline,yytext());
          }
        case 434: break;
        case 95: 
          { return new Symbol(sym.FULL,yycolumn,yyline,yytext());
          }
        case 435: break;
        case 112: 
          { return new Symbol(sym.LOGIN,yycolumn,yyline,yytext());
          }
        case 436: break;
        case 161: 
          { return new Symbol(sym.KEYSET,yycolumn,yyline,yytext());
          }
        case 437: break;
        case 192: 
          { return new Symbol(sym.FILENAME,yycolumn,yyline,yytext());
          }
        case 438: break;
        case 223: 
          { return new Symbol(sym.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS,yycolumn,yyline,yytext());
          }
        case 439: break;
        case 50: 
          { return new Symbol(sym.diferente,yycolumn,yyline,yytext());
          }
        case 440: break;
        case 177: 
          { return new Symbol(sym.MAXSIZE,yycolumn,yyline,yytext());
          }
        case 441: break;
        case 36: 
          { return new Symbol(sym.OF,yycolumn,yyline,yytext());
          }
        case 442: break;
        case 61: 
          { return new Symbol(sym.TOP,yycolumn,yyline,yytext());
          }
        case 443: break;
        case 80: 
          { return new Symbol(sym.TRAN,yycolumn,yyline,yytext());
          }
        case 444: break;
        case 167: 
          { return new Symbol(sym.RETURNS,yycolumn,yyline,yytext());
          }
        case 445: break;
        case 201: 
          { return new Symbol(sym.INMEDIATE,yycolumn,yyline,yytext());
          }
        case 446: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
