
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 12:36:24 CST 2019
//----------------------------------------------------

package code;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 12:36:24 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u022e\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\006\000\002\004\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\143\004\000\002\143\004\000\002\143\004\000\002" +
    "\143\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\005\004\000\002\006\004\000\002\007\005" +
    "\000\002\007\002\000\002\010\004\000\002\010\002\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\345" +
    "\003\000\002\345\003\000\002\345\003\000\002\345\003" +
    "\000\002\345\003\000\002\346\006\000\002\346\003\000" +
    "\002\346\003\000\002\346\003\000\002\346\006\000\002" +
    "\346\003\000\002\346\006\000\002\346\010\000\002\377" +
    "\003\000\002\377\003\000\002\377\003\000\002\377\003" +
    "\000\002\377\003\000\002\377\003\000\002\377\004\000" +
    "\002\377\004\000\002\377\004\000\002\011\004\000\002" +
    "\011\006\000\002\134\005\000\002\134\005\000\002\134" +
    "\004\000\002\134\004\000\002\134\002\000\002\135\004" +
    "\000\002\135\004\000\002\135\002\000\002\136\004\000" +
    "\002\136\006\000\002\137\004\000\002\137\004\000\002" +
    "\137\002\000\002\141\003\000\002\142\003\000\002\142" +
    "\003\000\002\142\003\000\002\142\004\000\002\142\004" +
    "\000\002\142\004\000\002\017\005\000\002\020\004\000" +
    "\002\021\004\000\002\021\002\000\002\026\013\000\002" +
    "\027\004\000\002\030\003\000\002\030\003\000\002\030" +
    "\004\000\002\030\002\000\002\031\003\000\002\031\005" +
    "\000\002\032\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\005\000\002" +
    "\033\006\000\002\034\004\000\002\034\002\000\002\u0100" +
    "\003\000\002\u0100\003\000\002\u0100\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\006\000\002\036\006\000" +
    "\002\036\006\000\002\036\006\000\002\036\006\000\002" +
    "\036\003\000\002\371\005\000\002\376\004\000\002\376" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\004" +
    "\000\002\367\004\000\002\367\002\000\002\370\004\000" +
    "\002\040\003\000\002\040\002\000\002\044\004\000\002" +
    "\044\002\000\002\041\005\000\002\042\004\000\002\042" +
    "\002\000\002\043\004\000\002\043\003\000\002\043\002" +
    "\000\002\045\003\000\002\045\003\000\002\046\013\000" +
    "\002\046\002\000\002\047\003\000\002\047\004\000\002" +
    "\047\004\000\002\047\004\000\002\047\002\000\002\050" +
    "\003\000\002\050\002\000\002\051\003\000\002\052\005" +
    "\000\002\052\002\000\002\053\005\000\002\053\004\000" +
    "\002\053\005\000\002\053\006\000\002\054\004\000\002" +
    "\054\002\000\002\055\006\000\002\055\002\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\006\000\002\342\004\000\002\341" +
    "\004\000\002\341\002\000\002\060\006\000\002\060\002" +
    "\000\002\061\005\000\002\061\002\000\002\062\004\000" +
    "\002\062\002\000\002\063\006\000\002\063\006\000\002" +
    "\063\002\000\002\064\004\000\002\064\002\000\002\065" +
    "\005\000\002\065\002\000\002\337\005\000\002\337\005" +
    "\000\002\066\005\000\002\066\002\000\002\067\003\000" +
    "\002\067\003\000\002\067\002\000\002\070\007\000\002" +
    "\071\003\000\002\071\002\000\002\072\005\000\002\072" +
    "\002\000\002\073\004\000\002\074\004\000\002\074\002" +
    "\000\002\075\004\000\002\075\004\000\002\076\006\000" +
    "\002\077\004\000\002\077\002\000\002\100\004\000\002" +
    "\101\004\000\002\101\002\000\002\102\012\000\002\103" +
    "\004\000\002\104\006\000\002\104\002\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\106\005\000" +
    "\002\106\002\000\002\107\007\000\002\110\005\000\002" +
    "\110\002\000\002\111\003\000\002\111\002\000\002\114" +
    "\004\000\002\122\003\000\002\122\003\000\002\122\003" +
    "\000\002\122\003\000\002\122\003\000\002\123\004\000" +
    "\002\123\002\000\002\124\005\000\002\125\005\000\002" +
    "\126\004\000\002\127\004\000\002\127\002\000\002\130" +
    "\005\000\002\131\006\000\002\132\004\000\002\132\002" +
    "\000\002\340\005\000\002\344\005\000\002\366\003\000" +
    "\002\366\003\000\002\144\012\000\002\145\004\000\002" +
    "\145\002\000\002\146\006\000\002\146\002\000\002\147" +
    "\005\000\002\147\005\000\002\147\004\000\002\150\003" +
    "\000\002\150\003\000\002\151\004\000\002\151\002\000" +
    "\002\152\003\000\002\152\002\000\002\153\004\000\002" +
    "\153\002\000\002\154\004\000\002\154\002\000\002\155" +
    "\004\000\002\156\003\000\002\156\003\000\002\156\005" +
    "\000\002\157\004\000\002\157\002\000\002\160\003\000" +
    "\002\160\003\000\002\161\003\000\002\161\003\000\002" +
    "\161\003\000\002\161\003\000\002\162\004\000\002\162" +
    "\002\000\002\163\005\000\002\164\004\000\002\165\003" +
    "\000\002\165\002\000\002\166\014\000\002\167\003\000" +
    "\002\167\002\000\002\170\011\000\002\171\004\000\002" +
    "\171\002\000\002\172\003\000\002\172\002\000\002\173" +
    "\003\000\002\173\002\000\002\174\004\000\002\174\002" +
    "\000\002\175\004\000\002\176\004\000\002\176\002\000" +
    "\002\177\003\000\002\177\003\000\002\177\003\000\002" +
    "\177\005\000\002\177\004\000\002\177\004\000\002\200" +
    "\005\000\002\201\004\000\002\u0103\006\000\002\u0103\004" +
    "\000\002\202\004\000\002\203\003\000\002\203\003\000" +
    "\002\203\003\000\002\203\003\000\002\203\005\000\002" +
    "\203\005\000\002\203\005\000\002\204\003\000\002\204" +
    "\003\000\002\205\017\000\002\u0102\003\000\002\u0102\002" +
    "\000\002\u0101\003\000\002\u0101\002\000\002\206\003\000" +
    "\002\206\003\000\002\206\002\000\002\207\003\000\002" +
    "\207\003\000\002\207\002\000\002\210\003\000\002\210" +
    "\003\000\002\210\003\000\002\210\003\000\002\210\002" +
    "\000\002\211\003\000\002\211\003\000\002\211\003\000" +
    "\002\211\002\000\002\212\003\000\002\212\002\000\002" +
    "\213\005\000\002\213\002\000\002\214\004\000\002\214" +
    "\002\000\002\215\004\000\002\216\004\000\002\216\002" +
    "\000\002\113\004\000\002\217\005\000\002\220\004\000" +
    "\002\220\002\000\002\221\004\000\002\221\005\000\002" +
    "\221\004\000\002\221\004\000\002\221\004\000\002\222" +
    "\003\000\002\222\003\000\002\223\005\000\002\224\005" +
    "\000\002\224\002\000\002\336\004\000\002\336\002\000" +
    "\002\225\003\000\002\225\002\000\002\226\015\000\002" +
    "\227\004\000\002\227\002\000\002\230\003\000\002\230" +
    "\003\000\002\231\003\000\002\231\003\000\002\233\005" +
    "\000\002\233\002\000\002\234\003\000\002\234\003\000" +
    "\002\234\003\000\002\232\003\000\002\235\006\000\002" +
    "\236\003\000\002\236\003\000\002\236\003\000\002\236" +
    "\003\000\002\236\002\000\002\237\005\000\002\240\004" +
    "\000\002\240\002\000\002\241\006\000\002\242\003\000" +
    "\002\242\003\000\002\243\003\000\002\243\003\000\002" +
    "\243\003\000\002\243\002\000\002\244\011\000\002\245" +
    "\004\000\002\246\004\000\002\246\002\000\002\247\004" +
    "\000\002\343\003\000\002\343\003\000\002\343\002\000" +
    "\002\250\006\000\002\250\002\000\002\251\007\000\002" +
    "\252\004\000\002\254\004\000\002\254\002\000\002\253" +
    "\005\000\002\253\005\000\002\253\006\000\002\253\014" +
    "\000\002\255\006\000\002\255\006\000\002\255\003\000" +
    "\002\255\003\000\002\255\003\000\002\255\006\000\002" +
    "\255\003\000\002\255\003\000\002\255\003\000\002\255" +
    "\003\000\002\255\003\000\002\255\003\000\002\255\003" +
    "\000\002\255\003\000\002\255\006\000\002\255\003\000" +
    "\002\255\003\000\002\255\003\000\002\255\010\000\002" +
    "\255\010\000\002\256\004\000\002\256\002\000\002\260" +
    "\003\000\002\257\003\000\002\257\004\000\002\257\006" +
    "\000\002\257\014\000\002\257\004\000\002\257\006\000" +
    "\002\257\004\000\002\257\010\000\002\261\005\000\002" +
    "\261\002\000\002\262\003\000\002\262\003\000\002\262" +
    "\002\000\002\263\005\000\002\264\004\000\002\264\002" +
    "\000\002\265\004\000\002\267\004\000\002\267\002\000" +
    "\002\266\005\000\002\266\007\000\002\270\004\000\002" +
    "\270\002\000\002\347\005\000\002\347\002\000\002\271" +
    "\005\000\002\272\005\000\002\272\002\000\002\273\003" +
    "\000\002\273\003\000\002\274\004\000\002\274\002\000" +
    "\002\276\004\000\002\275\004\000\002\275\002\000\002" +
    "\277\005\000\002\277\005\000\002\300\006\000\002\334" +
    "\005\000\002\334\003\000\002\301\004\000\002\301\002" +
    "\000\002\303\005\000\002\303\002\000\002\302\003\000" +
    "\002\112\004\000\002\304\004\000\002\304\004\000\002" +
    "\304\004\000\002\304\004\000\002\304\004\000\002\304" +
    "\003\000\002\304\003\000\002\305\004\000\002\306\003" +
    "\000\002\306\003\000\002\307\006\000\002\307\004\000" +
    "\002\307\005\000\002\310\006\000\002\311\003\000\002" +
    "\311\003\000\002\313\003\000\002\313\003\000\002\313" +
    "\003\000\002\313\003\000\002\314\004\000\002\315\005" +
    "\000\002\315\004\000\002\315\004\000\002\316\005\000" +
    "\002\316\003\000\002\316\014\000\002\317\004\000\002" +
    "\320\005\000\002\321\004\000\002\321\003\000\002\321" +
    "\004\000\002\321\004\000\002\321\014\000\002\321\004" +
    "\000\002\321\010\000\002\321\002\000\002\322\004\000" +
    "\002\322\004\000\002\322\004\000\002\323\004\000\002" +
    "\335\004\000\002\335\002\000\002\324\004\000\002\326" +
    "\004\000\002\326\002\000\002\325\005\000\002\325\005" +
    "\000\002\325\003\000\002\325\005\000\002\325\005\000" +
    "\002\350\004\000\002\351\004\000\002\351\002\000\002" +
    "\327\006\000\002\333\005\000\002\333\003\000\002\352" +
    "\006\000\002\353\003\000\002\353\003\000\002\355\005" +
    "\000\002\355\002\000\002\356\003\000\002\356\002\000" +
    "\002\116\005\000\002\363\004\000\002\363\002\000\002" +
    "\364\003\000\002\364\004\000\002\364\002\000\002\365" +
    "\010\000\002\365\002\000\002\117\005\000\002\120\005" +
    "\000\002\373\005\000\002\374\004\000\002\374\005\000" +
    "\002\374\002\000\002\375\004\000\002\375\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03f8\000\046\002\ufffe\003\030\102\024\110\040\114" +
    "\041\122\010\123\034\125\014\130\013\133\042\146\044" +
    "\154\016\260\012\265\022\313\017\315\045\346\050\351" +
    "\037\001\002\000\004\002\ufffd\001\002\000\006\237\070" +
    "\241\071\001\002\000\004\002\uffff\001\002\000\006\237" +
    "\070\241\071\001\002\000\004\115\u03f5\001\002\000\006" +
    "\237\070\241\071\001\002\000\006\010\ufef4\240\ufef4\001" +
    "\002\000\006\010\uff28\113\u03e0\001\002\000\006\070\uff25" +
    "\113\u03d8\001\002\000\004\010\057\001\002\000\022\060" +
    "\u0196\101\u0351\115\u0354\117\u0350\140\u0355\227\u0352\276\u0199" +
    "\314\u0197\001\002\000\004\010\057\001\002\000\006\237" +
    "\070\241\071\001\002\000\006\237\070\241\071\001\002" +
    "\000\006\121\051\252\053\001\002\000\006\237\070\241" +
    "\071\001\002\000\044\010\uffa3\011\uffa3\012\uffa3\013\uffa3" +
    "\014\uffa3\022\uffa3\043\uffa3\052\uffa3\061\u02a5\113\u02a7\131" +
    "\u02a3\162\uffa3\170\uffa3\244\uffa3\245\uffa3\246\uffa3\321\uffa3" +
    "\001\002\000\006\237\070\241\071\001\002\000\006\237" +
    "\070\241\071\001\002\000\004\002\000\001\002\000\006" +
    "\237\070\241\071\001\002\000\006\237\070\241\071\001" +
    "\002\000\006\237\070\241\071\001\002\000\006\237\070" +
    "\241\071\001\002\000\004\010\u0274\001\002\000\006\237" +
    "\070\241\071\001\002\000\006\237\070\241\071\001\002" +
    "\000\006\121\051\252\053\001\002\000\006\010\uff3e\104" +
    "\u0250\001\002\000\032\060\ufea6\077\166\101\ufe7b\112\173" +
    "\115\167\117\163\134\172\140\170\166\165\227\164\276" +
    "\ufea6\314\ufea6\001\002\000\014\101\115\115\123\117\116" +
    "\140\122\227\117\001\002\000\004\002\113\001\002\000" +
    "\006\010\ufef5\240\ufef5\001\002\000\014\121\051\150\ufde1" +
    "\237\ufde1\241\ufde1\252\053\001\002\000\006\237\070\241" +
    "\071\001\002\000\006\237\070\241\071\001\002\000\006" +
    "\121\051\252\053\001\002\000\014\010\ufde8\052\ufde8\150" +
    "\ufde8\237\ufde8\241\ufde8\001\002\000\012\010\057\052\054" +
    "\237\ufdde\241\ufdde\001\002\000\014\010\ufde9\052\ufde9\150" +
    "\ufde9\237\ufde9\241\ufde9\001\002\000\004\010\066\001\002" +
    "\000\006\237\ufddb\241\ufddb\001\002\000\010\150\ufde0\237" +
    "\ufde0\241\ufde0\001\002\000\252\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\037\uffe1\040\060\043\uffe1\044\uffe1\052\uffe1\056" +
    "\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\073\uffe1\076\uffe1" +
    "\100\uffe1\103\uffe1\106\uffe1\107\uffe1\111\uffe1\116\uffe1\120" +
    "\uffe1\124\uffe1\126\uffe1\127\uffe1\133\uffe1\134\uffe1\135\uffe1" +
    "\136\uffe1\144\uffe1\150\uffe1\154\uffe1\155\uffe1\157\uffe1\160" +
    "\uffe1\161\uffe1\165\uffe1\166\uffe1\167\uffe1\171\uffe1\172\uffe1" +
    "\173\uffe1\176\uffe1\201\uffe1\202\uffe1\203\uffe1\205\uffe1\215" +
    "\uffe1\216\uffe1\217\uffe1\220\uffe1\221\uffe1\222\uffe1\223\uffe1" +
    "\230\uffe1\231\uffe1\237\uffe1\240\uffe1\241\uffe1\242\uffe1\243" +
    "\uffe1\247\uffe1\334\uffe1\335\uffe1\336\uffe1\337\uffe1\340\uffe1" +
    "\341\uffe1\342\uffe1\345\uffe1\001\002\000\004\010\062\001" +
    "\002\000\250\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3" +
    "\043\uffe3\044\uffe3\052\uffe3\056\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\073\uffe3\076\uffe3\100\uffe3\103\uffe3\106\uffe3" +
    "\107\uffe3\111\uffe3\116\uffe3\120\uffe3\124\uffe3\126\uffe3\127" +
    "\uffe3\133\uffe3\134\uffe3\135\uffe3\136\uffe3\144\uffe3\150\uffe3" +
    "\154\uffe3\155\uffe3\157\uffe3\160\uffe3\161\uffe3\165\uffe3\166" +
    "\uffe3\167\uffe3\171\uffe3\172\uffe3\173\uffe3\176\uffe3\201\uffe3" +
    "\202\uffe3\203\uffe3\205\uffe3\215\uffe3\216\uffe3\217\uffe3\220" +
    "\uffe3\221\uffe3\222\uffe3\223\uffe3\230\uffe3\231\uffe3\237\uffe3" +
    "\240\uffe3\241\uffe3\242\uffe3\243\uffe3\247\uffe3\334\uffe3\335" +
    "\uffe3\336\uffe3\337\uffe3\340\uffe3\341\uffe3\342\uffe3\345\uffe3" +
    "\001\002\000\252\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\037" +
    "\uffdf\040\063\043\uffdf\044\uffdf\052\uffdf\056\uffdf\066\uffdf" +
    "\067\uffdf\070\uffdf\071\uffdf\073\uffdf\076\uffdf\100\uffdf\103" +
    "\uffdf\106\uffdf\107\uffdf\111\uffdf\116\uffdf\120\uffdf\124\uffdf" +
    "\126\uffdf\127\uffdf\133\uffdf\134\uffdf\135\uffdf\136\uffdf\144" +
    "\uffdf\150\uffdf\154\uffdf\155\uffdf\157\uffdf\160\uffdf\161\uffdf" +
    "\165\uffdf\166\uffdf\167\uffdf\171\uffdf\172\uffdf\173\uffdf\176" +
    "\uffdf\201\uffdf\202\uffdf\203\uffdf\205\uffdf\215\uffdf\216\uffdf" +
    "\217\uffdf\220\uffdf\221\uffdf\222\uffdf\223\uffdf\230\uffdf\231" +
    "\uffdf\237\uffdf\240\uffdf\241\uffdf\242\uffdf\243\uffdf\247\uffdf" +
    "\334\uffdf\335\uffdf\336\uffdf\337\uffdf\340\uffdf\341\uffdf\342" +
    "\uffdf\345\uffdf\001\002\000\004\010\065\001\002\000\250" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\043\uffe2\044" +
    "\uffe2\052\uffe2\056\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2" +
    "\073\uffe2\076\uffe2\100\uffe2\103\uffe2\106\uffe2\107\uffe2\111" +
    "\uffe2\116\uffe2\120\uffe2\124\uffe2\126\uffe2\127\uffe2\133\uffe2" +
    "\134\uffe2\135\uffe2\136\uffe2\144\uffe2\150\uffe2\154\uffe2\155" +
    "\uffe2\157\uffe2\160\uffe2\161\uffe2\165\uffe2\166\uffe2\167\uffe2" +
    "\171\uffe2\172\uffe2\173\uffe2\176\uffe2\201\uffe2\202\uffe2\203" +
    "\uffe2\205\uffe2\215\uffe2\216\uffe2\217\uffe2\220\uffe2\221\uffe2" +
    "\222\uffe2\223\uffe2\230\uffe2\231\uffe2\237\uffe2\240\uffe2\241" +
    "\uffe2\242\uffe2\243\uffe2\247\uffe2\334\uffe2\335\uffe2\336\uffe2" +
    "\337\uffe2\340\uffe2\341\uffe2\342\uffe2\345\uffe2\001\002\000" +
    "\250\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\043\uffe0" +
    "\044\uffe0\052\uffe0\056\uffe0\066\uffe0\067\uffe0\070\uffe0\071" +
    "\uffe0\073\uffe0\076\uffe0\100\uffe0\103\uffe0\106\uffe0\107\uffe0" +
    "\111\uffe0\116\uffe0\120\uffe0\124\uffe0\126\uffe0\127\uffe0\133" +
    "\uffe0\134\uffe0\135\uffe0\136\uffe0\144\uffe0\150\uffe0\154\uffe0" +
    "\155\uffe0\157\uffe0\160\uffe0\161\uffe0\165\uffe0\166\uffe0\167" +
    "\uffe0\171\uffe0\172\uffe0\173\uffe0\176\uffe0\201\uffe0\202\uffe0" +
    "\203\uffe0\205\uffe0\215\uffe0\216\uffe0\217\uffe0\220\uffe0\221" +
    "\uffe0\222\uffe0\223\uffe0\230\uffe0\231\uffe0\237\uffe0\240\uffe0" +
    "\241\uffe0\242\uffe0\243\uffe0\247\uffe0\334\uffe0\335\uffe0\336" +
    "\uffe0\337\uffe0\340\uffe0\341\uffe0\342\uffe0\345\uffe0\001\002" +
    "\000\010\150\ufddf\237\ufddf\241\ufddf\001\002\000\046\002" +
    "\ufffe\003\030\102\024\110\040\114\041\122\010\123\034" +
    "\125\014\130\013\133\042\146\044\154\016\260\012\265" +
    "\022\313\017\315\045\346\050\351\037\001\002\000\054" +
    "\002\uffe7\003\uffe7\102\uffe7\110\uffe7\114\uffe7\122\uffe7\123" +
    "\uffe7\125\uffe7\130\uffe7\133\uffe7\146\uffe7\154\uffe7\205\uffe7" +
    "\241\073\260\uffe7\265\uffe7\274\uffe7\313\uffe7\315\uffe7\346" +
    "\uffe7\351\uffe7\001\002\000\054\002\uffe6\003\uffe6\102\uffe6" +
    "\110\uffe6\114\uffe6\122\uffe6\123\uffe6\125\uffe6\130\uffe6\133" +
    "\uffe6\146\uffe6\154\uffe6\205\uffe6\237\072\260\uffe6\265\uffe6" +
    "\274\uffe6\313\uffe6\315\uffe6\346\uffe6\351\uffe6\001\002\000" +
    "\052\002\uffe5\003\uffe5\102\uffe5\110\uffe5\114\uffe5\122\uffe5" +
    "\123\uffe5\125\uffe5\130\uffe5\133\uffe5\146\uffe5\154\uffe5\205" +
    "\uffe5\260\uffe5\265\uffe5\274\uffe5\313\uffe5\315\uffe5\346\uffe5" +
    "\351\uffe5\001\002\000\052\002\uffe4\003\uffe4\102\uffe4\110" +
    "\uffe4\114\uffe4\122\uffe4\123\uffe4\125\uffe4\130\uffe4\133\uffe4" +
    "\146\uffe4\154\uffe4\205\uffe4\260\uffe4\265\uffe4\274\uffe4\313" +
    "\uffe4\315\uffe4\346\uffe4\351\uffe4\001\002\000\004\002\uffee" +
    "\001\002\000\046\002\ufffe\003\030\102\024\110\040\114" +
    "\041\122\010\123\034\125\014\130\013\133\042\146\044" +
    "\154\016\260\012\265\022\313\017\315\045\346\050\351" +
    "\037\001\002\000\004\002\ufff5\001\002\000\010\150\103" +
    "\237\ufddc\241\ufddc\001\002\000\014\010\057\052\054\150" +
    "\ufdde\237\ufdde\241\ufdde\001\002\000\010\150\ufde2\237\ufde2" +
    "\241\ufde2\001\002\000\006\237\ufde3\241\ufde3\001\002\000" +
    "\004\043\104\001\002\000\004\352\105\001\002\000\004" +
    "\031\106\001\002\000\006\126\110\275\111\001\002\000" +
    "\004\044\112\001\002\000\016\037\ufec8\044\ufec8\237\ufec8" +
    "\240\ufec8\241\ufec8\265\ufec8\001\002\000\016\037\ufec7\044" +
    "\ufec7\237\ufec7\240\ufec7\241\ufec7\265\ufec7\001\002\000\006" +
    "\237\ufddd\241\ufddd\001\002\000\004\002\001\001\002\000" +
    "\006\237\uff22\241\uff22\001\002\000\006\010\uff1b\236\130" +
    "\001\002\000\006\010\uff1b\236\130\001\002\000\006\010" +
    "\uff1b\236\130\001\002\000\006\237\uff21\241\uff21\001\002" +
    "\000\006\237\uff1e\241\uff1e\001\002\000\006\010\uff1b\236" +
    "\130\001\002\000\006\010\uff1b\236\130\001\002\000\006" +
    "\237\uff1d\241\uff1d\001\002\000\006\237\uff1f\241\uff1f\001" +
    "\002\000\006\237\uff20\241\uff20\001\002\000\004\010\057" +
    "\001\002\000\004\152\131\001\002\000\004\010\uff1c\001" +
    "\002\000\006\237\uff1a\241\uff1a\001\002\000\010\037\135" +
    "\237\uffa9\241\uffa9\001\002\000\006\237\uffab\241\uffab\001" +
    "\002\000\004\010\057\001\002\000\006\237\uffaa\241\uffaa" +
    "\001\002\000\004\010\057\001\002\000\006\237\uff10\241" +
    "\uff10\001\002\000\004\010\057\001\002\000\006\237\uff11" +
    "\241\uff11\001\002\000\004\010\057\001\002\000\006\237" +
    "\uff19\241\uff19\001\002\000\010\037\147\237\uff16\241\uff16" +
    "\001\002\000\006\237\uff18\241\uff18\001\002\000\004\010" +
    "\057\001\002\000\006\237\uff17\241\uff17\001\002\000\004" +
    "\010\057\001\002\000\006\237\uff15\241\uff15\001\002\000" +
    "\004\126\154\001\002\000\004\010\057\001\002\000\010" +
    "\037\157\237\uff12\241\uff12\001\002\000\006\237\uff14\241" +
    "\uff14\001\002\000\004\010\057\001\002\000\006\237\uff13" +
    "\241\uff13\001\002\000\010\060\u0196\276\u0199\314\u0197\001" +
    "\002\000\006\237\ufea9\241\ufea9\001\002\000\004\010\057" +
    "\001\002\000\004\010\u014b\001\002\000\004\101\ufe7e\001" +
    "\002\000\004\101\ufe7d\001\002\000\004\010\057\001\002" +
    "\000\004\010\057\001\002\000\004\101\175\001\002\000" +
    "\004\154\174\001\002\000\004\101\ufe7c\001\002\000\010" +
    "\060\ufea7\276\ufea7\314\ufea7\001\002\000\004\010\057\001" +
    "\002\000\006\237\ufea4\241\ufea4\001\002\000\004\126\200" +
    "\001\002\000\004\010\057\001\002\000\004\043\202\001" +
    "\002\000\004\010\057\001\002\000\006\037\220\044\ufe77" +
    "\001\002\000\012\037\ufe73\044\ufe73\127\215\160\214\001" +
    "\002\000\004\044\206\001\002\000\010\177\210\237\ufe71" +
    "\241\ufe71\001\002\000\006\237\ufe7a\241\ufe7a\001\002\000" +
    "\004\043\211\001\002\000\004\010\057\001\002\000\004" +
    "\044\213\001\002\000\006\237\ufe72\241\ufe72\001\002\000" +
    "\006\037\ufe75\044\ufe75\001\002\000\006\037\ufe74\044\ufe74" +
    "\001\002\000\006\037\ufe76\044\ufe76\001\002\000\004\044" +
    "\ufe79\001\002\000\004\010\057\001\002\000\004\044\ufe78" +
    "\001\002\000\006\010\057\240\ufe28\001\002\000\006\237" +
    "\ufea1\241\ufea1\001\002\000\010\010\ufe25\037\ufe25\240\ufe25" +
    "\001\002\000\006\010\057\240\ufe26\001\002\000\004\240" +
    "\227\001\002\000\006\043\230\102\024\001\002\000\004" +
    "\102\024\001\002\000\006\237\ufe2a\241\ufe2a\001\002\000" +
    "\006\237\ufe2c\241\ufe2c\001\002\000\004\044\234\001\002" +
    "\000\006\237\ufe2b\241\ufe2b\001\002\000\004\240\ufe29\001" +
    "\002\000\004\037\237\001\002\000\006\010\057\240\ufe28" +
    "\001\002\000\004\240\ufe27\001\002\000\004\043\243\001" +
    "\002\000\006\237\ufea3\241\ufea3\001\002\000\012\010\057" +
    "\067\244\105\246\173\245\001\002\000\004\174\u0141\001" +
    "\002\000\004\174\u013e\001\002\000\004\010\u013c\001\002" +
    "\000\004\044\u0138\001\002\000\050\157\270\161\272\167" +
    "\276\171\271\172\257\215\267\216\264\217\300\230\277" +
    "\231\263\242\260\243\262\334\261\335\265\336\274\337" +
    "\273\340\256\341\275\342\255\001\002\000\012\037\252" +
    "\044\ufe6d\237\ufe6d\241\ufe6d\001\002\000\012\010\057\067" +
    "\244\105\246\173\245\001\002\000\010\044\ufe6f\237\ufe6f" +
    "\241\ufe6f\001\002\000\010\044\ufe6e\237\ufe6e\241\ufe6e\001" +
    "\002\000\032\037\ufe5d\044\ufe5d\067\ufe5d\076\ufe5d\116\ufe5d" +
    "\120\ufe5d\124\ufe5d\166\ufe5d\173\ufe5d\176\ufe5d\237\ufe5d\241" +
    "\ufe5d\001\002\000\032\037\ufe5c\044\ufe5c\067\ufe5c\076\ufe5c" +
    "\116\ufe5c\120\ufe5c\124\ufe5c\166\ufe5c\173\ufe5c\176\ufe5c\237" +
    "\ufe5c\241\ufe5c\001\002\000\032\037\ufe57\044\ufe57\067\ufe57" +
    "\076\ufe57\116\ufe57\120\ufe57\124\ufe57\166\ufe57\173\ufe57\176" +
    "\ufe57\237\ufe57\241\ufe57\001\002\000\032\037\ufe61\044\ufe61" +
    "\067\ufe61\076\ufe61\116\ufe61\120\ufe61\124\ufe61\166\ufe61\173" +
    "\ufe61\176\ufe61\237\ufe61\241\ufe61\001\002\000\032\037\ufe65" +
    "\044\ufe65\067\ufe65\076\ufe65\116\ufe65\120\ufe65\124\ufe65\166" +
    "\ufe65\173\ufe65\176\ufe65\237\ufe65\241\ufe65\001\002\000\004" +
    "\043\u0135\001\002\000\004\043\u0130\001\002\000\032\037" +
    "\ufe62\044\ufe62\067\ufe62\076\ufe62\116\ufe62\120\ufe62\124\ufe62" +
    "\166\ufe62\173\ufe62\176\ufe62\237\ufe62\241\ufe62\001\002\000" +
    "\032\037\ufe60\044\ufe60\067\ufe60\076\ufe60\116\ufe60\120\ufe60" +
    "\124\ufe60\166\ufe60\173\ufe60\176\ufe60\237\ufe60\241\ufe60\001" +
    "\002\000\032\037\ufe53\044\ufe53\067\330\076\317\116\326" +
    "\120\323\124\324\166\322\173\327\176\325\237\ufe53\241" +
    "\ufe53\001\002\000\004\043\314\001\002\000\004\043\311" +
    "\001\002\000\034\037\ufe64\043\306\044\ufe64\067\ufe64\076" +
    "\ufe64\116\ufe64\120\ufe64\124\ufe64\166\ufe64\173\ufe64\176\ufe64" +
    "\237\ufe64\241\ufe64\001\002\000\032\037\ufe58\044\ufe58\067" +
    "\ufe58\076\ufe58\116\ufe58\120\ufe58\124\ufe58\166\ufe58\173\ufe58" +
    "\176\ufe58\237\ufe58\241\ufe58\001\002\000\032\037\ufe5e\044" +
    "\ufe5e\067\ufe5e\076\ufe5e\116\ufe5e\120\ufe5e\124\ufe5e\166\ufe5e" +
    "\173\ufe5e\176\ufe5e\237\ufe5e\241\ufe5e\001\002\000\032\037" +
    "\ufe5f\044\ufe5f\067\ufe5f\076\ufe5f\116\ufe5f\120\ufe5f\124\ufe5f" +
    "\166\ufe5f\173\ufe5f\176\ufe5f\237\ufe5f\241\ufe5f\001\002\000" +
    "\032\037\ufe5b\044\ufe5b\067\ufe5b\076\ufe5b\116\ufe5b\120\ufe5b" +
    "\124\ufe5b\166\ufe5b\173\ufe5b\176\ufe5b\237\ufe5b\241\ufe5b\001" +
    "\002\000\032\037\ufe66\044\ufe66\067\ufe66\076\ufe66\116\ufe66" +
    "\120\ufe66\124\ufe66\166\ufe66\173\ufe66\176\ufe66\237\ufe66\241" +
    "\ufe66\001\002\000\004\043\301\001\002\000\032\037\ufe59" +
    "\044\ufe59\067\ufe59\076\ufe59\116\ufe59\120\ufe59\124\ufe59\166" +
    "\ufe59\173\ufe59\176\ufe59\237\ufe59\241\ufe59\001\002\000\004" +
    "\011\302\001\002\000\004\037\303\001\002\000\004\011" +
    "\304\001\002\000\004\044\305\001\002\000\032\037\ufe55" +
    "\044\ufe55\067\ufe55\076\ufe55\116\ufe55\120\ufe55\124\ufe55\166" +
    "\ufe55\173\ufe55\176\ufe55\237\ufe55\241\ufe55\001\002\000\004" +
    "\170\307\001\002\000\004\044\310\001\002\000\032\037" +
    "\ufe63\044\ufe63\067\ufe63\076\ufe63\116\ufe63\120\ufe63\124\ufe63" +
    "\166\ufe63\173\ufe63\176\ufe63\237\ufe63\241\ufe63\001\002\000" +
    "\004\011\312\001\002\000\004\044\313\001\002\000\032" +
    "\037\ufe5a\044\ufe5a\067\ufe5a\076\ufe5a\116\ufe5a\120\ufe5a\124" +
    "\ufe5a\166\ufe5a\173\ufe5a\176\ufe5a\237\ufe5a\241\ufe5a\001\002" +
    "\000\004\011\315\001\002\000\004\044\316\001\002\000" +
    "\032\037\ufe67\044\ufe67\067\ufe67\076\ufe67\116\ufe67\120\ufe67" +
    "\124\ufe67\166\ufe67\173\ufe67\176\ufe67\237\ufe67\241\ufe67\001" +
    "\002\000\004\043\u012b\001\002\000\012\037\ufe6c\044\ufe6c" +
    "\237\ufe6c\241\ufe6c\001\002\000\032\037\ufe53\044\ufe53\067" +
    "\330\076\317\116\326\120\323\124\324\166\322\173\327" +
    "\176\325\237\ufe53\241\ufe53\001\002\000\034\037\ufe39\043" +
    "\u0125\044\ufe39\067\ufe39\076\ufe39\116\ufe39\120\ufe39\124\ufe39" +
    "\166\ufe39\173\ufe39\176\ufe39\237\ufe39\241\ufe39\001\002\000" +
    "\032\037\ufe51\044\ufe51\067\ufe51\076\ufe51\116\ufe51\120\ufe51" +
    "\124\ufe51\166\ufe51\173\ufe51\176\ufe51\237\ufe51\241\ufe51\001" +
    "\002\000\016\010\057\011\u010f\012\u010b\013\u010a\014\u0110" +
    "\120\u010d\001\002\000\004\043\362\001\002\000\004\120" +
    "\361\001\002\000\004\174\342\001\002\000\004\174\331" +
    "\001\002\000\004\043\332\001\002\000\004\010\057\001" +
    "\002\000\004\044\334\001\002\000\004\175\335\001\002" +
    "\000\004\010\057\001\002\000\004\043\337\001\002\000" +
    "\004\010\057\001\002\000\004\044\341\001\002\000\032" +
    "\037\ufe4e\044\ufe4e\067\ufe4e\076\ufe4e\116\ufe4e\120\ufe4e\124" +
    "\ufe4e\166\ufe4e\173\ufe4e\176\ufe4e\237\ufe4e\241\ufe4e\001\002" +
    "\000\040\037\ufe45\043\ufe45\044\ufe45\067\ufe45\076\ufe45\077" +
    "\344\112\343\116\ufe45\120\ufe45\124\ufe45\166\ufe45\173\ufe45" +
    "\176\ufe45\237\ufe45\241\ufe45\001\002\000\034\037\ufe46\043" +
    "\ufe46\044\ufe46\067\ufe46\076\ufe46\116\ufe46\120\ufe46\124\ufe46" +
    "\166\ufe46\173\ufe46\176\ufe46\237\ufe46\241\ufe46\001\002\000" +
    "\034\037\ufe47\043\ufe47\044\ufe47\067\ufe47\076\ufe47\116\ufe47" +
    "\120\ufe47\124\ufe47\166\ufe47\173\ufe47\176\ufe47\237\ufe47\241" +
    "\ufe47\001\002\000\034\037\ufe48\043\346\044\ufe48\067\ufe48" +
    "\076\ufe48\116\ufe48\120\ufe48\124\ufe48\166\ufe48\173\ufe48\176" +
    "\ufe48\237\ufe48\241\ufe48\001\002\000\004\010\351\001\002" +
    "\000\032\037\ufe4f\044\ufe4f\067\ufe4f\076\ufe4f\116\ufe4f\120" +
    "\ufe4f\124\ufe4f\166\ufe4f\173\ufe4f\176\ufe4f\237\ufe4f\241\ufe4f" +
    "\001\002\000\004\044\360\001\002\000\012\037\uff41\044" +
    "\uff41\127\353\160\352\001\002\000\014\037\uff43\044\uff43" +
    "\066\uff43\237\uff43\241\uff43\001\002\000\014\037\uff42\044" +
    "\uff42\066\uff42\237\uff42\241\uff42\001\002\000\006\037\355" +
    "\044\ufe42\001\002\000\004\010\351\001\002\000\004\044" +
    "\ufe44\001\002\000\004\044\ufe43\001\002\000\032\037\ufe49" +
    "\044\ufe49\067\ufe49\076\ufe49\116\ufe49\120\ufe49\124\ufe49\166" +
    "\ufe49\173\ufe49\176\ufe49\237\ufe49\241\ufe49\001\002\000\032" +
    "\037\ufe4d\044\ufe4d\067\ufe4d\076\ufe4d\116\ufe4d\120\ufe4d\124" +
    "\ufe4d\166\ufe4d\173\ufe4d\176\ufe4d\237\ufe4d\241\ufe4d\001\002" +
    "\000\004\010\057\001\002\000\004\044\u0123\001\002\000" +
    "\024\025\377\026\u0100\027\u0104\030\u0103\031\u0106\033\u0101" +
    "\100\375\201\u0105\202\u0102\001\002\000\014\034\370\035" +
    "\372\044\ufe3f\134\373\155\366\001\002\000\034\010\uff63" +
    "\044\uff63\066\uff63\071\uff63\073\uff63\136\uff63\162\uff63\170" +
    "\uff63\237\uff63\241\uff63\244\uff63\245\uff63\246\uff63\001\002" +
    "\000\004\044\ufe41\001\002\000\034\010\uff61\044\uff61\066" +
    "\uff61\071\uff61\073\uff61\136\uff61\162\uff61\170\uff61\237\uff61" +
    "\241\uff61\244\uff61\245\uff61\246\uff61\001\002\000\004\010" +
    "\057\001\002\000\034\010\uff60\044\uff60\066\uff60\071\uff60" +
    "\073\uff60\136\uff60\162\uff60\170\uff60\237\uff60\241\uff60\244" +
    "\uff60\245\uff60\246\uff60\001\002\000\034\010\uff62\044\uff62" +
    "\066\uff62\071\uff62\073\uff62\136\uff62\162\uff62\170\uff62\237" +
    "\uff62\241\uff62\244\uff62\245\uff62\246\uff62\001\002\000\004" +
    "\044\ufe40\001\002\000\004\043\u0111\001\002\000\016\010" +
    "\057\011\u010f\012\u010b\013\u010a\014\u0110\120\u010d\001\002" +
    "\000\022\010\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\052" +
    "\uff5f\120\uff5f\321\uff5f\001\002\000\022\010\uff5d\011\uff5d" +
    "\012\uff5d\013\uff5d\014\uff5d\052\uff5d\120\uff5d\321\uff5d\001" +
    "\002\000\022\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b" +
    "\052\uff5b\120\uff5b\321\uff5b\001\002\000\004\011\u0107\001" +
    "\002\000\022\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c" +
    "\052\uff5c\120\uff5c\321\uff5c\001\002\000\022\010\uff5e\011" +
    "\uff5e\012\uff5e\013\uff5e\014\uff5e\052\uff5e\120\uff5e\321\uff5e" +
    "\001\002\000\022\010\uff59\011\uff59\012\uff59\013\uff59\014" +
    "\uff59\052\uff59\120\uff59\321\uff59\001\002\000\022\010\uff5a" +
    "\011\uff5a\012\uff5a\013\uff5a\014\uff5a\052\uff5a\120\uff5a\321" +
    "\uff5a\001\002\000\004\155\u0108\001\002\000\004\011\u0109" +
    "\001\002\000\022\010\uff58\011\uff58\012\uff58\013\uff58\014" +
    "\uff58\052\uff58\120\uff58\321\uff58\001\002\000\046\034\uffde" +
    "\035\uffde\037\uffde\044\uffde\066\uffde\067\uffde\076\uffde\116" +
    "\uffde\120\uffde\124\uffde\134\uffde\136\uffde\155\uffde\166\uffde" +
    "\173\uffde\176\uffde\237\uffde\241\uffde\001\002\000\046\034" +
    "\uffdb\035\uffdb\037\uffdb\044\uffdb\066\uffdb\067\uffdb\076\uffdb" +
    "\116\uffdb\120\uffdb\124\uffdb\134\uffdb\136\uffdb\155\uffdb\166" +
    "\uffdb\173\uffdb\176\uffdb\237\uffdb\241\uffdb\001\002\000\046" +
    "\034\uffd9\035\uffd9\037\uffd9\044\uffd9\066\uffd9\067\uffd9\076" +
    "\uffd9\116\uffd9\120\uffd9\124\uffd9\134\uffd9\136\uffd9\155\uffd9" +
    "\166\uffd9\173\uffd9\176\uffd9\237\uffd9\241\uffd9\001\002\000" +
    "\046\034\uffda\035\uffda\037\uffda\044\uffda\066\uffda\067\uffda" +
    "\076\uffda\116\uffda\120\uffda\124\uffda\134\uffda\136\uffda\155" +
    "\uffda\166\uffda\173\uffda\176\uffda\237\uffda\241\uffda\001\002" +
    "\000\014\034\ufe3e\035\ufe3e\044\ufe3e\134\ufe3e\155\ufe3e\001" +
    "\002\000\046\034\uffdc\035\uffdc\037\uffdc\044\uffdc\066\uffdc" +
    "\067\uffdc\076\uffdc\116\uffdc\120\uffdc\124\uffdc\134\uffdc\136" +
    "\uffdc\155\uffdc\166\uffdc\173\uffdc\176\uffdc\237\uffdc\241\uffdc" +
    "\001\002\000\046\034\uffdd\035\uffdd\037\uffdd\044\uffdd\066" +
    "\uffdd\067\uffdd\076\uffdd\116\uffdd\120\uffdd\124\uffdd\134\uffdd" +
    "\136\uffdd\155\uffdd\166\uffdd\173\uffdd\176\uffdd\237\uffdd\241" +
    "\uffdd\001\002\000\022\010\057\011\u0117\012\u0112\013\u0119" +
    "\014\u0118\052\u011a\120\u0115\321\u0113\001\002\000\032\034" +
    "\uffc8\035\uffc8\037\uffc8\044\uffc8\066\uffc8\071\uffc8\073\uffc8" +
    "\134\uffc8\136\uffc8\155\uffc8\237\uffc8\241\uffc8\001\002\000" +
    "\006\011\u0122\012\u0121\001\002\000\006\037\u011f\044\uff55" +
    "\001\002\000\032\034\uffc7\035\uffc7\037\uffc7\044\uffc7\066" +
    "\uffc7\071\uffc7\073\uffc7\134\uffc7\136\uffc7\155\uffc7\237\uffc7" +
    "\241\uffc7\001\002\000\004\044\u011d\001\002\000\032\034" +
    "\uffc9\035\uffc9\037\uffc9\044\uffc9\066\uffc9\071\uffc9\073\uffc9" +
    "\134\uffc9\136\uffc9\155\uffc9\237\uffc9\241\uffc9\001\002\000" +
    "\032\034\uffca\035\uffca\037\uffca\044\uffca\066\uffca\071\uffca" +
    "\073\uffca\134\uffca\136\uffca\155\uffca\237\uffca\241\uffca\001" +
    "\002\000\032\034\uffcb\035\uffcb\037\uffcb\044\uffcb\066\uffcb" +
    "\071\uffcb\073\uffcb\134\uffcb\136\uffcb\155\uffcb\237\uffcb\241" +
    "\uffcb\001\002\000\004\010\u011c\001\002\000\032\034\uffc6" +
    "\035\uffc6\037\uffc6\044\uffc6\066\uffc6\071\uffc6\073\uffc6\134" +
    "\uffc6\136\uffc6\155\uffc6\237\uffc6\241\uffc6\001\002\000\032" +
    "\034\uffc5\035\uffc5\037\uffc5\044\uffc5\066\uffc5\071\uffc5\073" +
    "\uffc5\134\uffc5\136\uffc5\155\uffc5\237\uffc5\241\uffc5\001\002" +
    "\000\014\034\ufe3d\035\ufe3d\044\ufe3d\134\ufe3d\155\ufe3d\001" +
    "\002\000\004\044\uff57\001\002\000\022\010\057\011\u0117" +
    "\012\u0112\013\u0119\014\u0118\052\u011a\120\u0115\321\u0113\001" +
    "\002\000\004\044\uff56\001\002\000\032\034\uffc3\035\uffc3" +
    "\037\uffc3\044\uffc3\066\uffc3\071\uffc3\073\uffc3\134\uffc3\136" +
    "\uffc3\155\uffc3\237\uffc3\241\uffc3\001\002\000\032\034\uffc4" +
    "\035\uffc4\037\uffc4\044\uffc4\066\uffc4\071\uffc4\073\uffc4\134" +
    "\uffc4\136\uffc4\155\uffc4\237\uffc4\241\uffc4\001\002\000\032" +
    "\037\ufe4c\044\ufe4c\067\ufe4c\076\ufe4c\116\ufe4c\120\ufe4c\124" +
    "\ufe4c\166\ufe4c\173\ufe4c\176\ufe4c\237\ufe4c\241\ufe4c\001\002" +
    "\000\032\037\ufe4b\044\ufe4b\067\ufe4b\076\ufe4b\116\ufe4b\120" +
    "\ufe4b\124\ufe4b\166\ufe4b\173\ufe4b\176\ufe4b\237\ufe4b\241\ufe4b" +
    "\001\002\000\022\010\057\011\u0117\012\u0112\013\u0119\014" +
    "\u0118\052\u011a\120\u0115\321\u0113\001\002\000\032\037\ufe50" +
    "\044\ufe50\067\ufe50\076\ufe50\116\ufe50\120\ufe50\124\ufe50\166" +
    "\ufe50\173\ufe50\176\ufe50\237\ufe50\241\ufe50\001\002\000\004" +
    "\044\u0128\001\002\000\032\037\ufe3a\044\ufe3a\067\ufe3a\076" +
    "\ufe3a\116\ufe3a\120\ufe3a\124\ufe3a\166\ufe3a\173\ufe3a\176\ufe3a" +
    "\237\ufe3a\241\ufe3a\001\002\000\012\037\ufe52\044\ufe52\237" +
    "\ufe52\241\ufe52\001\002\000\012\037\ufe54\044\ufe54\237\ufe54" +
    "\241\ufe54\001\002\000\004\011\u012c\001\002\000\004\037" +
    "\u012d\001\002\000\004\011\u012e\001\002\000\004\044\u012f" +
    "\001\002\000\032\037\ufe4a\044\ufe4a\067\ufe4a\076\ufe4a\116" +
    "\ufe4a\120\ufe4a\124\ufe4a\166\ufe4a\173\ufe4a\176\ufe4a\237\ufe4a" +
    "\241\ufe4a\001\002\000\004\011\u0131\001\002\000\004\037" +
    "\u0132\001\002\000\004\011\u0133\001\002\000\004\044\u0134" +
    "\001\002\000\032\037\ufe56\044\ufe56\067\ufe56\076\ufe56\116" +
    "\ufe56\120\ufe56\124\ufe56\166\ufe56\173\ufe56\176\ufe56\237\ufe56" +
    "\241\ufe56\001\002\000\004\011\u0136\001\002\000\004\044" +
    "\u0137\001\002\000\032\037\ufe68\044\ufe68\067\ufe68\076\ufe68" +
    "\116\ufe68\120\ufe68\124\ufe68\166\ufe68\173\ufe68\176\ufe68\237" +
    "\ufe68\241\ufe68\001\002\000\010\126\u013a\237\ufe3b\241\ufe3b" +
    "\001\002\000\006\237\ufe70\241\ufe70\001\002\000\004\173" +
    "\u013b\001\002\000\006\237\ufe3c\241\ufe3c\001\002\000\022" +
    "\067\330\076\317\116\326\120\323\124\324\166\322\173" +
    "\327\176\325\001\002\000\012\037\ufe6b\044\ufe6b\237\ufe6b" +
    "\241\ufe6b\001\002\000\020\037\ufe45\043\ufe45\044\ufe45\077" +
    "\344\112\343\237\ufe45\241\ufe45\001\002\000\014\037\ufe48" +
    "\043\346\044\ufe48\237\ufe48\241\ufe48\001\002\000\012\037" +
    "\ufe6a\044\ufe6a\237\ufe6a\241\ufe6a\001\002\000\004\043\u0142" +
    "\001\002\000\004\010\057\001\002\000\004\044\u0144\001" +
    "\002\000\004\175\u0145\001\002\000\004\010\057\001\002" +
    "\000\004\043\u0147\001\002\000\004\010\057\001\002\000" +
    "\004\044\u0149\001\002\000\012\037\ufe69\044\ufe69\237\ufe69" +
    "\241\ufe69\001\002\000\006\237\ufea2\241\ufea2\001\002\000" +
    "\014\066\u014c\070\u014d\150\ufe36\237\ufe36\241\ufe36\001\002" +
    "\000\004\211\ufe35\001\002\000\004\211\ufe34\001\002\000" +
    "\004\211\u015d\001\002\000\010\150\u0150\237\ufe32\241\ufe32" +
    "\001\002\000\006\343\u0155\344\u0152\001\002\000\006\237" +
    "\ufe38\241\ufe38\001\002\000\004\031\u015b\001\002\000\006" +
    "\237\ufe33\241\ufe33\001\002\000\010\037\u0159\237\ufe2f\241" +
    "\ufe2f\001\002\000\004\031\u0156\001\002\000\004\010\u0157" +
    "\001\002\000\010\037\ufe2e\237\ufe2e\241\ufe2e\001\002\000" +
    "\006\237\ufe31\241\ufe31\001\002\000\006\343\u0155\344\u0152" +
    "\001\002\000\006\237\ufe30\241\ufe30\001\002\000\006\126" +
    "\110\275\111\001\002\000\010\037\ufe2d\237\ufe2d\241\ufe2d" +
    "\001\002\000\004\010\u015e\001\002\000\010\150\ufe37\237" +
    "\ufe37\241\ufe37\001\002\000\012\126\u0162\237\ufe9c\241\ufe9c" +
    "\345\ufe9c\001\002\000\006\237\ufea5\241\ufea5\001\002\000" +
    "\010\237\ufe9a\241\ufe9a\345\u0192\001\002\000\006\043\ufe98" +
    "\173\u0163\001\002\000\004\043\ufe99\001\002\000\004\043" +
    "\u0165\001\002\000\006\225\u0169\322\u0167\001\002\000\010" +
    "\237\ufe9d\241\ufe9d\345\ufe9d\001\002\000\004\031\ufe93\001" +
    "\002\000\004\031\u016a\001\002\000\004\031\ufe94\001\002" +
    "\000\004\013\u016b\001\002\000\004\037\u016c\001\002\000" +
    "\006\064\u016f\324\u016d\001\002\000\004\031\ufe91\001\002" +
    "\000\004\031\u0170\001\002\000\004\031\ufe92\001\002\000" +
    "\004\013\u0171\001\002\000\006\037\u0173\044\ufe8f\001\002" +
    "\000\004\044\u018d\001\002\000\010\325\u017a\332\u0179\333" +
    "\u0178\001\002\000\006\037\ufe8d\044\ufe8d\001\002\000\006" +
    "\037\u0173\044\ufe8f\001\002\000\006\037\ufe8c\044\ufe8c\001" +
    "\002\000\006\037\ufe8e\044\ufe8e\001\002\000\004\031\u0186" +
    "\001\002\000\004\031\u0182\001\002\000\004\031\u017b\001" +
    "\002\000\004\011\u017c\001\002\000\016\037\ufe85\044\ufe85" +
    "\326\u017f\327\u0181\330\u0180\331\u017d\001\002\000\006\037" +
    "\ufe86\044\ufe86\001\002\000\006\037\ufe8a\044\ufe8a\001\002" +
    "\000\006\037\ufe89\044\ufe89\001\002\000\006\037\ufe87\044" +
    "\ufe87\001\002\000\006\037\ufe88\044\ufe88\001\002\000\010" +
    "\011\u0184\037\ufe82\044\ufe82\001\002\000\006\037\ufe84\044" +
    "\ufe84\001\002\000\016\037\ufe85\044\ufe85\326\u017f\327\u0181" +
    "\330\u0180\331\u017d\001\002\000\006\037\ufe83\044\ufe83\001" +
    "\002\000\004\011\u0187\001\002\000\020\024\u018a\037\ufe85" +
    "\044\ufe85\326\u017f\327\u0181\330\u0180\331\u017d\001\002\000" +
    "\006\037\ufe81\044\ufe81\001\002\000\006\037\ufe80\044\ufe80" +
    "\001\002\000\006\037\ufe7f\044\ufe7f\001\002\000\004\044" +
    "\ufe8b\001\002\000\004\044\ufe90\001\002\000\012\037\u018e" +
    "\237\ufe95\241\ufe95\345\ufe95\001\002\000\004\043\u0165\001" +
    "\002\000\010\237\ufe97\241\ufe97\345\ufe97\001\002\000\010" +
    "\237\ufe96\241\ufe96\345\ufe96\001\002\000\006\237\ufe9e\241" +
    "\ufe9e\001\002\000\004\010\057\001\002\000\006\237\ufe9b" +
    "\241\ufe9b\001\002\000\006\237\ufe9f\241\ufe9f\001\002\000" +
    "\004\010\057\001\002\000\004\010\uff0e\001\002\000\004" +
    "\010\uff0f\001\002\000\006\237\ufea0\241\ufea0\001\002\000" +
    "\004\010\057\001\002\000\006\237\ufea8\241\ufea8\001\002" +
    "\000\004\043\u019c\001\002\000\006\044\ufee7\052\u019d\001" +
    "\002\000\004\010\u020b\001\002\000\004\044\ufee8\001\002" +
    "\000\004\044\u01a0\001\002\000\004\266\u01a1\001\002\000" +
    "\020\157\u01a7\161\u01a5\172\u01a9\215\u01a6\231\u01a8\316\u01a2" +
    "\342\u01a4\001\002\000\004\043\u0208\001\002\000\010\150" +
    "\u01b6\240\ufede\265\ufede\001\002\000\026\031\uffce\037\uffce" +
    "\044\uffce\066\uffce\150\uffce\240\uffce\253\uffce\254\uffce\255" +
    "\uffce\265\uffce\001\002\000\026\031\uffd2\037\uffd2\044\uffd2" +
    "\066\uffd2\150\uffd2\240\uffd2\253\uffd2\254\uffd2\255\uffd2\265" +
    "\uffd2\001\002\000\004\043\u01b2\001\002\000\026\031\uffd0" +
    "\037\uffd0\044\uffd0\066\uffd0\150\uffd0\240\uffd0\253\uffd0\254" +
    "\uffd0\255\uffd0\265\uffd0\001\002\000\004\043\u01ad\001\002" +
    "\000\030\031\uffd1\037\uffd1\043\u01aa\044\uffd1\066\uffd1\150" +
    "\uffd1\240\uffd1\253\uffd1\254\uffd1\255\uffd1\265\uffd1\001\002" +
    "\000\004\011\u01ab\001\002\000\004\044\u01ac\001\002\000" +
    "\026\031\uffcd\037\uffcd\044\uffcd\066\uffcd\150\uffcd\240\uffcd" +
    "\253\uffcd\254\uffcd\255\uffcd\265\uffcd\001\002\000\004\011" +
    "\u01ae\001\002\000\004\037\u01af\001\002\000\004\011\u01b0" +
    "\001\002\000\004\044\u01b1\001\002\000\026\031\uffcc\037" +
    "\uffcc\044\uffcc\066\uffcc\150\uffcc\240\uffcc\253\uffcc\254\uffcc" +
    "\255\uffcc\265\uffcc\001\002\000\004\011\u01b3\001\002\000" +
    "\004\044\u01b4\001\002\000\026\031\uffd3\037\uffd3\044\uffd3" +
    "\066\uffd3\150\uffd3\240\uffd3\253\uffd3\254\uffd3\255\uffd3\265" +
    "\uffd3\001\002\000\006\240\u01ca\265\ufee2\001\002\000\016" +
    "\256\u01bc\266\u01b8\267\u01b9\270\u01bb\271\u01ba\273\u01be\001" +
    "\002\000\010\037\u01c7\240\ufedb\265\ufedb\001\002\000\004" +
    "\120\u01c4\001\002\000\010\037\ufed9\240\ufed9\265\ufed9\001" +
    "\002\000\004\126\u01c0\001\002\000\010\037\ufed8\240\ufed8" +
    "\265\ufed8\001\002\000\010\037\ufeda\240\ufeda\265\ufeda\001" +
    "\002\000\006\240\ufedf\265\ufedf\001\002\000\006\126\110" +
    "\275\111\001\002\000\010\037\ufed5\240\ufed5\265\ufed5\001" +
    "\002\000\004\120\u01c2\001\002\000\010\037\ufed6\240\ufed6" +
    "\265\ufed6\001\002\000\004\272\u01c3\001\002\000\010\037" +
    "\ufed4\240\ufed4\265\ufed4\001\002\000\004\126\u01c0\001\002" +
    "\000\010\037\ufed7\240\ufed7\265\ufed7\001\002\000\006\240" +
    "\ufedd\265\ufedd\001\002\000\016\256\u01bc\266\u01b8\267\u01b9" +
    "\270\u01bb\271\u01ba\273\u01be\001\002\000\006\240\ufedc\265" +
    "\ufedc\001\002\000\004\265\u01cb\001\002\000\022\157\ufee3" +
    "\161\ufee3\172\ufee3\215\ufee3\231\ufee3\265\ufee3\316\ufee3\342" +
    "\ufee3\001\002\000\006\102\024\274\u01cf\001\002\000\006" +
    "\237\ufee9\241\ufee9\001\002\000\006\237\070\241\071\001" +
    "\002\000\006\237\ufed3\241\ufed3\001\002\000\024\010\057" +
    "\011\u01d6\012\u01d2\013\u01db\014\u01d7\043\u01d8\052\u01dc\120" +
    "\u01d4\321\u01d3\001\002\000\004\205\u01d1\001\002\000\006" +
    "\237\ufed1\241\ufed1\001\002\000\032\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\037\uffb1\044\uffb1\070\uffb1\144\uffb1\205\uffb1" +
    "\237\uffb1\240\uffb1\241\uffb1\001\002\000\006\011\u0204\012" +
    "\u0203\001\002\000\004\205\ufecc\001\002\000\032\020\u01e7" +
    "\021\u01e8\022\u01ea\023\u01eb\037\uffbc\044\uffbc\070\uffbc\144" +
    "\uffbc\205\uffbc\237\uffbc\240\uffbc\241\uffbc\001\002\000\032" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\037\uffb2\044\uffb2\070" +
    "\uffb2\144\uffb2\205\uffb2\237\uffb2\240\uffb2\241\uffb2\001\002" +
    "\000\004\205\ufecd\001\002\000\024\010\057\011\u01d6\012" +
    "\u01d2\013\u01e3\014\u01e0\043\u01e1\052\u01dc\120\u01df\321\u01d3" +
    "\001\002\000\004\205\ufecf\001\002\000\004\205\ufed0\001" +
    "\002\000\004\205\ufece\001\002\000\004\010\u01de\001\002" +
    "\000\032\020\uffb0\021\uffb0\022\uffb0\023\uffb0\037\uffb0\044" +
    "\uffb0\070\uffb0\144\uffb0\205\uffb0\237\uffb0\240\uffb0\241\uffb0" +
    "\001\002\000\032\020\uffaf\021\uffaf\022\uffaf\023\uffaf\037" +
    "\uffaf\044\uffaf\070\uffaf\144\uffaf\205\uffaf\237\uffaf\240\uffaf" +
    "\241\uffaf\001\002\000\004\044\u0201\001\002\000\004\044" +
    "\u0200\001\002\000\016\010\057\011\u01d6\012\u01d2\043\u01e1" +
    "\052\u01dc\321\u01d3\001\002\000\004\044\u01e5\001\002\000" +
    "\004\044\u01e4\001\002\000\004\205\ufecb\001\002\000\032" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\037\uffb3\044\uffb3\070" +
    "\uffb3\144\uffb3\205\uffb3\237\uffb3\240\uffb3\241\uffb3\001\002" +
    "\000\032\020\u01e7\021\u01e8\022\u01ea\023\u01eb\037\uffbc\044" +
    "\uffbc\070\uffbc\144\uffbc\205\uffbc\237\uffbc\240\uffbc\241\uffbc" +
    "\001\002\000\016\010\057\011\u01d6\012\u01d2\043\u01e1\052" +
    "\u01dc\321\u01d3\001\002\000\016\010\057\011\u01d6\012\u01d2" +
    "\043\u01e1\052\u01dc\321\u01d3\001\002\000\022\037\uffc1\044" +
    "\uffc1\070\uffc1\144\uffc1\205\uffc1\237\uffc1\240\uffc1\241\uffc1" +
    "\001\002\000\016\010\057\011\u01d6\012\u01d2\043\u01ee\052" +
    "\u01dc\321\u01d3\001\002\000\016\010\057\011\u01d6\012\u01d2" +
    "\043\u01ee\052\u01dc\321\u01d3\001\002\000\026\020\u01f7\021" +
    "\u01f8\037\uffb9\044\uffb9\070\uffb9\144\uffb9\205\uffb9\237\uffb9" +
    "\240\uffb9\241\uffb9\001\002\000\032\020\uffb4\021\uffb4\022" +
    "\u01f2\023\u01f3\037\uffb4\044\uffb4\070\uffb4\144\uffb4\205\uffb4" +
    "\237\uffb4\240\uffb4\241\uffb4\001\002\000\016\010\057\011" +
    "\u01d6\012\u01d2\043\u01e1\052\u01dc\321\u01d3\001\002\000\004" +
    "\044\u01e5\001\002\000\032\020\uffb4\021\uffb4\022\u01f2\023" +
    "\u01f3\037\uffb4\044\uffb4\070\uffb4\144\uffb4\205\uffb4\237\uffb4" +
    "\240\uffb4\241\uffb4\001\002\000\026\020\uffb7\021\uffb7\037" +
    "\uffb7\044\uffb7\070\uffb7\144\uffb7\205\uffb7\237\uffb7\240\uffb7" +
    "\241\uffb7\001\002\000\016\010\057\011\u01d6\012\u01d2\043" +
    "\u01ee\052\u01dc\321\u01d3\001\002\000\016\010\057\011\u01d6" +
    "\012\u01d2\043\u01ee\052\u01dc\321\u01d3\001\002\000\026\020" +
    "\uffb5\021\uffb5\037\uffb5\044\uffb5\070\uffb5\144\uffb5\205\uffb5" +
    "\237\uffb5\240\uffb5\241\uffb5\001\002\000\026\020\uffb6\021" +
    "\uffb6\037\uffb6\044\uffb6\070\uffb6\144\uffb6\205\uffb6\237\uffb6" +
    "\240\uffb6\241\uffb6\001\002\000\026\020\uffb8\021\uffb8\037" +
    "\uffb8\044\uffb8\070\uffb8\144\uffb8\205\uffb8\237\uffb8\240\uffb8" +
    "\241\uffb8\001\002\000\016\010\057\011\u01d6\012\u01d2\043" +
    "\u01e1\052\u01dc\321\u01d3\001\002\000\016\010\057\011\u01d6" +
    "\012\u01d2\043\u01e1\052\u01dc\321\u01d3\001\002\000\022\037" +
    "\uffbf\044\uffbf\070\uffbf\144\uffbf\205\uffbf\237\uffbf\240\uffbf" +
    "\241\uffbf\001\002\000\022\037\uffba\044\uffba\070\uffba\144" +
    "\uffba\205\uffba\237\uffba\240\uffba\241\uffba\001\002\000\022" +
    "\037\uffbb\044\uffbb\070\uffbb\144\uffbb\205\uffbb\237\uffbb\240" +
    "\uffbb\241\uffbb\001\002\000\026\020\u01f7\021\u01f8\037\uffb9" +
    "\044\uffb9\070\uffb9\144\uffb9\205\uffb9\237\uffb9\240\uffb9\241" +
    "\uffb9\001\002\000\022\037\uffc0\044\uffc0\070\uffc0\144\uffc0" +
    "\205\uffc0\237\uffc0\240\uffc0\241\uffc0\001\002\000\022\037" +
    "\uffbd\044\uffbd\070\uffbd\144\uffbd\205\uffbd\237\uffbd\240\uffbd" +
    "\241\uffbd\001\002\000\022\037\uffbe\044\uffbe\070\uffbe\144" +
    "\uffbe\205\uffbe\237\uffbe\240\uffbe\241\uffbe\001\002\000\004" +
    "\205\ufeca\001\002\000\004\205\ufec9\001\002\000\022\037" +
    "\uffc2\044\uffc2\070\uffc2\144\uffc2\205\uffc2\237\uffc2\240\uffc2" +
    "\241\uffc2\001\002\000\032\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\037\uffad\044\uffad\070\uffad\144\uffad\205\uffad\237\uffad" +
    "\240\uffad\241\uffad\001\002\000\032\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\037\uffae\044\uffae\070\uffae\144\uffae\205\uffae" +
    "\237\uffae\240\uffae\241\uffae\001\002\000\004\274\u01cf\001" +
    "\002\000\004\205\u0207\001\002\000\006\237\ufed2\241\ufed2" +
    "\001\002\000\004\011\u0209\001\002\000\004\044\u020a\001" +
    "\002\000\026\031\uffcf\037\uffcf\044\uffcf\066\uffcf\150\uffcf" +
    "\240\uffcf\253\uffcf\254\uffcf\255\uffcf\265\uffcf\001\002\000" +
    "\022\157\ufee2\161\ufee2\172\ufee2\215\ufee2\231\ufee2\240\u01ca" +
    "\316\ufee2\342\ufee2\001\002\000\020\157\u01a7\161\u01a5\172" +
    "\u01a9\215\u01a6\231\u01a8\316\u01a2\342\u01a4\001\002\000\012" +
    "\031\u020e\037\uff02\044\uff02\253\uff02\001\002\000\004\124" +
    "\u0215\001\002\000\010\037\ufee0\044\ufee0\253\u0211\001\002" +
    "\000\006\037\u0213\044\ufee4\001\002\000\006\037\ufee1\044" +
    "\ufee1\001\002\000\004\044\ufee6\001\002\000\004\052\u019d" +
    "\001\002\000\004\044\ufee5\001\002\000\022\037\uff03\044" +
    "\uff03\066\uff03\150\uff03\240\uff03\253\uff03\254\uff03\255\uff03" +
    "\001\002\000\014\052\uff0b\066\uff0b\150\uff0b\237\u0218\240" +
    "\uff0b\001\002\000\012\052\u021a\066\uff09\150\uff09\240\uff09" +
    "\001\002\000\004\011\u0219\001\002\000\012\052\uff0c\066" +
    "\uff0c\150\uff0c\240\uff0c\001\002\000\004\010\u023f\001\002" +
    "\000\010\066\ufefc\150\u021c\240\ufefc\001\002\000\012\146" +
    "\044\256\u0234\257\u0235\260\012\001\002\000\006\066\u021e" +
    "\240\ufeee\001\002\000\004\264\u0230\001\002\000\004\240" +
    "\u0220\001\002\000\004\265\u0221\001\002\000\012\102\024" +
    "\110\040\125\014\130\013\001\002\000\006\237\uff0d\241" +
    "\uff0d\001\002\000\006\237\070\241\071\001\002\000\006" +
    "\237\070\241\071\001\002\000\006\237\070\241\071\001" +
    "\002\000\006\237\070\241\071\001\002\000\014\102\024" +
    "\110\040\125\014\130\013\205\ufeea\001\002\000\004\205" +
    "\u0229\001\002\000\006\237\ufeed\241\ufeed\001\002\000\004" +
    "\205\ufeec\001\002\000\004\205\ufeeb\001\002\000\014\102" +
    "\uffeb\110\uffeb\125\uffeb\130\uffeb\205\uffeb\001\002\000\014" +
    "\102\uffe9\110\uffe9\125\uffe9\130\uffe9\205\uffe9\001\002\000" +
    "\014\102\uffe8\110\uffe8\125\uffe8\130\uffe8\205\uffe8\001\002" +
    "\000\014\102\uffea\110\uffea\125\uffea\130\uffea\205\uffea\001" +
    "\002\000\004\240\ufeef\001\002\000\010\037\u023d\066\ufef6" +
    "\240\ufef6\001\002\000\004\240\u0236\001\002\000\006\066" +
    "\ufefd\240\ufefd\001\002\000\010\037\ufefa\066\ufefa\240\ufefa" +
    "\001\002\000\010\037\ufef9\066\ufef9\240\ufef9\001\002\000" +
    "\012\010\u023a\261\u0239\262\u0237\263\u0238\001\002\000\010" +
    "\037\ufef2\066\ufef2\240\ufef2\001\002\000\010\037\ufef1\066" +
    "\ufef1\240\ufef1\001\002\000\010\037\ufef3\066\ufef3\240\ufef3" +
    "\001\002\000\010\037\ufef0\066\ufef0\240\ufef0\001\002\000" +
    "\010\037\ufef8\066\ufef8\240\ufef8\001\002\000\006\066\ufefb" +
    "\240\ufefb\001\002\000\012\146\044\256\u0234\257\u0235\260" +
    "\012\001\002\000\006\066\ufef7\240\ufef7\001\002\000\024" +
    "\010\u0242\157\u01a7\161\u01a5\172\u01a9\215\u01a6\231\u01a8\250" +
    "\u0241\316\u01a2\342\u01a4\001\002\000\012\037\u024c\066\ufefe" +
    "\150\ufefe\240\ufefe\001\002\000\004\251\u024a\001\002\000" +
    "\004\253\u0249\001\002\000\020\031\u020e\037\uff02\066\uff02" +
    "\150\uff02\240\uff02\254\uff02\255\uff02\001\002\000\016\037" +
    "\uff00\066\uff00\150\uff00\240\uff00\254\u0246\255\u0247\001\002" +
    "\000\012\037\uff01\066\uff01\150\uff01\240\uff01\001\002\000" +
    "\012\037\uff05\066\uff05\150\uff05\240\uff05\001\002\000\012" +
    "\037\uff04\066\uff04\150\uff04\240\uff04\001\002\000\012\037" +
    "\uff07\066\uff07\150\uff07\240\uff07\001\002\000\012\037\uff06" +
    "\066\uff06\150\uff06\240\uff06\001\002\000\006\254\u0246\255" +
    "\u0247\001\002\000\012\037\uff08\066\uff08\150\uff08\240\uff08" +
    "\001\002\000\012\052\u021a\066\uff09\150\uff09\240\uff09\001" +
    "\002\000\010\066\uff0a\150\uff0a\240\uff0a\001\002\000\010" +
    "\066\ufeff\150\ufeff\240\ufeff\001\002\000\004\010\057\001" +
    "\002\000\004\010\uff3f\001\002\000\010\043\u0252\124\uff3c" +
    "\135\uff3c\001\002\000\004\010\u0269\001\002\000\006\124" +
    "\u0254\135\u0255\001\002\000\004\135\u0267\001\002\000\004" +
    "\043\u0257\001\002\000\006\237\uff40\241\uff40\001\002\000" +
    "\014\011\u025e\012\u025b\013\u025a\014\u025f\120\u025d\001\002" +
    "\000\006\237\uff38\241\uff38\001\002\000\004\044\u0263\001" +
    "\002\000\006\037\uffd8\044\uffd8\001\002\000\006\037\uffd5" +
    "\044\uffd5\001\002\000\006\037\u0260\044\uff31\001\002\000" +
    "\006\037\uffd4\044\uffd4\001\002\000\006\037\uffd6\044\uffd6" +
    "\001\002\000\006\037\uffd7\044\uffd7\001\002\000\014\011" +
    "\u025e\012\u025b\013\u025a\014\u025f\120\u025d\001\002\000\004" +
    "\044\uff33\001\002\000\004\044\uff32\001\002\000\010\037" +
    "\u0265\237\uff34\241\uff34\001\002\000\006\237\uff36\241\uff36" +
    "\001\002\000\004\043\u0257\001\002\000\006\237\uff35\241" +
    "\uff35\001\002\000\006\237\uff37\241\uff37\001\002\000\004" +
    "\044\u026d\001\002\000\006\037\u026b\044\uff39\001\002\000" +
    "\004\044\uff3b\001\002\000\004\010\u0269\001\002\000\004" +
    "\044\uff3a\001\002\000\006\124\uff3d\135\uff3d\001\002\000" +
    "\012\010\057\052\054\237\ufdde\241\ufdde\001\002\000\006" +
    "\237\ufdda\241\ufdda\001\002\000\046\002\ufffe\003\030\102" +
    "\024\110\040\114\041\122\010\123\034\125\014\130\013" +
    "\133\042\146\044\154\016\260\012\265\022\313\017\315" +
    "\045\346\050\351\037\001\002\000\004\002\ufff0\001\002" +
    "\000\046\002\ufffe\003\030\102\024\110\040\114\041\122" +
    "\010\123\034\125\014\130\013\133\042\146\044\154\016" +
    "\260\012\265\022\313\017\315\045\346\050\351\037\001" +
    "\002\000\004\002\ufff4\001\002\000\010\250\ufec2\317\u0276" +
    "\320\ufec2\001\002\000\006\250\ufec4\320\u0278\001\002\000" +
    "\006\250\ufec3\320\ufec3\001\002\000\004\250\u0279\001\002" +
    "\000\004\250\ufec5\001\002\000\034\066\ufebf\277\u027b\300" +
    "\u027a\301\ufebf\302\ufebf\303\ufebf\304\ufebf\305\ufebf\306\ufebf" +
    "\307\ufebf\310\ufebf\312\ufebf\320\ufebf\001\002\000\030\066" +
    "\ufec0\301\ufec0\302\ufec0\303\ufec0\304\ufec0\305\ufec0\306\ufec0" +
    "\307\ufec0\310\ufec0\312\ufec0\320\ufec0\001\002\000\030\066" +
    "\ufec1\301\ufec1\302\ufec1\303\ufec1\304\ufec1\305\ufec1\306\ufec1" +
    "\307\ufec1\310\ufec1\312\ufec1\320\ufec1\001\002\000\030\066" +
    "\ufebc\301\u027d\302\ufebc\303\ufebc\304\ufebc\305\ufebc\306\ufebc" +
    "\307\ufebc\310\ufebc\312\ufebc\320\u027f\001\002\000\024\066" +
    "\ufebe\302\ufebe\303\ufebe\304\ufebe\305\ufebe\306\ufebe\307\ufebe" +
    "\310\ufebe\312\ufebe\001\002\000\024\066\ufeb7\302\u0280\303" +
    "\u0281\304\u0283\305\u0284\306\ufeb7\307\ufeb7\310\ufeb7\312\ufeb7" +
    "\001\002\000\024\066\ufebd\302\ufebd\303\ufebd\304\ufebd\305" +
    "\ufebd\306\ufebd\307\ufebd\310\ufebd\312\ufebd\001\002\000\014" +
    "\066\ufebb\306\ufebb\307\ufebb\310\ufebb\312\ufebb\001\002\000" +
    "\014\066\ufeba\306\ufeba\307\ufeba\310\ufeba\312\ufeba\001\002" +
    "\000\014\066\ufeb3\306\u0287\307\u0286\310\ufeb3\312\u0288\001" +
    "\002\000\014\066\ufeb9\306\ufeb9\307\ufeb9\310\ufeb9\312\ufeb9" +
    "\001\002\000\014\066\ufeb8\306\ufeb8\307\ufeb8\310\ufeb8\312" +
    "\ufeb8\001\002\000\006\066\ufeb1\310\u028a\001\002\000\006" +
    "\066\ufeb4\310\ufeb4\001\002\000\006\066\ufeb5\310\ufeb5\001" +
    "\002\000\006\066\ufeb6\310\ufeb6\001\002\000\004\066\u028b" +
    "\001\002\000\004\066\ufeb2\001\002\000\004\102\024\001" +
    "\002\000\010\066\u028e\237\ufeaf\241\ufeaf\001\002\000\006" +
    "\237\ufec6\241\ufec6\001\002\000\004\130\u028f\001\002\000" +
    "\010\237\ufead\241\ufead\311\u0291\001\002\000\006\237\ufeb0" +
    "\241\ufeb0\001\002\000\004\010\u0293\001\002\000\006\237" +
    "\ufeae\241\ufeae\001\002\000\010\037\u0295\237\ufeaa\241\ufeaa" +
    "\001\002\000\006\237\ufeac\241\ufeac\001\002\000\004\010" +
    "\u0293\001\002\000\006\237\ufeab\241\ufeab\001\002\000\046" +
    "\002\ufffe\003\030\102\024\110\040\114\041\122\010\123" +
    "\034\125\014\130\013\133\042\146\044\154\016\260\012" +
    "\265\022\313\017\315\045\346\050\351\037\001\002\000" +
    "\004\002\uffed\001\002\000\046\002\ufffe\003\030\102\024" +
    "\110\040\114\041\122\010\123\034\125\014\130\013\133" +
    "\042\146\044\154\016\260\012\265\022\313\017\315\045" +
    "\346\050\351\037\001\002\000\004\002\ufff7\001\002\000" +
    "\046\002\ufffe\003\030\102\024\110\040\114\041\122\010" +
    "\123\034\125\014\130\013\133\042\146\044\154\016\260" +
    "\012\265\022\313\017\315\045\346\050\351\037\001\002" +
    "\000\004\002\ufffc\001\002\000\046\002\ufffe\003\030\102" +
    "\024\110\040\114\041\122\010\123\034\125\014\130\013" +
    "\133\042\146\044\154\016\260\012\265\022\313\017\315" +
    "\045\346\050\351\037\001\002\000\004\002\ufff2\001\002" +
    "\000\046\002\ufffe\003\030\102\024\110\040\114\041\122" +
    "\010\123\034\125\014\130\013\133\042\146\044\154\016" +
    "\260\012\265\022\313\017\315\045\346\050\351\037\001" +
    "\002\000\004\002\uffef\001\002\000\046\002\ufffe\003\030" +
    "\102\024\110\040\114\041\122\010\123\034\125\014\130" +
    "\013\133\042\146\044\154\016\260\012\265\022\313\017" +
    "\315\045\346\050\351\037\001\002\000\004\002\ufff8\001" +
    "\002\000\036\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\022\uffa6\043\uffa6\052\uffa6\162\uffa6\170\uffa6\244\uffa6\245" +
    "\uffa6\246\uffa6\321\uffa6\001\002\000\036\010\057\011\u01d6" +
    "\012\u01d2\013\u032f\014\u032d\022\u0329\043\u01e1\052\u032e\162" +
    "\u02d5\170\u02d6\244\u02d4\245\u02d3\246\u02d8\321\u01d3\001\002" +
    "\000\036\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\022" +
    "\uffa5\043\uffa5\052\uffa5\162\uffa5\170\uffa5\244\uffa5\245\uffa5" +
    "\246\uffa5\321\uffa5\001\002\000\004\070\u02ad\001\002\000" +
    "\006\011\u02a9\043\u02a8\001\002\000\004\011\u02ab\001\002" +
    "\000\042\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\022" +
    "\uffa2\043\uffa2\052\uffa2\070\uffa2\142\uffa2\162\uffa2\170\uffa2" +
    "\244\uffa2\245\uffa2\246\uffa2\321\uffa2\001\002\000\036\010" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\022\uffa4\043\uffa4" +
    "\052\uffa4\162\uffa4\170\uffa4\244\uffa4\245\uffa4\246\uffa4\321" +
    "\uffa4\001\002\000\004\044\u02ac\001\002\000\042\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\022\uffa1\043\uffa1\052" +
    "\uffa1\070\uffa1\142\uffa1\162\uffa1\170\uffa1\244\uffa1\245\uffa1" +
    "\246\uffa1\321\uffa1\001\002\000\004\010\057\001\002\000" +
    "\042\010\u0316\037\uff7a\044\uff7a\066\uff7a\071\uff7a\073\uff7a" +
    "\103\uff7a\106\uff7a\111\uff7a\136\uff7a\144\uff7a\165\uff7a\237" +
    "\uff7a\240\u0314\241\uff7a\247\uff7a\001\002\000\034\044\uff76" +
    "\066\uff76\071\uff76\073\uff76\103\u02b1\106\uff71\111\u02b0\136" +
    "\uff76\144\uff76\165\u02b2\237\uff76\241\uff76\247\u02b4\001\002" +
    "\000\006\106\uff6f\137\u0311\001\002\000\004\106\uff75\001" +
    "\002\000\006\106\uff6f\137\u0311\001\002\000\004\106\u0312" +
    "\001\002\000\006\106\uff6f\137\u0311\001\002\000\022\044" +
    "\uff6c\066\uff6c\071\uff6c\073\uff6c\136\uff6c\144\u02b7\237\uff6c" +
    "\241\uff6c\001\002\000\020\044\uff53\066\uff53\071\u02cb\073" +
    "\uff53\136\uff53\237\uff53\241\uff53\001\002\000\004\010\057" +
    "\001\002\000\026\025\377\026\u0100\027\u0104\030\u0103\031" +
    "\u0106\033\u0101\100\u02b9\201\u0105\202\u0102\203\u02bc\001\002" +
    "\000\004\043\u02c8\001\002\000\020\044\uff6d\066\uff6d\071" +
    "\uff6d\073\uff6d\136\uff6d\237\uff6d\241\uff6d\001\002\000\022" +
    "\010\057\011\u0117\012\u0112\013\u0119\014\u0118\052\u011a\120" +
    "\u0115\321\u0113\001\002\000\006\116\u02bd\120\u02be\001\002" +
    "\000\004\120\u02bf\001\002\000\020\044\uff6a\066\uff6a\071" +
    "\uff6a\073\uff6a\136\uff6a\237\uff6a\241\uff6a\001\002\000\020" +
    "\044\uff69\066\uff69\071\uff69\073\uff69\136\uff69\237\uff69\241" +
    "\uff69\001\002\000\030\034\370\035\372\044\uff66\066\uff66" +
    "\071\uff66\073\uff66\134\373\136\uff66\155\366\237\uff66\241" +
    "\uff66\001\002\000\020\044\uff6b\066\uff6b\071\uff6b\073\uff6b" +
    "\136\uff6b\237\uff6b\241\uff6b\001\002\000\022\010\057\044" +
    "\uff64\066\uff64\071\uff64\073\uff64\136\uff64\237\uff64\241\uff64" +
    "\001\002\000\022\025\377\026\u0100\027\u0104\030\u0103\031" +
    "\u0106\033\u0101\201\u0105\202\u0102\001\002\000\020\044\uff67" +
    "\066\uff67\071\uff67\073\uff67\136\uff67\237\uff67\241\uff67\001" +
    "\002\000\022\010\057\011\u0117\012\u0112\013\u0119\014\u0118" +
    "\052\u011a\120\u0115\321\u0113\001\002\000\030\034\370\035" +
    "\372\044\uff66\066\uff66\071\uff66\073\uff66\134\373\136\uff66" +
    "\155\366\237\uff66\241\uff66\001\002\000\020\044\uff65\066" +
    "\uff65\071\uff65\073\uff65\136\uff65\237\uff65\241\uff65\001\002" +
    "\000\022\010\057\011\u0117\012\u0112\013\u0119\014\u0118\052" +
    "\u011a\120\u0115\321\u0113\001\002\000\004\044\u02ca\001\002" +
    "\000\020\044\uff68\066\uff68\071\uff68\073\uff68\136\uff68\237" +
    "\uff68\241\uff68\001\002\000\004\072\u030a\001\002\000\016" +
    "\044\uff4f\066\uff4f\073\u02cd\136\uff4f\237\uff4f\241\uff4f\001" +
    "\002\000\030\010\057\044\uff4c\066\uff4c\136\uff4c\162\u02d5" +
    "\170\u02d6\237\uff4c\241\uff4c\244\u02d4\245\u02d3\246\u02d8\001" +
    "\002\000\014\044\uff48\066\uff48\136\u02cf\237\uff48\241\uff48" +
    "\001\002\000\004\072\u02d1\001\002\000\012\044\uffa8\066" +
    "\uffa8\237\uffa8\241\uffa8\001\002\000\016\010\057\162\u02d5" +
    "\170\u02d6\244\u02d4\245\u02d3\246\u02d8\001\002\000\044\025" +
    "\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\033\uff8d\037\uff8d" +
    "\044\uff8d\066\uff8d\070\uff8d\127\uff8d\160\uff8d\201\uff8d\202" +
    "\uff8d\237\uff8d\240\uff8d\241\uff8d\001\002\000\004\043\u02fc" +
    "\001\002\000\004\043\u02f9\001\002\000\004\043\u02f6\001" +
    "\002\000\004\043\u02f3\001\002\000\020\037\uff41\044\uff41" +
    "\066\uff41\127\353\160\352\237\uff41\241\uff41\001\002\000" +
    "\004\043\u02e9\001\002\000\022\037\uff41\043\u02db\044\uff41" +
    "\066\uff41\127\353\160\352\237\uff41\241\uff41\001\002\000" +
    "\012\044\uff49\066\uff49\237\uff49\241\uff49\001\002\000\020" +
    "\010\057\011\u010f\012\u010b\013\u010a\014\u0110\044\u02e2\120" +
    "\u010d\001\002\000\014\037\u02dd\044\uff44\066\uff44\237\uff44" +
    "\241\uff44\001\002\000\004\010\057\001\002\000\012\044" +
    "\uff47\066\uff47\237\uff47\241\uff47\001\002\000\014\037\u02dd" +
    "\044\uff44\066\uff44\237\uff44\241\uff44\001\002\000\012\044" +
    "\uff45\066\uff45\237\uff45\241\uff45\001\002\000\044\025\uff8c" +
    "\026\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c\037\uff8c\044" +
    "\uff8c\066\uff8c\070\uff8c\127\uff8c\160\uff8c\201\uff8c\202\uff8c" +
    "\237\uff8c\240\uff8c\241\uff8c\001\002\000\044\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a\037\uff8a\044\uff8a" +
    "\066\uff8a\070\uff8a\127\uff8a\160\uff8a\201\uff8a\202\uff8a\237" +
    "\uff8a\240\uff8a\241\uff8a\001\002\000\004\044\u02e8\001\002" +
    "\000\006\037\u02e5\044\uff85\001\002\000\016\010\057\011" +
    "\u010f\012\u010b\013\u010a\014\u0110\120\u010d\001\002\000\004" +
    "\044\uff84\001\002\000\004\044\uff86\001\002\000\044\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b\033\uff8b\037\uff8b" +
    "\044\uff8b\066\uff8b\070\uff8b\127\uff8b\160\uff8b\201\uff8b\202" +
    "\uff8b\237\uff8b\240\uff8b\241\uff8b\001\002\000\012\010\uff82" +
    "\011\u02ee\022\u02ed\131\u02ea\001\002\000\004\010\uff83\001" +
    "\002\000\004\010\057\001\002\000\004\044\u02ef\001\002" +
    "\000\004\044\uff88\001\002\000\004\044\uff89\001\002\000" +
    "\044\025\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\033\uff8f" +
    "\037\uff8f\044\uff8f\066\uff8f\070\uff8f\127\uff8f\160\uff8f\201" +
    "\uff8f\202\uff8f\237\uff8f\240\uff8f\241\uff8f\001\002\000\004" +
    "\044\uff87\001\002\000\014\037\u02dd\044\uff44\066\uff44\237" +
    "\uff44\241\uff44\001\002\000\012\044\uff46\066\uff46\237\uff46" +
    "\241\uff46\001\002\000\012\010\uff82\011\u02ee\022\u02ed\131" +
    "\u02ea\001\002\000\004\044\u02f5\001\002\000\044\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\031\uff8e\033\uff8e\037\uff8e\044" +
    "\uff8e\066\uff8e\070\uff8e\127\uff8e\160\uff8e\201\uff8e\202\uff8e" +
    "\237\uff8e\240\uff8e\241\uff8e\001\002\000\012\010\uff82\011" +
    "\u02ee\022\u02ed\131\u02ea\001\002\000\004\044\u02f8\001\002" +
    "\000\044\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\033" +
    "\uff90\037\uff90\044\uff90\066\uff90\070\uff90\127\uff90\160\uff90" +
    "\201\uff90\202\uff90\237\uff90\240\uff90\241\uff90\001\002\000" +
    "\012\010\uff82\011\u02ee\022\u02ed\131\u02ea\001\002\000\004" +
    "\044\u02fb\001\002\000\044\025\uff92\026\uff92\027\uff92\030" +
    "\uff92\031\uff92\033\uff92\037\uff92\044\uff92\066\uff92\070\uff92" +
    "\127\uff92\160\uff92\201\uff92\202\uff92\237\uff92\240\uff92\241" +
    "\uff92\001\002\000\012\010\uff82\011\u02ee\022\u02ed\131\u02ea" +
    "\001\002\000\004\044\u02fe\001\002\000\044\025\uff91\026" +
    "\uff91\027\uff91\030\uff91\031\uff91\033\uff91\037\uff91\044\uff91" +
    "\066\uff91\070\uff91\127\uff91\160\uff91\201\uff91\202\uff91\237" +
    "\uff91\240\uff91\241\uff91\001\002\000\014\044\uff50\066\uff50" +
    "\136\uff50\237\uff50\241\uff50\001\002\000\022\025\377\026" +
    "\u0100\027\u0104\030\u0103\031\u0106\033\u0101\201\u0105\202\u0102" +
    "\001\002\000\024\025\377\026\u0100\027\u0104\030\u0103\031" +
    "\u0106\033\u0101\043\u02db\201\u0105\202\u0102\001\002\000\016" +
    "\010\057\011\u010f\012\u010b\013\u010a\014\u0110\120\u010d\001" +
    "\002\000\024\034\370\035\372\044\uff4a\066\uff4a\134\373" +
    "\136\uff4a\155\366\237\uff4a\241\uff4a\001\002\000\030\010" +
    "\057\044\uff4c\066\uff4c\136\uff4c\162\u02d5\170\u02d6\237\uff4c" +
    "\241\uff4c\244\u02d4\245\u02d3\246\u02d8\001\002\000\014\044" +
    "\uff4d\066\uff4d\136\uff4d\237\uff4d\241\uff4d\001\002\000\014" +
    "\044\uff4b\066\uff4b\136\uff4b\237\uff4b\241\uff4b\001\002\000" +
    "\022\010\057\011\u0117\012\u0112\013\u0119\014\u0118\052\u011a" +
    "\120\u0115\321\u0113\001\002\000\024\034\370\035\372\044" +
    "\uff4a\066\uff4a\134\373\136\uff4a\155\366\237\uff4a\241\uff4a" +
    "\001\002\000\014\044\uff4e\066\uff4e\136\uff4e\237\uff4e\241" +
    "\uff4e\001\002\000\004\010\057\001\002\000\020\037\u030d" +
    "\044\uff51\066\uff51\073\uff51\136\uff51\237\uff51\241\uff51\001" +
    "\002\000\016\044\uff54\066\uff54\073\uff54\136\uff54\237\uff54" +
    "\241\uff54\001\002\000\004\010\057\001\002\000\020\037" +
    "\u030d\044\uff51\066\uff51\073\uff51\136\uff51\237\uff51\241\uff51" +
    "\001\002\000\016\044\uff52\066\uff52\073\uff52\136\uff52\237" +
    "\uff52\241\uff52\001\002\000\004\106\uff72\001\002\000\004" +
    "\106\uff70\001\002\000\004\010\057\001\002\000\010\010" +
    "\u0316\126\uff7a\240\u0314\001\002\000\006\010\u031f\013\u031d" +
    "\001\002\000\004\126\u0317\001\002\000\040\037\uff7b\044" +
    "\uff7b\066\uff7b\071\uff7b\073\uff7b\103\uff7b\106\uff7b\111\uff7b" +
    "\126\uff7b\136\uff7b\144\uff7b\165\uff7b\237\uff7b\241\uff7b\247" +
    "\uff7b\001\002\000\004\010\057\001\002\000\004\031\u0319" +
    "\001\002\000\004\010\057\001\002\000\034\044\uff76\066" +
    "\uff76\071\uff76\073\uff76\103\u02b1\106\uff71\111\u02b0\136\uff76" +
    "\144\uff76\165\u02b2\237\uff76\241\uff76\247\u02b4\001\002\000" +
    "\022\044\uff6e\066\uff6e\071\uff6e\073\uff6e\136\uff6e\144\uff6e" +
    "\237\uff6e\241\uff6e\001\002\000\022\044\uff77\066\uff77\071" +
    "\uff77\073\uff77\136\uff77\144\uff77\237\uff77\241\uff77\001\002" +
    "\000\042\037\uff79\044\uff79\066\uff79\070\uff79\071\uff79\073" +
    "\uff79\103\uff79\106\uff79\111\uff79\126\uff79\136\uff79\144\uff79" +
    "\165\uff79\237\uff79\241\uff79\247\uff79\001\002\000\040\037" +
    "\uff7c\044\uff7c\066\uff7c\071\uff7c\073\uff7c\103\uff7c\106\uff7c" +
    "\111\uff7c\126\uff7c\136\uff7c\144\uff7c\165\uff7c\237\uff7c\241" +
    "\uff7c\247\uff7c\001\002\000\042\037\uff78\044\uff78\066\uff78" +
    "\070\uff78\071\uff78\073\uff78\103\uff78\106\uff78\111\uff78\126" +
    "\uff78\136\uff78\144\uff78\165\uff78\237\uff78\241\uff78\247\uff78" +
    "\001\002\000\004\106\uff73\001\002\000\004\106\uff74\001" +
    "\002\000\036\037\u0324\044\uff7d\066\uff7d\071\uff7d\073\uff7d" +
    "\103\uff7d\106\uff7d\111\uff7d\136\uff7d\144\uff7d\165\uff7d\237" +
    "\uff7d\241\uff7d\247\uff7d\001\002\000\034\044\uff7f\066\uff7f" +
    "\071\uff7f\073\uff7f\103\uff7f\106\uff7f\111\uff7f\136\uff7f\144" +
    "\uff7f\165\uff7f\237\uff7f\241\uff7f\247\uff7f\001\002\000\004" +
    "\010\057\001\002\000\034\044\uff7e\066\uff7e\071\uff7e\073" +
    "\uff7e\103\uff7e\106\uff7e\111\uff7e\136\uff7e\144\uff7e\165\uff7e" +
    "\237\uff7e\241\uff7e\247\uff7e\001\002\000\010\037\uff9e\070" +
    "\uff9e\240\uff9e\001\002\000\010\037\uff80\070\uff80\240\u0339" +
    "\001\002\000\010\037\uff9f\070\uff9f\240\uff9f\001\002\000" +
    "\010\037\uff9c\070\uff9c\240\uff9c\001\002\000\004\070\uffa7" +
    "\001\002\000\010\037\uff9d\070\uff9d\240\uff9d\001\002\000" +
    "\024\020\uffb0\021\uffb0\022\uffb0\023\uffb0\031\u0337\037\uffb0" +
    "\043\u02db\070\uffb0\240\uffb0\001\002\000\010\037\uff93\070" +
    "\uff93\240\uff93\001\002\000\004\010\u0330\001\002\000\010" +
    "\037\uff94\070\uff94\240\uff94\001\002\000\022\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\031\u0331\037\uffaf\070\uffaf\240\uffaf" +
    "\001\002\000\034\010\057\011\u01d6\012\u01d2\013\u032f\014" +
    "\u032d\043\u01e1\052\u01dc\162\u02d5\170\u02d6\244\u02d4\245\u02d3" +
    "\246\u02d8\321\u01d3\001\002\000\010\037\uff96\070\uff96\240" +
    "\uff96\001\002\000\010\037\uff9a\070\uff9a\240\uff9a\001\002" +
    "\000\010\037\uff97\070\uff97\240\uff97\001\002\000\010\037" +
    "\uff95\070\uff95\240\uff95\001\002\000\022\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\037\uffb0\043\u02db\070\uffb0\240\uffb0\001" +
    "\002\000\016\010\057\011\u01d6\012\u01d2\043\u01e1\052\u01dc" +
    "\321\u01d3\001\002\000\010\037\uff9b\070\uff9b\240\uff9b\001" +
    "\002\000\006\010\u031f\013\u031d\001\002\000\006\037\u033c" +
    "\070\uff98\001\002\000\004\070\uffa0\001\002\000\036\010" +
    "\057\011\u01d6\012\u01d2\013\u032f\014\u032d\022\u0329\043\u01e1" +
    "\052\u032e\162\u02d5\170\u02d6\244\u02d4\245\u02d3\246\u02d8\321" +
    "\u01d3\001\002\000\004\070\uff99\001\002\000\006\037\uff81" +
    "\070\uff81\001\002\000\046\002\ufffe\003\030\102\024\110" +
    "\040\114\041\122\010\123\034\125\014\130\013\133\042" +
    "\146\044\154\016\260\012\265\022\313\017\315\045\346" +
    "\050\351\037\001\002\000\004\002\uffec\001\002\000\014" +
    "\010\057\052\054\150\ufdde\237\ufdde\241\ufdde\001\002\000" +
    "\010\150\u0343\237\ufde6\241\ufde6\001\002\000\004\353\u0345" +
    "\001\002\000\006\237\ufdea\241\ufdea\001\002\000\010\013" +
    "\u0346\237\ufde4\241\ufde4\001\002\000\006\237\ufde5\241\ufde5" +
    "\001\002\000\006\237\ufde7\241\ufde7\001\002\000\046\002" +
    "\ufffe\003\030\102\024\110\040\114\041\122\010\123\034" +
    "\125\014\130\013\133\042\146\044\154\016\260\012\265" +
    "\022\313\017\315\045\346\050\351\037\001\002\000\004" +
    "\002\ufffb\001\002\000\046\002\ufffe\003\030\102\024\110" +
    "\040\114\041\122\010\123\034\125\014\130\013\133\042" +
    "\146\044\154\016\260\012\265\022\313\017\315\045\346" +
    "\050\351\037\001\002\000\004\002\ufff6\001\002\000\006" +
    "\237\070\241\071\001\002\000\046\002\ufffe\003\030\102" +
    "\024\110\040\114\041\122\010\123\034\125\014\130\013" +
    "\133\042\146\044\154\016\260\012\265\022\313\017\315" +
    "\045\346\050\351\037\001\002\000\004\002\ufff1\001\002" +
    "\000\006\237\ufe1e\241\ufe1e\001\002\000\006\010\u03c3\226" +
    "\u03c1\001\002\000\006\010\u03b9\061\u03b6\001\002\000\004" +
    "\010\u03a1\001\002\000\006\237\ufe1d\241\ufe1d\001\002\000" +
    "\004\010\057\001\002\000\004\010\057\001\002\000\006" +
    "\237\ufe24\241\ufe24\001\002\000\006\237\ufe1f\241\ufe1f\001" +
    "\002\000\006\010\057\240\ufe26\001\002\000\004\240\u035a" +
    "\001\002\000\006\043\u035b\102\024\001\002\000\004\102" +
    "\024\001\002\000\006\237\ufdeb\241\ufdeb\001\002\000\006" +
    "\237\ufded\241\ufded\001\002\000\004\044\u035f\001\002\000" +
    "\006\237\ufdec\241\ufdec\001\002\000\010\056\u0364\133\u0365" +
    "\154\u0362\001\002\000\006\237\ufe21\241\ufe21\001\002\000" +
    "\004\210\u039e\001\002\000\006\237\ufe0f\241\ufe0f\001\002" +
    "\000\010\010\057\067\u0371\105\u0373\001\002\000\010\101" +
    "\u0368\105\u0366\210\u0367\001\002\000\004\010\057\001\002" +
    "\000\004\010\057\001\002\000\004\010\057\001\002\000" +
    "\006\237\ufe0c\241\ufe0c\001\002\000\010\037\u036d\237\ufdee" +
    "\241\ufdee\001\002\000\006\237\ufdfc\241\ufdfc\001\002\000" +
    "\006\237\ufdf0\241\ufdf0\001\002\000\004\010\057\001\002" +
    "\000\006\237\ufdef\241\ufdef\001\002\000\006\237\ufdfd\241" +
    "\ufdfd\001\002\000\006\237\ufdfe\241\ufdfe\001\002\000\004" +
    "\174\u0395\001\002\000\006\237\ufe0a\241\ufe0a\001\002\000" +
    "\004\010\057\001\002\000\050\157\270\161\272\167\276" +
    "\171\271\172\257\215\267\216\264\217\300\230\277\231" +
    "\263\242\260\243\262\334\261\335\265\336\274\337\273" +
    "\340\256\341\275\342\255\001\002\000\010\037\252\237" +
    "\ufe6d\241\ufe6d\001\002\000\006\237\ufe0d\241\ufe0d\001\002" +
    "\000\006\237\ufe08\241\ufe08\001\002\000\026\037\ufdff\067" +
    "\u037c\076\u037b\116\u037e\120\u037f\124\u037a\166\u0380\173\u037d" +
    "\237\ufdff\241\ufdff\001\002\000\010\037\ufe07\237\ufe07\241" +
    "\ufe07\001\002\000\016\010\057\011\u010f\012\u010b\013\u010a" +
    "\014\u0110\120\u010d\001\002\000\004\043\u038d\001\002\000" +
    "\004\174\u0384\001\002\000\004\174\u0383\001\002\000\004" +
    "\120\u0382\001\002\000\010\037\ufe05\237\ufe05\241\ufe05\001" +
    "\002\000\012\037\ufe39\043\u0125\237\ufe39\241\ufe39\001\002" +
    "\000\010\037\ufe04\237\ufe04\241\ufe04\001\002\000\010\037" +
    "\ufe06\237\ufe06\241\ufe06\001\002\000\010\037\ufe03\237\ufe03" +
    "\241\ufe03\001\002\000\004\043\u0385\001\002\000\004\010" +
    "\057\001\002\000\004\044\u0387\001\002\000\004\175\u0388" +
    "\001\002\000\004\010\057\001\002\000\004\043\u038a\001" +
    "\002\000\004\010\057\001\002\000\004\044\u038c\001\002" +
    "\000\010\037\ufe02\237\ufe02\241\ufe02\001\002\000\004\011" +
    "\u038e\001\002\000\004\037\u038f\001\002\000\004\011\u0390" +
    "\001\002\000\004\044\u0391\001\002\000\010\037\ufe00\237" +
    "\ufe00\241\ufe00\001\002\000\010\037\ufe01\237\ufe01\241\ufe01" +
    "\001\002\000\022\067\330\076\317\116\326\120\323\124" +
    "\324\166\322\173\327\176\325\001\002\000\006\237\ufe0b" +
    "\241\ufe0b\001\002\000\004\043\u0396\001\002\000\004\010" +
    "\057\001\002\000\004\044\u0398\001\002\000\004\175\u0399" +
    "\001\002\000\004\010\057\001\002\000\004\043\u039b\001" +
    "\002\000\004\010\057\001\002\000\004\044\u039d\001\002" +
    "\000\006\237\ufe09\241\ufe09\001\002\000\012\010\057\067" +
    "\244\105\246\173\245\001\002\000\006\237\ufe0e\241\ufe0e" +
    "\001\002\000\006\237\ufe20\241\ufe20\001\002\000\010\150" +
    "\u03a2\237\ufdf9\241\ufdf9\001\002\000\014\120\u03a6\211\u03a5" +
    "\212\u03a9\225\u03a7\343\u03a8\001\002\000\006\237\ufdfb\241" +
    "\ufdfb\001\002\000\006\237\ufdfa\241\ufdfa\001\002\000\004" +
    "\031\u03b4\001\002\000\010\037\ufdf3\237\ufdf3\241\ufdf3\001" +
    "\002\000\004\031\u03b2\001\002\000\004\031\u03b0\001\002" +
    "\000\004\031\u03ae\001\002\000\010\037\u03ab\237\ufdf6\241" +
    "\ufdf6\001\002\000\014\120\u03a6\211\u03a5\212\u03a9\225\u03a7" +
    "\343\u03a8\001\002\000\006\237\ufdf8\241\ufdf8\001\002\000" +
    "\006\237\ufdf7\241\ufdf7\001\002\000\004\013\u03af\001\002" +
    "\000\010\037\ufdf1\237\ufdf1\241\ufdf1\001\002\000\004\010" +
    "\u03b1\001\002\000\010\037\ufdf4\237\ufdf4\241\ufdf4\001\002" +
    "\000\004\010\u03b3\001\002\000\010\037\ufdf5\237\ufdf5\241" +
    "\ufdf5\001\002\000\004\010\u03b5\001\002\000\010\037\ufdf2" +
    "\237\ufdf2\241\ufdf2\001\002\000\004\126\ufe14\001\002\000" +
    "\006\237\ufe22\241\ufe22\001\002\000\004\126\u03ba\001\002" +
    "\000\004\126\ufe15\001\002\000\004\010\057\001\002\000" +
    "\012\220\u03bc\221\u03c0\222\u03bf\223\u03be\001\002\000\006" +
    "\237\ufe13\241\ufe13\001\002\000\006\237\ufe16\241\ufe16\001" +
    "\002\000\006\237\ufe10\241\ufe10\001\002\000\006\237\ufe11" +
    "\241\ufe11\001\002\000\006\237\ufe12\241\ufe12\001\002\000" +
    "\010\107\ufe1a\224\ufe1a\345\ufe1a\001\002\000\006\237\ufe23" +
    "\241\ufe23\001\002\000\010\107\ufe1b\224\ufe1b\345\ufe1b\001" +
    "\002\000\010\107\u03c7\224\u03c8\345\u03c5\001\002\000\004" +
    "\010\u03ce\001\002\000\006\237\ufe1c\241\ufe1c\001\002\000" +
    "\004\346\u03cc\001\002\000\004\225\u03c9\001\002\000\004" +
    "\031\u03ca\001\002\000\004\010\u03cb\001\002\000\006\237" +
    "\ufe19\241\ufe19\001\002\000\004\350\u03cd\001\002\000\006" +
    "\237\ufe17\241\ufe17\001\002\000\006\237\ufe18\241\ufe18\001" +
    "\002\000\024\010\057\011\u010f\012\u010b\013\u010a\014\u0110" +
    "\052\u03d2\120\u010d\237\ufdd6\241\ufdd6\001\002\000\006\237" +
    "\ufdd9\241\ufdd9\001\002\000\010\037\u03d4\237\ufdd4\241\ufdd4" +
    "\001\002\000\004\010\u03d3\001\002\000\010\037\u03d4\237" +
    "\ufdd4\241\ufdd4\001\002\000\024\010\057\011\u010f\012\u010b" +
    "\013\u010a\014\u0110\052\u03d2\120\u010d\237\ufdd6\241\ufdd6\001" +
    "\002\000\006\237\ufdd7\241\ufdd7\001\002\000\006\237\ufdd5" +
    "\241\ufdd5\001\002\000\006\237\ufdd8\241\ufdd8\001\002\000" +
    "\006\011\u02a9\043\u02a8\001\002\000\004\070\u03da\001\002" +
    "\000\004\010\057\001\002\000\010\144\u02b7\237\uff6c\241" +
    "\uff6c\001\002\000\006\237\uff27\241\uff27\001\002\000\006" +
    "\070\uff23\142\u03df\001\002\000\004\070\uff26\001\002\000" +
    "\006\010\uff24\070\uff24\001\002\000\006\011\u02a9\043\u02a8" +
    "\001\002\000\004\010\057\001\002\000\004\107\u03e3\001" +
    "\002\000\004\010\057\001\002\000\004\031\u03e5\001\002" +
    "\000\022\010\057\011\u01d6\012\u01d2\013\u03ea\014\u03e8\043" +
    "\u01e1\052\u01dc\321\u01d3\001\002\000\012\037\u03ed\144\uff2d" +
    "\237\uff2d\241\uff2d\001\002\000\010\144\u02b7\237\uff6c\241" +
    "\uff6c\001\002\000\012\037\uff2c\144\uff2c\237\uff2c\241\uff2c" +
    "\001\002\000\012\037\uff2a\144\uff2a\237\uff2a\241\uff2a\001" +
    "\002\000\012\037\uff2b\144\uff2b\237\uff2b\241\uff2b\001\002" +
    "\000\006\237\uff30\241\uff30\001\002\000\010\144\uff2f\237" +
    "\uff2f\241\uff2f\001\002\000\004\010\057\001\002\000\004" +
    "\031\u03ef\001\002\000\022\010\057\011\u01d6\012\u01d2\013" +
    "\u03ea\014\u03e8\043\u01e1\052\u01dc\321\u01d3\001\002\000\010" +
    "\144\uff2e\237\uff2e\241\uff2e\001\002\000\006\010\uff23\142" +
    "\u03df\001\002\000\004\010\uff29\001\002\000\046\002\ufffe" +
    "\003\030\102\024\110\040\114\041\122\010\123\034\125" +
    "\014\130\013\133\042\146\044\154\016\260\012\265\022" +
    "\313\017\315\045\346\050\351\037\001\002\000\004\002" +
    "\ufffa\001\002\000\004\010\057\001\002\000\006\237\uffac" +
    "\241\uffac\001\002\000\046\002\ufffe\003\030\102\024\110" +
    "\040\114\041\122\010\123\034\125\014\130\013\133\042" +
    "\146\044\154\016\260\012\265\022\313\017\315\045\346" +
    "\050\351\037\001\002\000\004\002\ufff3\001\002\000\046" +
    "\002\ufffe\003\030\102\024\110\040\114\041\122\010\123" +
    "\034\125\014\130\013\133\042\146\044\154\016\260\012" +
    "\265\022\313\017\315\045\346\050\351\037\001\002\000" +
    "\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03f8\000\052\002\042\003\026\004\005\017\030\022" +
    "\003\026\025\070\046\102\032\107\022\112\020\113\010" +
    "\114\024\116\017\117\045\120\034\160\014\205\006\217" +
    "\004\352\031\373\035\001\001\000\002\001\001\000\004" +
    "\005\u03f8\001\001\000\002\001\001\000\004\005\u03f6\001" +
    "\001\000\002\001\001\000\004\005\u03f2\001\001\000\002" +
    "\001\001\000\004\106\u03e0\001\001\000\004\110\u03d8\001" +
    "\001\000\004\006\u03ce\001\001\000\012\144\u034e\166\u0352" +
    "\304\u0355\366\u0194\001\001\000\004\006\u034b\001\001\000" +
    "\004\005\u0349\001\001\000\004\005\u0347\001\001\000\004" +
    "\353\u0340\001\001\000\004\005\u033e\001\001\000\006\027" +
    "\u02a5\030\u02a3\001\001\000\004\005\u02a0\001\001\000\004" +
    "\005\u029e\001\001\000\002\001\001\000\004\005\u029c\001" +
    "\001\000\004\005\u029a\001\001\000\004\005\u0298\001\001" +
    "\000\004\005\u0296\001\001\000\002\001\001\000\004\005" +
    "\u0271\001\001\000\004\005\u026f\001\001\000\004\353\u026d" +
    "\001\001\000\004\071\u024e\001\001\000\010\220\160\221" +
    "\161\243\170\001\001\000\016\122\113\124\117\125\124" +
    "\130\125\340\120\344\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\353\077\363\076\001\001\000\004" +
    "\005\074\001\001\000\004\005\066\001\001\000\004\353" +
    "\051\001\001\000\002\001\001\000\006\006\055\364\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\073\004\005\017\030\022\003\026" +
    "\025\070\046\102\032\107\022\112\020\113\010\114\024" +
    "\116\017\117\045\120\034\160\014\205\006\217\004\352" +
    "\031\373\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\003\075\004\005\017\030\022\003\026\025\070\046" +
    "\102\032\107\022\112\020\113\010\114\024\116\017\117" +
    "\045\120\034\160\014\205\006\217\004\352\031\373\035" +
    "\001\001\000\002\001\001\000\004\365\101\001\001\000" +
    "\006\006\055\364\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\204\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\150\001\001\000\004" +
    "\123\142\001\001\000\004\123\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\123\136\001\001\000\004" +
    "\123\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\132\020\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\133\001\001\000\002\001\001\000\006\006\132\020\135" +
    "\001\001\000\002\001\001\000\004\006\137\001\001\000" +
    "\002\001\001\000\004\006\141\001\001\000\002\001\001" +
    "\000\006\006\144\126\143\001\001\000\002\001\001\000" +
    "\004\127\145\001\001\000\002\001\001\000\006\006\144" +
    "\126\147\001\001\000\002\001\001\000\006\006\152\131" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\154\001\001\000\004\132\155\001\001\000\002\001" +
    "\001\000\006\006\152\131\157\001\001\000\002\001\001" +
    "\000\012\144\u0197\166\u0193\222\u0199\366\u0194\001\001\000" +
    "\002\001\001\000\006\006\u015e\223\u015f\001\001\000\004" +
    "\271\u0149\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\240\251\241\001\001\000\006\006\221\300\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\176\244\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\200\001" +
    "\001\000\002\001\001\000\010\006\203\245\204\247\202" +
    "\001\001\000\004\246\216\001\001\000\004\343\215\001" +
    "\001\000\002\001\001\000\004\250\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\203\245\211\247" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\203\245\220\247\202\001\001\000\002" +
    "\001\001\000\010\006\223\301\225\302\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\223\302\235" +
    "\303\234\001\001\000\002\001\001\000\006\026\230\334" +
    "\231\001\001\000\004\026\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\223\301\237" +
    "\302\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\247\252\246\253\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\255\265\001\001\000\004\254\252" +
    "\001\001\000\010\006\247\252\253\253\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\256\317\257\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\256\u0128\257\320\260\u0129\001\001\000\004\347\u0125" +
    "\001\001\000\002\001\001\000\006\006\u010b\016\u0123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\335" +
    "\001\001\000\002\001\001\000\004\006\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\262\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\261\346\001" +
    "\001\000\004\263\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\067\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\264\355\001\001\000\004\263\356" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\363\265\362\266\364" +
    "\001\001\000\002\001\001\000\004\057\375\001\001\000" +
    "\006\056\370\267\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\363\265\373\266" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u010b\016\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u011a\342" +
    "\u0115\377\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\341\u011d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\u011a\342\u011f" +
    "\377\u0113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\u011a\342\u0126\377\u0113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\270\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\257\u013c\001\001" +
    "\000\002\001\001\000\004\262\u013e\001\001\000\004\261" +
    "\u013f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u0142\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0145\001\001\000\002\001\001\000\004\006\u0147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\272\u014e\273\u014d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\274\u0150\001" +
    "\001\000\006\276\u0152\277\u0153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\275\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\276\u0159\277\u0153\001\001\000" +
    "\002\001\001\000\004\204\u015b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\224\u0160\001" +
    "\001\000\002\001\001\000\004\336\u0190\001\001\000\004" +
    "\225\u0163\001\001\000\002\001\001\000\004\226\u0165\001" +
    "\001\000\004\230\u0167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\231\u016d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\233\u0171\001\001\000\002\001\001\000\012" +
    "\234\u0174\235\u0176\237\u0173\241\u0175\001\001\000\002\001" +
    "\001\000\006\232\u018b\233\u018a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\236\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\240\u0182\001\001" +
    "\000\002\001\001\000\004\236\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\236\u0188\242\u0187\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\227\u018e\001\001" +
    "\000\004\226\u018f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0192\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0215\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u019a\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\167\u019e\170\u019d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\346" +
    "\u01a2\001\001\000\002\001\001\000\004\174\u01b4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\172\u01c8\001\001\000\006\175\u01bc" +
    "\177\u01b6\001\001\000\004\176\u01c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\200\u01c0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\204" +
    "\u01be\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\200" +
    "\u01c4\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\175\u01c7\177\u01b6\001\001\000\002\001\001\000\004\201" +
    "\u01cb\001\001\000\002\001\001\000\010\026\u01cc\202\u01cf" +
    "\u0103\u01cd\001\001\000\002\001\001\000\004\005\u0204\001" +
    "\001\000\002\001\001\000\012\006\u01dc\011\u01d8\142\u01d4" +
    "\203\u01d9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\134\u0201\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\u01dc\011\u01e1\142\u01d4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\u01dc\011\u01e1\142\u01d4\001\001\000" +
    "\004\141\u01e5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\134\u01e8\001\001\000\010\006" +
    "\u01dc\011\u01fe\142\u01d4\001\001\000\010\006\u01dc\011\u01fd" +
    "\142\u01d4\001\001\000\002\001\001\000\010\006\u01dc\136" +
    "\u01fb\142\u01ec\001\001\000\010\006\u01dc\136\u01eb\142\u01ec" +
    "\001\001\000\004\135\u01f8\001\001\000\004\137\u01f5\001" +
    "\001\000\010\006\u01dc\011\u01ee\142\u01d4\001\001\000\004" +
    "\141\u01ef\001\001\000\004\137\u01f0\001\001\000\002\001" +
    "\001\000\010\006\u01dc\136\u01f4\142\u01ec\001\001\000\010" +
    "\006\u01dc\136\u01f3\142\u01ec\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\u01dc\011\u01fa" +
    "\142\u01d4\001\001\000\010\006\u01dc\011\u01f9\142\u01d4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\135\u01fc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\202\u0205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\172\u020b\001\001\000\004\346\u020c\001\001\000\004" +
    "\151\u020e\001\001\000\002\001\001\000\004\173\u020f\001" +
    "\001\000\004\171\u0211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\170\u0213\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\145\u0216\001\001\000\004\146\u021a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\154\u021c\001\001\000\010\155\u0232\156\u0230" +
    "\160\u0231\001\001\000\004\162\u021e\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\163\u0221\001\001\000\016" +
    "\026\u0225\070\u0222\102\u0224\107\u0223\143\u0226\164\u0227\001" +
    "\001\000\002\001\001\000\004\005\u022e\001\001\000\004" +
    "\005\u022d\001\001\000\004\005\u022c\001\001\000\004\005" +
    "\u022b\001\001\000\020\026\u0225\070\u0222\102\u0224\107\u0223" +
    "\143\u0226\164\u022a\165\u0229\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\157\u023b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\161\u023a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\155\u023d\156\u0230\160\u0231" +
    "\001\001\000\002\001\001\000\006\147\u023f\346\u0242\001" +
    "\001\000\004\153\u024c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\151\u0243\001\001\000\006\150\u0244\152" +
    "\u0247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\150" +
    "\u024a\001\001\000\002\001\001\000\004\146\u024d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0250\001" +
    "\001\000\002\001\001\000\004\072\u0252\001\001\000\004" +
    "\073\u0267\001\001\000\004\075\u0255\001\001\000\002\001" +
    "\001\000\004\076\u0257\001\001\000\002\001\001\000\006" +
    "\100\u0258\345\u025b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\u0260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\100\u0261\345\u025b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\077\u0263\001\001\000\002\001" +
    "\001\000\004\076\u0265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\u0269\001\001\000" +
    "\002\001\001\000\004\073\u026b\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\055\364\u026e\001\001\000" +
    "\002\001\001\000\050\003\u0270\004\005\017\030\022\003" +
    "\026\025\070\046\102\032\107\022\112\020\113\010\114" +
    "\024\116\017\117\045\120\034\160\014\205\006\217\004" +
    "\352\031\373\035\001\001\000\002\001\001\000\050\003" +
    "\u0272\004\005\017\030\022\003\026\025\070\046\102\032" +
    "\107\022\112\020\113\010\114\024\116\017\117\045\120" +
    "\034\160\014\205\006\217\004\352\031\373\035\001\001" +
    "\000\002\001\001\000\004\u0101\u0274\001\001\000\004\u0102" +
    "\u0276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\206\u027b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\207\u027d\001\001\000\002\001\001" +
    "\000\004\210\u0281\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\211\u0284\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\212\u0288\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u028b\001\001\000" +
    "\004\213\u028c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\214\u028f\001\001\000\002\001\001\000\004\215" +
    "\u0291\001\001\000\002\001\001\000\004\216\u0293\001\001" +
    "\000\002\001\001\000\004\215\u0295\001\001\000\002\001" +
    "\001\000\050\003\u0297\004\005\017\030\022\003\026\025" +
    "\070\046\102\032\107\022\112\020\113\010\114\024\116" +
    "\017\117\045\120\034\160\014\205\006\217\004\352\031" +
    "\373\035\001\001\000\002\001\001\000\050\003\u0299\004" +
    "\005\017\030\022\003\026\025\070\046\102\032\107\022" +
    "\112\020\113\010\114\024\116\017\117\045\120\034\160" +
    "\014\205\006\217\004\352\031\373\035\001\001\000\002" +
    "\001\001\000\050\003\u029b\004\005\017\030\022\003\026" +
    "\025\070\046\102\032\107\022\112\020\113\010\114\024" +
    "\116\017\117\045\120\034\160\014\205\006\217\004\352" +
    "\031\373\035\001\001\000\002\001\001\000\050\003\u029d" +
    "\004\005\017\030\022\003\026\025\070\046\102\032\107" +
    "\022\112\020\113\010\114\024\116\017\117\045\120\034" +
    "\160\014\205\006\217\004\352\031\373\035\001\001\000" +
    "\002\001\001\000\050\003\u029f\004\005\017\030\022\003" +
    "\026\025\070\046\102\032\107\022\112\020\113\010\114" +
    "\024\116\017\117\045\120\034\160\014\205\006\217\004" +
    "\352\031\373\035\001\001\000\002\001\001\000\050\003" +
    "\u02a1\004\005\017\030\022\003\026\025\070\046\102\032" +
    "\107\022\112\020\113\010\114\024\116\017\117\045\120" +
    "\034\160\014\205\006\217\004\352\031\373\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\u032b\011" +
    "\u032a\032\u0329\033\u0326\035\u0327\036\u0325\142\u01d4\371\u02d1" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u02a9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u02ad\041\u02ae\001\001\000\004\043\u0321\001\001\000\006" +
    "\046\u02b4\047\u02b2\001\001\000\004\050\u0320\001\001\000" +
    "\002\001\001\000\004\050\u031f\001\001\000\002\001\001" +
    "\000\004\050\u030f\001\001\000\004\052\u02b5\001\001\000" +
    "\004\060\u02cb\001\001\000\004\006\u02b7\001\001\000\006" +
    "\053\u02b9\057\u02ba\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\u011a\377\u02bf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\u02c0\056\u02c1\001\001\000\002\001\001\000\006" +
    "\006\u02c2\055\u02c3\001\001\000\004\057\u02c4\001\001\000" +
    "\002\001\001\000\006\006\u011a\377\u02c5\001\001\000\006" +
    "\054\u02c6\056\u02c1\001\001\000\002\001\001\000\010\006" +
    "\u011a\342\u02c8\377\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\u02cd\001\001\000" +
    "\012\006\u0300\036\u02ff\063\u02fe\371\u02d1\001\001\000\004" +
    "\065\u02cf\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\u02d8\036\u02d6\337\u02d9\371\u02d1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\u02f0\001\001\000\002" +
    "\001\001\000\004\067\u02db\001\001\000\002\001\001\000" +
    "\012\006\u010b\016\u02e3\370\u02e2\376\u02e0\001\001\000\004" +
    "\066\u02dd\001\001\000\004\006\u02de\001\001\000\002\001" +
    "\001\000\004\066\u02df\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\367" +
    "\u02e5\001\001\000\010\006\u010b\016\u02e3\370\u02e6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\u02eb\040\u02ea\001\001\000\002\001\001\000\004" +
    "\006\u02ef\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\u02f1\001\001\000\002\001\001\000\006\037\u02f3\040" +
    "\u02ea\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\u02f6\040\u02ea\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\u02f9\040\u02ea\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\u02fc\040\u02ea\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\u0306\001\001\000\004\057\u0301\001\001\000\006\006" +
    "\u010b\016\u0302\001\001\000\006\056\u0303\064\u0304\001\001" +
    "\000\012\006\u0300\036\u02ff\063\u0305\371\u02d1\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u011a\377\u0307" +
    "\001\001\000\006\056\u0303\064\u0308\001\001\000\002\001" +
    "\001\000\004\006\u030a\001\001\000\004\061\u030b\001\001" +
    "\000\002\001\001\000\004\006\u030d\001\001\000\004\061" +
    "\u030e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0312\001\001\000\004\043\u0314\001" +
    "\001\000\004\045\u031d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u0317\001\001\000\002\001\001\000" +
    "\004\006\u0319\001\001\000\010\046\u031a\047\u02b2\051\u031b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\u0322\001\001\000\002\001" +
    "\001\000\006\006\u02ad\041\u0324\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\u0339\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\u0335\011\u0334" +
    "\035\u0333\036\u0331\142\u01d4\371\u02d1\u0100\u0332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\u01dc\011\u0337\142" +
    "\u01d4\001\001\000\002\001\001\000\004\045\u033d\001\001" +
    "\000\004\034\u033a\001\001\000\002\001\001\000\022\006" +
    "\u032b\011\u032a\032\u033c\033\u0326\035\u0327\036\u0325\142\u01d4" +
    "\371\u02d1\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\003\u033f\004\005\017\030\022\003\026\025\070\046" +
    "\102\032\107\022\112\020\113\010\114\024\116\017\117" +
    "\045\120\034\160\014\205\006\217\004\352\031\373\035" +
    "\001\001\000\002\001\001\000\006\006\055\364\u0341\001" +
    "\001\000\004\355\u0343\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\356\u0346\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\u0348\004\005\017\030\022\003" +
    "\026\025\070\046\102\032\107\022\112\020\113\010\114" +
    "\024\116\017\117\045\120\034\160\014\205\006\217\004" +
    "\352\031\373\035\001\001\000\002\001\001\000\050\003" +
    "\u034a\004\005\017\030\022\003\026\025\070\046\102\032" +
    "\107\022\112\020\113\010\114\024\116\017\117\045\120" +
    "\034\160\014\205\006\217\004\352\031\373\035\001\001" +
    "\000\002\001\001\000\004\005\u034c\001\001\000\050\003" +
    "\u034d\004\005\017\030\022\003\026\025\070\046\102\032" +
    "\107\022\112\020\113\010\114\024\116\017\117\045\120" +
    "\034\160\014\205\006\217\004\352\031\373\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\305\u03c1\306" +
    "\u03c3\001\001\000\006\310\u03b6\311\u03b7\001\001\000\004" +
    "\323\u039f\001\001\000\002\001\001\000\006\006\u035f\314" +
    "\u0360\001\001\000\006\006\u0357\327\u0356\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\223\302\235\303" +
    "\u0358\001\001\000\002\001\001\000\006\026\u035b\333\u035c" +
    "\001\001\000\004\026\u035d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\315\u0362\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\u0373\316\u0375\317\u0371\320\u0374" +
    "\001\001\000\004\322\u0368\001\001\000\006\006\u0369\350" +
    "\u036f\001\001\000\006\006\u0369\350\u036e\001\001\000\006" +
    "\006\u0369\350\u036a\001\001\000\002\001\001\000\004\351" +
    "\u036b\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\u0369\350\u036d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0392\001\001\000\004\255\u0377\001\001\000" +
    "\004\254\u0376\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\321\u0378\001\001\000\002\001\001\000\006\006" +
    "\u010b\016\u0391\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\347\u0380\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0385\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0388" +
    "\001\001\000\002\001\001\000\004\006\u038a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\257\u0393\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0396\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0399\001\001" +
    "\000\002\001\001\000\004\006\u039b\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\247\253\u039e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\335\u03a2\001" +
    "\001\000\006\324\u03a3\325\u03a9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\326\u03ab\001\001\000\006\324\u03ac\325\u03a9\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u03ba\001\001\000\004\313\u03bc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\307\u03c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\u010b\016\u03d0\374\u03cf\001\001\000" +
    "\002\001\001\000\004\375\u03d6\001\001\000\002\001\001" +
    "\000\004\375\u03d4\001\001\000\010\006\u010b\016\u03d0\374" +
    "\u03d5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u03dc\001\001\000\002\001\001\000" +
    "\004\006\u03da\001\001\000\004\052\u03db\001\001\000\002" +
    "\001\001\000\004\111\u03dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u03f0\001\001\000\004\006\u03e1" +
    "\001\001\000\002\001\001\000\004\006\u03e3\001\001\000" +
    "\002\001\001\000\014\006\u01dc\011\u03e8\103\u03e6\105\u03e5" +
    "\142\u01d4\001\001\000\004\104\u03eb\001\001\000\004\052" +
    "\u03ea\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u03ed\001\001\000\002\001\001\000\014\006\u01dc\011\u03e8" +
    "\103\u03ef\105\u03e5\142\u01d4\001\001\000\002\001\001\000" +
    "\004\111\u03f1\001\001\000\002\001\001\000\050\003\u03f3" +
    "\004\005\017\030\022\003\026\025\070\046\102\032\107" +
    "\022\112\020\113\010\114\024\116\017\117\045\120\034" +
    "\160\014\205\006\217\004\352\031\373\035\001\001\000" +
    "\002\001\001\000\006\006\132\020\u03f5\001\001\000\002" +
    "\001\001\000\050\003\u03f7\004\005\017\030\022\003\026" +
    "\025\070\046\102\032\107\022\112\020\113\010\114\024" +
    "\116\017\117\045\120\034\160\014\205\006\217\004\352" +
    "\031\373\035\001\001\000\002\001\001\000\050\003\u03f9" +
    "\004\005\017\030\022\003\026\025\070\046\102\032\107" +
    "\022\112\020\113\010\114\024\116\017\117\045\120\034" +
    "\160\014\205\006\217\004\352\031\373\035\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private Symbol s;
    
    

    public Symbol getS(){
        return this.s;
}
    public final Class getSymbolContainer() {
    return sym.class;
}
     public String symbl_name_from_id(int id){
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "invalid symbol id";
  }

    public void syntax_error(Symbol s){
  this.s=s; 
 List<Integer> ids = expected_token_ids();
	  LinkedList<String> list = new LinkedList<String>();
	  for (Integer expected : ids){
		  list.add(symbl_name_from_id(expected));
                  list.add("\n");
}
       Interfaz.guardar_salidas("Linea: "+(s.right+1)+"  Columna: "+(s.left+1)+" , el error lo provoco el simbolo: "+ s.value +", Error recuperable: se esperaban los siguientes tokens: "+list+"\n\n" );
   
  }

   public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

protected static final int _error_sync_size(){
return 1;
}

 private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  /* parse until we fail or get past the lookahead input */
		  for (;;)
		  {
			  /* look up the action from the current state (on top of stack) */
			  act = get_action(vstack.top(), id);

			  /* if its an error, we fail */
			  if (act == 0) return false;

			  /* > 0 encodes a shift */
			  if (act > 0)
			  {
				  /* push the new state on the stack */
				  vstack.push(act-1);

				  /* advance simulated input, if we run off the end, we are done */
				  if (!advance_lookahead()) return true;
			  }
			  /* < 0 encodes a reduce */
			  else
			  {
				  /* if this is a reduce with the start production we are done */
				  if ((-act)-1 == start_production())  return true;

				  /* get the lhs Symbol and the rhs size */
				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  /* pop handle off the stack */
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }


    
    

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
          List<Integer> ids = new LinkedList<>();
                 ids=expected_token_ids();
	  LinkedList<String> list = new LinkedList<String>();
	  for (Integer expected : ids){
		  list.add(symbl_name_from_id(expected));
                  list.add("\n");
}

        

       Interfaz.guardar_salidas("Linea: "+(s.right+1)+"  Columna: "+(s.left+1)+" , el error lo provoco el simbolo: "+ s.value +", Error NO recuperable: se esperaban los siguientes tokens: "+list+"\n\n" );
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // num_list2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_list2",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // num_list2 ::= coma num_list3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_list2",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // num_list3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_list3",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // num_list3 ::= arroba Identificador num_list2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_list3",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // num_list3 ::= data_tipo num_list2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_list3",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // execute ::= clause_exc obj_n num_list3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("execute",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // savepoint ::= SAVE T2 T6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("savepoint",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // rollback ::= ROLLBACK T2 T6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("rollback",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // T7 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T7",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // T7 ::= WITH parentesis_izquierdo DELAYED_DURABILITY igual on_off parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T7",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // T6 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T6",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // T6 ::= arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T6",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // T6 ::= obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T6",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // T5 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T5",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // T5 ::= T2 T6 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T5",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // commit ::= COMMIT T5 T7 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("commit",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // T4 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T4",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // T4 ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T4",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // T3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // T3 ::= WITH MARK T4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T3",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // T2 ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T2",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // T2 ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T2",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // transaction ::= BEGIN T2 T6 T3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("transaction",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // view_alter2 ::= selec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("view_alter2",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // view_alter2 ::= parentesis_izquierdo selec parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("view_alter2",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // view_alter ::= obj_n column_view2 AS view_alter2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("view_alter",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // drop_col_varios1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_col_varios1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // drop_col_varios1 ::= coma drop_col_varios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_col_varios1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // drop_col_varios ::= obj_n drop_col_varios1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_col_varios",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // set_item1 ::= PASSWORD igual String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item1",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // set_item1 ::= LOGIN igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item1",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // set_item1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item1",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // set_item1 ::= DEFAULT_SCHEMA igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item1",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // set_item1 ::= NAME igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item1",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // set_item2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item2",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // set_item2 ::= coma set_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item2",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // set_item ::= set_item1 set_item2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("set_item",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // opcion_set_item ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opcion_set_item",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // opcion_set_item ::= WITH set_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opcion_set_item",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // user_alter ::= Identificador opcion_set_item 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("user_alter",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // drop_column ::= INDEX drop_col_varios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_column",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // drop_column ::= COLUMN drop_col_varios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_column",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // drop_column ::= CONSTRAINT drop_col_varios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_column",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // constraint32 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // constraint32 ::= IDENTITY parentesis_izquierdo Int coma Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // constraint32 ::= DEFAULT data_tipo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // constraint32 ::= FOREIGN KEY parentesis_izquierdo obj_n parentesis_derecho REFERENCES obj_n parentesis_izquierdo obj_n parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // constraint32 ::= PRIMARY KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // constraint32 ::= UNIQUE op_unique 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // constraint32 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // constraint32 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint32",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // add_column4 ::= obj_n tipo_dato constraint32 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column4",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // add_column22 ::= add_column4 add_column2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column22",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // tipo_add ::= FOREIGN KEY parentesis_izquierdo obj_n parentesis_derecho REFERENCES obj_n parentesis_izquierdo obj_n parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_add",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // tipo_add ::= add_column22 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_add",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // tipo_add ::= CONSTRAINT obj_n constraint1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_add",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // accion_alter ::= DROP drop_column 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("accion_alter",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // accion_alter ::= ADD tipo_add 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("accion_alter",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // accion_alter ::= ALTER COLUMN add_column1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("accion_alter",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // table ::= obj_n accion_alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("table",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // accion_index ::= USABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("accion_index",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // accion_index ::= UNUSABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("accion_index",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // accion_index ::= REBUILD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("accion_index",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // accion_index ::= DISABLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("accion_index",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // nombre_index ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_index",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // nombre_index ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_index",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // index ::= nombre_index ON obj_n accion_index 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("index",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // tipo_alter_base ::= SET ROLLBACK INMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // tipo_alter_base ::= COLLATE Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // tipo_alter_base ::= MODIFY NAME igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_alter_base",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // nombre_actual ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_actual",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // nombre_actual ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("nombre_actual",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // database ::= nombre_actual tipo_alter_base 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("database",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // opciones ::= function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // opciones ::= procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // opciones ::= VIEW view_alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // opciones ::= USER user_alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // opciones ::= TABLE table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // opciones ::= INDEX index 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // opciones ::= DATABASE database 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // alte ::= ALTER opciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alte",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // column_view1 ::= obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_view1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // column_view2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_view2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // column_view2 ::= column_view1 coma column_view 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_view2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // column_view ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_view",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // column_view ::= column_view1 column_view2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_view",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // view_create2 ::= selec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("view_create2",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // view_create2 ::= parentesis_izquierdo selec parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("view_create2",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // view_create ::= obj_n column_view AS view_create2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("view_create",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // option_user ::= ALLOW_ENCRYPTED_VALUE_MODIFICATIONS igual on_off 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("option_user",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // option_user ::= DEFAULT_SCHEMA igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("option_user",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // limited_options1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("limited_options1",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // limited_options1 ::= coma limited_options 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("limited_options1",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // limited_options ::= option_user limited_options1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("limited_options",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // with_user ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("with_user",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // with_user ::= WITH limited_options 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("with_user",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // for_from ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_from",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // for_from ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_from",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // for_user ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_user",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // for_user ::= for_from LOGIN Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_user",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // user_create ::= Identificador for_user with_user 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("user_create",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // op_unique ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_unique",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // op_unique ::= parentesis_izquierdo objetos_separados_por_comas parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("op_unique",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // primary2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("primary2",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // primary2 ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("primary2",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // expresion_logica1 ::= obj_n IN parentesis_izquierdo objetos_separados_por_comas parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica1",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // expresion_logica1 ::= obj_n operadores data_tipo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica1",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // expresion_logica2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica2",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // expresion_logica2 ::= operadores_logicos expresion_logica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica2",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // expresion_logica ::= expresion_logica1 expresion_logica2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_logica",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // list_Identificador2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("list_Identificador2",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // list_Identificador2 ::= coma list_Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("list_Identificador2",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // list_Identificador ::= Identificador tipo_orden list_Identificador2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("list_Identificador",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // constraint4 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint4",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // constraint4 ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint4",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // constraint4 ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint4",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // constraint3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint3",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // constraint3 ::= parentesis_izquierdo list_Identificador parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint3",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // constraint1 ::= IDENTITY parentesis_izquierdo Int coma Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // constraint1 ::= DEFAULT data_tipo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // constraint1 ::= CHECK parentesis_izquierdo expresion_logica parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // constraint1 ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // constraint1 ::= FOREIGN KEY parentesis_izquierdo obj_n parentesis_derecho REFERENCES obj_n parentesis_izquierdo obj_n parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // constraint1 ::= PRIMARY KEY constraint4 constraint3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // constraint1 ::= UNIQUE op_unique 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // constraint1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint1",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // constraint2 ::= constraint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint2",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // constraint ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // constraint ::= constraint1 constraint2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("constraint",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // tipo_dato ::= NUMERIC parentesis_izquierdo Int coma Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // tipo_dato ::= DECIMAL parentesis_izquierdo Int coma Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // tipo_dato ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // tipo_dato ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // tipo_dato ::= FLOAT parentesis_izquierdo Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // tipo_dato ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // tipo_dato ::= DATETIMEOFFSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // tipo_dato ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // tipo_dato ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // tipo_dato ::= SMALLDATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // tipo_dato ::= DATETIME2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // tipo_dato ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // tipo_dato ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // tipo_dato ::= VARBINARY parentesis_izquierdo MAX parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // tipo_dato ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // tipo_dato ::= IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // tipo_dato ::= TEXT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // tipo_dato ::= VARCHAR parentesis_izquierdo Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // tipo_dato ::= CHAR parentesis_izquierdo Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_dato",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // add_column1 ::= FOREIGN KEY parentesis_izquierdo obj_n parentesis_derecho REFERENCES obj_n parentesis_izquierdo obj_n parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column1",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // add_column1 ::= PRIMARY KEY constraint4 constraint3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column1",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // add_column1 ::= CONSTRAINT Identificador constraint1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column1",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // add_column1 ::= obj_n tipo_dato constraint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column1",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // add_column2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column2",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // add_column2 ::= coma add_column 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column2",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // add_column ::= add_column1 add_column2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("add_column",168, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // table_create ::= obj_n parentesis_izquierdo add_column parentesis_derecho primary2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("table_create",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // mas_index ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mas_index",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // mas_index ::= INCLUDE parentesis_izquierdo column_index parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mas_index",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // orden_index ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden_index",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // orden_index ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden_index",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // orden_index ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden_index",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // column_index1 ::= obj_n orden_index 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_index1",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // column_index2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_index2",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // column_index2 ::= coma column_index 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_index2",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // column_index ::= column_index1 column_index2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_index",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // index_create ::= obj_n ON obj_n parentesis_izquierdo column_index parentesis_derecho mas_index 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("index_create",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // opciones_index ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_index",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // opciones_index ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_index",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // opciones_index ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_index",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // opciones_index ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_index",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // filegrowth1 ::= modular 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filegrowth1",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // filegrowth1 ::= size1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filegrowth1",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // filegrowth ::= FILEGROWTH igual Int filegrowth1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filegrowth",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // maxsize1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("maxsize1",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // maxsize1 ::= Int size1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("maxsize1",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // maxsize ::= MAXSIZE igual maxsize1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("maxsize",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // size1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("size1",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // size1 ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("size1",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // size1 ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("size1",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // size1 ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("size1",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // size1 ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("size1",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // size ::= SIZE igual Int size1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("size",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // optional1 ::= optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("optional1",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // optional ::= filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("optional",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // optional ::= maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("optional",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // optional ::= size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("optional",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("optionals",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // optionals ::= coma optional optional1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("optionals",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // filename ::= FILENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filename",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // filename ::= FILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filename",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // names ::= NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("names",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // names ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("names",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // filespec2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filespec2",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // filespec2 ::= coma filespec1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filespec2",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // filespec1 ::= parentesis_izquierdo names igual String coma filename igual String optionals parentesis_derecho filespec2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("filespec1",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("primary",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("primary",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // collate_op ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("collate_op",220, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // collate_op ::= COLLATE obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("collate_op",220, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // db_create ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("db_create",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // db_create ::= ON primary filespec1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("db_create",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // database_create ::= obj_n db_create collate_op 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("database_create",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // func_proc ::= function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("func_proc",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // func_proc ::= procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("func_proc",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // opciones_crear ::= VIEW view_create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_crear",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // opciones_crear ::= USER user_create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_crear",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // opciones_crear ::= TABLE table_create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_crear",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // opciones_crear ::= opciones_index INDEX index_create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_crear",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // opciones_crear ::= DATABASE database_create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_crear",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // porsiacaso ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("porsiacaso",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // porsiacaso ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("porsiacaso",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // create_f_sp ::= CREATE porsiacaso func_proc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("create_f_sp",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // create ::= CREATE opciones_crear 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("create",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // column_list1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_list1",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // column_list1 ::= coma column_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_list1",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // column_list ::= Identificador column_list1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("column_list",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // for_update1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_update1",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // for_update1 ::= OF column_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_update1",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // for_update ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_update",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // for_update ::= FOR UPDATE for_update1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_update",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // cursor5 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor5",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // cursor5 ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor5",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // cursor4 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor4",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // cursor4 ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor4",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // cursor4 ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor4",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // cursor4 ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor4",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // cursor3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor3",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // cursor3 ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor3",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // cursor3 ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor3",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // cursor3 ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor3",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // cursor3 ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor3",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // cursor2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor2",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // cursor2 ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor2",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // cursor2 ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor2",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // cursor1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor1",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // cursor1 ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor1",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // cursor1 ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor1",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // insensitive ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("insensitive",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // insensitive ::= INSENSITIVE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("insensitive",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // scroll ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("scroll",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // scroll ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("scroll",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // cursor ::= DECLARE Identificador insensitive scroll CURSOR cursor1 cursor2 cursor3 cursor4 cursor5 FOR selec for_update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("cursor",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // on_off ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("on_off",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // on_off ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("on_off",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // tipo_retorno ::= parentesis_izquierdo NULL parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // tipo_retorno ::= parentesis_izquierdo Bool parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // tipo_retorno ::= parentesis_izquierdo String parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // tipo_retorno ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // tipo_retorno ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // tipo_retorno ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // tipo_retorno ::= aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // return ::= RETURN tipo_retorno 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("return",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtFun1 ::= return END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("stmtFun1",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtFun1 ::= selec FINALIZADORES return END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("stmtFun1",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtFun ::= BEGIN stmtFun1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("stmtFun",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // input ::= ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("input",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // fun_op ::= INLINE on_off 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fun_op",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // fun_op ::= CALLED input 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fun_op",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // fun_op ::= RETURNS NULL input 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fun_op",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // fun_op ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fun_op",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // fun_op ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fun_op",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // fun_op ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("fun_op",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // with2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("with2",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // with2 ::= coma with1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("with2",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // with1 ::= fun_op with2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("with1",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // with3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("with3",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // with3 ::= WITH with1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("with3",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // readonly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("readonly",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // readonly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("readonly",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // as ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("as",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // as ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("as",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // paramF2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramF2",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // paramF2 ::= coma paramF1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramF2",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // paramF1 ::= arroba Identificador as data_tipo2 paramSP1 readonly paramF2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramF1",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // paramF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramF",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // paramF ::= paramF1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramF",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // function ::= FUNCTION obj_n parentesis_izquierdo paramF parentesis_derecho RETURNS data_tipo2 with3 as stmtFun 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // startSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("startSP2",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // startSP2 ::= startSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("startSP2",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // startSP1 ::= StmtDML2 startSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("startSP1",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // startSP ::= BEGIN startSP1 END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("startSP",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // replicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("replicationSP",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // replicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("replicationSP",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // clause ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("clause",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("clause",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("clause",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("clause",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // clause_exc ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("clause_exc",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // clause_exc ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("clause_exc",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // sp_op3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op3",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // sp_op3 ::= coma sp_op1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op3",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // sp_op2 ::= clause_exc AS clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op2",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // sp_op2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op2",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // sp_op2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op2",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // sp_op1 ::= sp_op2 sp_op3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op1",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // sp_op ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // sp_op ::= WITH sp_op1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("sp_op",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // paramSP3 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP3",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // paramSP3 ::= coma paramSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP3",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // paramSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP2",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // paramSP2 ::= tipo_out 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP2",104, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // paramSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP1",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // paramSP1 ::= igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP1",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // tipo_out ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_out",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // tipo_out ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_out",102, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // tipoParam ::= Identificador READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipoParam",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // tipoParam ::= data_tipo2 paramSP1 paramSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipoParam",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // tipoParam ::= CURSOR VARYING tipo_out 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipoParam",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // paramSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // paramSP ::= arroba Identificador tipoParam paramSP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("paramSP",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // numSp ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("numSp",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // numSp ::= punto_coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("numSp",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // procedure ::= proc obj_n numSp paramSP sp_op replicationSP AS startSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("procedure",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // proc ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("proc",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // proc ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("proc",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // drop_view ::= VIEW if_op obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_view",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // drop_user ::= USER if_op obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_user",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // index_list1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("index_list1",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // index_list1 ::= coma index_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("index_list1",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // index_list ::= obj_n ON obj_n index_list1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("index_list",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // drop_index ::= INDEX if_op index_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_index",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // db_list1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("db_list1",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // db_list1 ::= coma db_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("db_list1",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // db_list ::= obj_n db_list1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("db_list",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // drop_db ::= DATABASE if_op db_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_db",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // drop_table ::= TABLE if_op list_table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_table",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // if_op ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_op",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // if_op ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_op",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // drop_name ::= drop_view 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_name",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // drop_name ::= drop_user 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_name",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // drop_name ::= drop_db 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_name",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // drop_name ::= drop_index 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_name",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // drop_name ::= drop_table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop_name",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // drop ::= DROP drop_name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("drop",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // porcentaje ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("porcentaje",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // porcentaje ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("porcentaje",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // opciones_delete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_delete",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // opciones_delete ::= TOP expresion porcentaje 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_delete",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // delet ::= DELETE opciones_delete FROM obj_n condicionales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("delet",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // opciones_update ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_update",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // opciones_update ::= TOP expresion porcentaje 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opciones_update",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // asignaciones1 ::= aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignaciones1",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // asignaciones1 ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignaciones1",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // asignaciones1 ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignaciones1",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // asignacionesprima ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacionesprima",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // asignacionesprima ::= coma obj_n igual asignaciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacionesprima",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // asignaciones ::= asignaciones1 asignacionesprima 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignaciones",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // update ::= UPDATE opciones_update obj_n SET obj_n igual asignaciones condicionales 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("update",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // val_ins1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("val_ins1",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // val_ins1 ::= coma val_ins 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("val_ins1",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // val_ins ::= data_tipo1 val_ins1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("val_ins",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // valores1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores1",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // valores1 ::= coma valores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores1",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // valores ::= parentesis_izquierdo val_ins parentesis_derecho valores1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valores",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // insercion ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("insercion",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // insercion ::= VALUES valores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("insercion",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // campo1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campo1",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // campo1 ::= coma campo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campo1",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // campo ::= Identificador campo1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("campo",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // seleccion1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion1",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // seleccion1 ::= parentesis_izquierdo campo parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion1",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // into ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("into",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // into ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("into",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // inser ::= INSERT into obj_n seleccion1 insercion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inser",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // tipo_orden ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_orden",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // tipo_orden ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_orden",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // tipo_orden ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_orden",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // orden1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden1",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // orden1 ::= coma obj_n orden1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden1",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // orden_opcion ::= funciones tipo_orden orden1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden_opcion",221, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // orden_opcion ::= obj_n tipo_orden orden1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden_opcion",221, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // orden ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // orden ::= ORDER BY orden_opcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("orden",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // teniendo2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("teniendo2",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // teniendo2 ::= operadores_logicos teniendo1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("teniendo2",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // teniendo1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("teniendo1",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // teniendo1 ::= obj_n operadores data_tipo teniendo2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("teniendo1",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // teniendo1 ::= funciones operadores data_tipos teniendo2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("teniendo1",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // teniendo ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("teniendo",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // teniendo ::= HAVING teniendo1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("teniendo",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // agrupado1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agrupado1",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // agrupado1 ::= coma obj_n agrupado1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agrupado1",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // agrupado ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agrupado",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // agrupado ::= GROUP BY obj_n agrupado1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("agrupado",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // objetos_separados_por_comas1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("objetos_separados_por_comas1",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // objetos_separados_por_comas1 ::= coma objetos_separados_por_comas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("objetos_separados_por_comas1",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // objetos_separados_por_comas ::= data_tipos objetos_separados_por_comas1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("objetos_separados_por_comas",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // operadores ::= BETWEEN Int AND Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // operadores ::= LIKE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // operadores ::= igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // operadores ::= diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // operadores ::= mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // operadores ::= menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // operadores ::= mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // operadores ::= menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // operadores_logicos ::= or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // operadores_logicos ::= and 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("operadores_logicos",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // otra_condicion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("otra_condicion",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // otra_condicion ::= obj_n operadores data_tipos condicionales1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("otra_condicion",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // condicionales1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionales1",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // condicionales1 ::= operadores_logicos otra_condicion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionales1",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // condicionalesprima ::= IN parentesis_izquierdo objetos_separados_por_comas parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionalesprima",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // condicionalesprima ::= IS NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionalesprima",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // condicionalesprima ::= IS NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionalesprima",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // condicionalesprima ::= operadores data_tipos condicionales1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionalesprima",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // condicionales ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionales",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // condicionales ::= WHERE obj_n condicionalesprima 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("condicionales",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // joins1 ::= joins 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("joins1",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // tipo_join1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_join1",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // tipo_join1 ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_join1",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipo_join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_join",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipo_join ::= FULL tipo_join1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_join",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipo_join ::= RIGHT tipo_join1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_join",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipo_join ::= LEFT tipo_join1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_join",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipo_join ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_join",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // joins ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("joins",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // joins ::= tipo_join JOIN obj_n alias_tabla ON obj_n igual obj_n joins1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("joins",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // opcion_alias ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opcion_alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // opcion_alias ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opcion_alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // alias_tabla ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alias_tabla",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // alias_tabla ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alias_tabla",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // alias_tabla ::= AS opcion_alias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alias_tabla",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // origen1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("origen1",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // origen1 ::= coma origen 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("origen1",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // origen ::= obj_n alias_tabla origen1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("origen",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // alias_columna ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alias_columna",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // alias_columna ::= AS opcion_alias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("alias_columna",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // puede ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("puede",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // puede ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("puede",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // valor3 ::= data_tipo valor2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valor3",246, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // valor2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valor2",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // valor2 ::= coma valor3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valor2",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // valor ::= puede obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // valor ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // valor ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("valor",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // funciones_callprima ::= parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones_callprima",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // funciones_callprima ::= valor3 parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones_callprima",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // funciones_call ::= obj_n parentesis_izquierdo funciones_callprima 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones_call",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // funciones ::= funciones_call 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // funciones ::= MAX parentesis_izquierdo valor parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // funciones ::= MIN parentesis_izquierdo valor parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // funciones ::= COUNT parentesis_izquierdo valor parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // funciones ::= AVG parentesis_izquierdo valor parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // funciones ::= SUM parentesis_izquierdo valor parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("funciones",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // data_tipo_operacion ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // data_tipo_operacion ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo_operacion",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // columna3 ::= aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna3",254, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // columna3 ::= funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna3",254, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // columna3 ::= data_tipo_operacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna3",254, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // columna2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // columna2 ::= coma columna 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna2",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // columna1 ::= arroba Identificador igual columna3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna1",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // columna1 ::= obj_n igual aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna1",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // columna1 ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna1",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // columna1 ::= aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna1",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // columna1 ::= funciones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna1",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // columna1 ::= data_tipo_operacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna1",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // columna ::= columna1 alias_columna columna2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("columna",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= parentesis_izquierdo Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // seleccion ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // seleccion ::= TOP expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // seleccion ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // seleccion ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("seleccion",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opcion_select ::= seleccion columna 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("opcion_select",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // selec ::= SELECT opcion_select FROM origen joins condicionales agrupado teniendo orden 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("selec",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // list_table1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("list_table1",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // list_table1 ::= coma list_table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("list_table1",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // list_table ::= obj_n list_table1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("list_table",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // trunc ::= TRUNCATE TABLE list_table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("trunc",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // i ::= dolar Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("i",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // i ::= dolar Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("i",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // i ::= arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("i",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // i ::= obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("i",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // i ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("i",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // i ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("i",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // C ::= parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("C",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // U ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("U",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // U ::= division T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("U",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // U ::= multiplicacion T 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("U",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // T ::= parentesis_izquierdo aritmetica C U 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // T ::= i U 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("T",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // X ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("X",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // X ::= resta aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("X",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // X ::= suma aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("X",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // V ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // V ::= resta aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // V ::= suma aritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // V ::= division T X 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // V ::= multiplicacion T X 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("V",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // aritmetica ::= parentesis_izquierdo aritmetica C V 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("aritmetica",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aritmetica ::= i V 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("aritmetica",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // data_tipos ::= dolar Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // data_tipos ::= dolar Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // data_tipos ::= arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // data_tipos ::= obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // data_tipos ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // data_tipos ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // data_tipos ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // data_tipos ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // data_tipos ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipos",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // data_tipo2 ::= DECIMAL parentesis_izquierdo Int coma Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // data_tipo2 ::= INT parentesis_izquierdo Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // data_tipo2 ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // data_tipo2 ::= NVARCHAR parentesis_izquierdo Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // data_tipo2 ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // data_tipo2 ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // data_tipo2 ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // data_tipo2 ::= VARCHAR parentesis_izquierdo Int parentesis_derecho 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo2",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // data_tipo1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo1",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // data_tipo1 ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo1",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // data_tipo1 ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo1",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // data_tipo1 ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo1",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // data_tipo1 ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo1",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // data_tipo ::= obj_n 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // data_tipo ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // data_tipo ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data_tipo ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data_tipo ::= Bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data_tipo ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("data_tipo",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // obj_n2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("obj_n2",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // obj_n2 ::= punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("obj_n2",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // obj_n1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("obj_n1",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // obj_n1 ::= punto Identificador obj_n2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("obj_n1",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // obj_n ::= Identificador obj_n1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("obj_n",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FINALIZADORES ::= punto_coma GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZADORES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FINALIZADORES ::= GO punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZADORES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FINALIZADORES ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZADORES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FINALIZADORES ::= punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FINALIZADORES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // StmtDML2 ::= delet FINALIZADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML2",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // StmtDML2 ::= update FINALIZADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML2",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StmtDML2 ::= inser FINALIZADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML2",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StmtDML2 ::= selec FINALIZADORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML2",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StmtDML ::= delet FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StmtDML ::= update FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StmtDML ::= inser FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StmtDML ::= selec FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtDML",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= execute FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= USE obj_n FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= error FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= cursor FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= savepoint FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= rollback FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= commit FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= transaction FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= drop FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= create_f_sp FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= create FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S ::= alte FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= trunc FINALIZADORES STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= StmtDML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATMENT ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATMENT",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STATMENT ::= S 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATMENT",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= STATMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

